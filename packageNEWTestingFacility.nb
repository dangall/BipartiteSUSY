(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    531586,      11535]
NotebookOptionsPosition[    524334,      11339]
NotebookOutlinePosition[    524676,      11354]
CellTagsIndexPosition[    524633,      11351]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "4", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6616922986967053`*^9, 3.661692334211833*^9}, 
   3.6645297915320587`*^9, {3.664542240753628*^9, 3.6645422474264593`*^9}, {
   3.680934704229562*^9, 3.6809347533650007`*^9}, {3.6809543362698655`*^9, 
   3.6809543363842587`*^9}, {3.6845605440753374`*^9, 
   3.6845605553487687`*^9}, {3.684562765502802*^9, 3.684562793520077*^9}, {
   3.6845660379537706`*^9, 3.684566054464094*^9}, {3.6845697845394883`*^9, 
   3.6845697897179832`*^9}, 3.685004266784112*^9, 3.685022303910327*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", "allbft1kasteleyns"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", "allbft2kasteleyns"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", "allscatteringkasteleyns"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"annoyingsmallexamples", "=", 
   RowBox[{"<<", "annoyingsmallexamples"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.680936749950627*^9, 3.6809367529289207`*^9}, {
   3.6809494277220397`*^9, 3.6809494359161243`*^9}, {3.6809502871251383`*^9, 
   3.6809503204036846`*^9}, 3.6845604567157564`*^9, 3.684560498101055*^9, 
   3.6845605600539923`*^9, 3.684562408870197*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580188155656`*^9, 3.6809580190545444`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "getNumberFaces"}], ",", " ",
    "getNumberExternalFaces", ",", " ", "getNumberInternalFaces", ",", " ", 
   "getInternalFaceLabels", ",", " ", "getExternalFaceLabels", ",", " ", 
   "getFaceLabels"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.6809580264274635`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bft1TestFaces", "[", 
    RowBox[{"{", 
     RowBox[{"aa_", ",", "bb_", ",", "cc_", ",", "dd_"}], "}"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "When", " ", "we", " ", "count", " ", "faces", " ", "we", " ", "need", 
        " ", "to", " ", "remove", " ", "those", " ", "edges", " ", "which", 
        " ", 
        RowBox[{"don", "'"}], "t", " ", "participate", " ", "in", " ", "any", 
        " ", "perfect", " ", "matchings"}], ",", " ", 
       RowBox[{
       "in", " ", "case", " ", "they", " ", "happen", " ", "to", " ", "form", 
        " ", "an", " ", "extra", " ", "face"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{"higgsEdgesBFT", "[", 
        RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd", ",", 
         RowBox[{"consistentEdgeRemoval", "[", 
          RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd", ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{"{", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}], "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"getNumberFaces", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
             RowBox[{
              RowBox[{"getNumberInternalFaces", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "+", 
              RowBox[{"getNumberExternalFaces", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}]}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"perfectMatchings", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
               "\[NotEqual]", 
               RowBox[{"{", "}"}]}], "&&", 
              RowBox[{
               RowBox[{
                RowBox[{"getNumberFaces", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "-", 
                "1"}], ">", 
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{"matchingPolytope", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                "]"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with counting faces!\>\""}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<and {aa,bb,cc,dd}=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"getFaceLabels", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "=!=", 
            RowBox[{"Sort", "[", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"getInternalFaceLabels", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
               RowBox[{"getExternalFaceLabels", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the face labels! The internal \
and external face lables do not togehter form all face labels\>\""}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<and {aa,bb,cc,dd}=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bft1TestFaces", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"bft1TestFaces", ",", "allbft1kasteleyns"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"bft1TestFaces", ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6809368673042316`*^9, 3.6809369642578907`*^9}, {
   3.6809373036755733`*^9, 3.680937320393875*^9}, {3.68094945328999*^9, 
   3.6809494551585407`*^9}, {3.680949567555023*^9, 3.6809496049332643`*^9}, {
   3.680949641164015*^9, 3.680949650602211*^9}, {3.6809500858928022`*^9, 
   3.6809500860894055`*^9}, {3.680953204512086*^9, 3.680953281020768*^9}, 
   3.680953323091693*^9, 3.6809533619719105`*^9, {3.6809536983983207`*^9, 
   3.680953723634925*^9}, {3.6809537973310194`*^9, 3.6809538183646946`*^9}, {
   3.6809538527826324`*^9, 3.6809538572553144`*^9}, 3.6809580264274635`*^9, {
   3.684560528346801*^9, 3.6845607041956577`*^9}, {3.6845624136474285`*^9, 
   3.684562414053705*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809538659790955`*^9, 3.680953866166606*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "turnIntoWeightedAdjacencyMatrix"}], 
   ",", " ", "turnIntoAdjacencyMatrix", ",", " ", "turnIntoGraph"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.6809580374065695`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestAdjacencyMatricesAndGraph", "[", 
    RowBox[{"{", 
     RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"graphwithedges", ",", "graphnoedges"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"WeightedGraphQ", "[", 
           RowBox[{"WeightedAdjacencyGraph", "[", 
            RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}],
           "\[Equal]", "False"}], "||", 
         RowBox[{
          RowBox[{"GraphQ", "[", 
           RowBox[{"AdjacencyGraph", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "/.", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "\[Rule]", "1"}], "&"}], ",", 
                 RowBox[{"Variables", "[", 
                  RowBox[{"Join", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                  "]"}]}], "]"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"\[Infinity]", "\[Rule]", "0"}], "}"}]}], "]"}], "]"}], 
          "\[Equal]", "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the Weighted adjacency matrix! It \
does not form a valid weighted graph\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", 
          RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "=!=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}], ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the Weighted adjacency matrix! Its \
size is wrong\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"GraphQ", "[", 
          RowBox[{"AdjacencyGraph", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}], 
         "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the normal adjacency matrix! It \
does not form a valid graph\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "=!=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}], ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the normal adjacency matrix! Its \
size is wrong\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "/.", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "\[Rule]", "1"}], "&"}], ",", 
               RowBox[{"Variables", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
              "]"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"\[Infinity]", "\[Rule]", "0"}], "}"}]}], ")"}], "=!=", 
         RowBox[{"turnIntoAdjacencyMatrix", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the adjacency matrices! \
turnIntoWeightedAdjacencyMatrix doesn't correspond to turnIntoAdjacencyMatrix\
\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graphwithedges", "=", 
       RowBox[{"turnIntoGraph", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graphnoedges", "=", 
       RowBox[{"turnIntoGraph", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"GraphQ", "[", "graphwithedges", "]"}], "\[Equal]", 
          "False"}], "||", 
         RowBox[{
          RowBox[{"GraphQ", "[", "graphnoedges", "]"}], "\[Equal]", 
          "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with turnIntoGraph! It doesn't produce a \
valid graph\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestAdjacencyMatricesAndGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"allTestAdjacencyMatricesAndGraph", ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"allTestAdjacencyMatricesAndGraph", ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
   "allTestAdjacencyMatricesAndGraph", ",", "allscatteringkasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"allTestAdjacencyMatricesAndGraph", ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6809501524175406`*^9, 3.6809502773276024`*^9}, {
   3.680953890358967*^9, 3.6809538935656924`*^9}, {3.680954262356439*^9, 
   3.6809542746316233`*^9}, 3.6809580374065695`*^9}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809547750940943`*^9, 3.6809547751724873`*^9}, {
  3.6809548811659465`*^9, 3.6809548817128515`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "getDuplicateEdges"}], ",", 
   " ", "getEdgesBFTformQ"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.68095806299942*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestChecksKasteleyn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"messuprule", ",", "duplicatingrule"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"(", 
           RowBox[{"getEdgesBFTformQ", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"edge_", "?", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "=!=", "List"}], " ", "&"}], ")"}]}], "[", 
                 RowBox[{"ind1_", ",", "ind2_"}], "]"}], "\[RuleDelayed]", 
                SubscriptBox["edge", 
                 RowBox[{"ind1", ",", "ind2"}]]}], "}"}]}], ")"}]}], ")"}], 
          ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"bftlabeling", "\[Equal]", "False"}], "&&", 
           RowBox[{"getEdgesBFTformQ", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ")"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getEdgesBFTformQ! It doesn't \
complain even when all the edges are \!\(\*SubscriptBox[\(X\), \(i, j\)]\) \
rather than X[i,j]\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"messuprule", "=", 
       RowBox[{
        RowBox[{"Last", "[", 
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"Variables", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"edge_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "=!=", "List"}], " ", "&"}], ")"}]}], "[", 
             RowBox[{"ind1_", ",", "ind2_"}], "]"}], "\[RuleDelayed]", 
            SubscriptBox["edge", 
             RowBox[{"ind1", ",", "ind2"}]]}], "}"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{"(", 
          RowBox[{"getEdgesBFTformQ", "[", 
           RowBox[{
            RowBox[{"a", "/.", "messuprule"}], ",", 
            RowBox[{"b", "/.", "messuprule"}], ",", 
            RowBox[{"c", "/.", "messuprule"}], ",", 
            RowBox[{"d", "/.", "messuprule"}]}], "]"}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getEdgesBFTformQ! It doesn't \
complain even when an edge is \!\(\*SubscriptBox[\(X\), \(i, j\)]\) rather \
than X[i,j]\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"getEdgesBFTformQ", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "\[Equal]", 
          "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getEdgesBFTformQ! It complains even \
though all the edges are of the form X[i,j]\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getDuplicateEdges", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getDuplicateEdges! It claims we \
have duplicate edges in this Kastelen\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"duplicatingrule", "=", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"Last", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"getDuplicateEdges", "[", 
           RowBox[{
            RowBox[{"a", "/.", "duplicatingrule"}], ",", 
            RowBox[{"b", "/.", "duplicatingrule"}], ",", 
            RowBox[{"c", "/.", "duplicatingrule"}], ",", 
            RowBox[{"d", "/.", "duplicatingrule"}]}], "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Last", "[", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "b", "]"}], ",", 
              RowBox[{"Variables", "[", "c", "]"}], ",", 
              RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}], "}"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Variables", "[", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}], "]"}],
           ">", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getDuplicateEdges! It doesn't spot \
a duplicated edge\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"duplicatingrule", "=", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"Last", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}]}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"getDuplicateEdges", "[", 
           RowBox[{
            RowBox[{"a", "/.", "duplicatingrule"}], ",", 
            RowBox[{"b", "/.", "duplicatingrule"}], ",", 
            RowBox[{"c", "/.", "duplicatingrule"}], ",", 
            RowBox[{"d", "/.", "duplicatingrule"}]}], "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Last", "[", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "b", "]"}], ",", 
              RowBox[{"Variables", "[", "a", "]"}], ",", 
              RowBox[{"Variables", "[", "c", "]"}]}], "]"}], "]"}], "}"}]}], "&&", 
         RowBox[{
          RowBox[{"duplicatingrule", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=!=", 
          RowBox[{"duplicatingrule", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Variables", "[", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}], "]"}],
           ">", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getDuplicateEdges! It doesn't spot \
a duplicated edge\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"getKasteleynConsistencyViolation", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getKasteleynConsistencyViolation! \
It's finding problems where there are none, by claimimng some rows or columns \
don't have the right cyclic structure\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Variables", "[", "a", "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"zz", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
              RowBox[{"zz", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}], "=!=", 
          RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"messuprule", "=", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "a", "]"}], ",", 
              RowBox[{"zz_", "/;", 
               RowBox[{
                RowBox[{"zz", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
                RowBox[{"zz", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}], "]"}], 
           "\[Rule]", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"Variables", "[", "a", "]"}], ",", 
               RowBox[{"zz_", "/;", 
                RowBox[{
                 RowBox[{"zz", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
                 RowBox[{"zz", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"Length", ",", 
               RowBox[{"getKasteleynConsistencyViolation", "[", 
                RowBox[{
                 RowBox[{"a", "/.", "messuprule"}], ",", 
                 RowBox[{"b", "/.", "messuprule"}], ",", 
                 RowBox[{"c", "/.", "messuprule"}], ",", 
                 RowBox[{"d", "/.", "messuprule"}]}], "]"}]}], "]"}], "]"}], 
            "\[LessEqual]", "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with \
getKasteleynConsistencyViolation! It's finding problems where there are none, \
by claimimng some rows or columns don't have the right cyclic \
structure\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getKasteleynCheckQ", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}], 
         "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getKasteleynCheckQ! It claims there \
are duplicate edges in the Kasteleyn\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"bftlabeling", "===", "True"}], "&&", 
         RowBox[{
          RowBox[{"getKasteleynCheckQ", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}], 
          "\[Equal]", "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getKasteleynCheckQ! It claims \
there's something wrong with the Kasteleyn\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestChecksKasteleyn", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6809548359029303`*^9, 3.6809548771314993`*^9}, 
   3.6809549575141845`*^9, {3.6809550018475513`*^9, 3.680955016054621*^9}, {
   3.680955089907172*^9, 3.6809552826635556`*^9}, {3.6809553521551037`*^9, 
   3.680955424583268*^9}, {3.680955469919272*^9, 3.6809555127457175`*^9}, {
   3.6809563095784492`*^9, 3.680956390645215*^9}, {3.6809564545788746`*^9, 
   3.6809565398682613`*^9}, {3.680956594376968*^9, 3.680956631869005*^9}, {
   3.6809566953540554`*^9, 3.6809567201604347`*^9}, {3.6809567777217293`*^9, 
   3.6809567850952597`*^9}, {3.680956815128813*^9, 3.680956835314481*^9}, {
   3.6809568750363607`*^9, 3.6809568752554026`*^9}, {3.6809569281548967`*^9, 
   3.6809569470629773`*^9}, {3.680956983738322*^9, 3.6809570063447423`*^9}, {
   3.6809570615978966`*^9, 3.6809570812467613`*^9}, {3.6809571757589655`*^9, 
   3.6809572965056458`*^9}, {3.680957341166053*^9, 3.68095735222294*^9}, {
   3.680957393324005*^9, 3.6809574700091496`*^9}, 3.68095806299942*^9}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958051477315*^9, 3.6809580516023474`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "perfectMatchings"}], ",", 
   " ", "matchingPolytope"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845771110976667`*^9, 
   3.684578169129551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"aa_", ",", "bb_", ",", "cc_", ",", "dd_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "a", ",", "b", ",", "c", ",", "d", ",", "perfsnoBFT", ",", 
       "perfsnochecknoBFT", ",", "matrixPchecknoBFT", ",", 
       "matrixPnochecknoBFT", ",", "perfscheckBFT", ",", "perfsnocheckBFT", 
       ",", "matrixPcheckBFT", ",", "matrixPnocheckBFT"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"XX_Symbol", "[", 
            RowBox[{"ind1_Integer", ",", "ind2_Integer"}], "]"}], "/;", 
           RowBox[{"(", 
            RowBox[{"XX", "=!=", "List"}], ")"}]}], "\[RuleDelayed]", 
          SubscriptBox["XX", 
           RowBox[{"{", 
            RowBox[{"ind1", ",", "ind2"}], "}"}]]}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfsnoBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfsnochecknoBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matrixPchecknoBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matrixPnochecknoBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{"{", 
        RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfscheckBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfsnocheckBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "perfsnoBFT", "]"}], "=!=", 
          RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}], "=!=", 
          RowBox[{"Length", "[", "perfscheckBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Length", "[", "perfscheckBFT", "]"}], "=!=", 
          RowBox[{"Length", "[", "perfsnocheckBFT", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with perfectMatchings! It doesn't give \
the same number of perfect matchings irrespective of checking options\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matrixPcheckBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matrixPnocheckBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPchecknoBFT", "]"}], "=!=", 
          RowBox[{"Dimensions", "[", "matrixPnochecknoBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPchecknoBFT", "]"}], "=!=", 
          RowBox[{"Dimensions", "[", "matrixPcheckBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPcheckBFT", "]"}], "=!=", 
          RowBox[{"Dimensions", "[", "matrixPnocheckBFT", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! It doesn't have the \
same size irrespective of checking options\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "matrixPcheckBFT", "]"}], "=!=", 
         RowBox[{"Length", "[", 
          RowBox[{"Variables", "[", 
           RowBox[{"Join", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! It's Length is not the \
numnber of edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPcheckBFT", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=!=", 
         RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! It has a different \
number of columns than perfect matchings\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"perfsnocheckBFT", ",", 
               RowBox[{"Times", "@@", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Variables", "[", 
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                    "#"}], ",", "0"}], "]"}]}]}], "]"}], "&"}], ",", 
            RowBox[{"Transpose", "[", "matrixPcheckBFT", "]"}]}], "]"}], 
          "]"}], "=!=", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! Its columns do not \
correspond to perfect matchings, i.e. the 1's are in the wrong places\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestPerfectMatchingsMatrixP", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577117376279*^9, 
   3.684577126118273*^9}, {3.6845771775434*^9, 3.684577196731828*^9}, {
   3.6845774317136207`*^9, 3.6845774511807165`*^9}, {3.6845775890748835`*^9, 
   3.684577594016451*^9}, {3.68457762806287*^9, 3.6845776599138165`*^9}, {
   3.684578216468128*^9, 3.684578225636292*^9}, {3.6845785133518724`*^9, 
   3.6845786599941845`*^9}, 3.6845787822522287`*^9, {3.684578831686072*^9, 
   3.6845788389014473`*^9}, {3.6845789830670347`*^9, 3.684578991074467*^9}, 
   3.6845790366649113`*^9, {3.6845792310247006`*^9, 3.6845792548635235`*^9}, {
   3.6845792858710604`*^9, 3.684579300094637*^9}, {3.684579339084278*^9, 
   3.6845793502639246`*^9}, {3.684579513111389*^9, 3.6845796137432575`*^9}, {
   3.684579699401449*^9, 3.6845797113456388`*^9}, {3.6845797785930214`*^9, 
   3.6845797898038454`*^9}, {3.6845798242101564`*^9, 3.6845798676406307`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6845782513985415`*^9, 3.6845782515860577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "survivingPerfectMatchings"}],
   "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, {3.6847510393558655`*^9, 
   3.684751039645856*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestSurvivingPerfectMatchings", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tokillvars", ",", "perfs", ",", "survivorscheck", ",", "survivors"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tokillvars", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"Min", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Variables", "[", 
                 RowBox[{"Join", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                "]"}], "/", "7"}], "]"}]}], "}"}], "]"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "tokillvars", "]"}], ">", "5000"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tokillvars", "=", 
          RowBox[{"tokillvars", "[", 
           RowBox[{"[", 
            RowBox[{"Range", "[", "5000", "]"}], "]"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"survivorscheck", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Complement", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "perfs", "]"}], "]"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"perfs", "/.", "#"}], ",", "0"}], "]"}], "]"}]}], 
           "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", "tokillvars", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"survivors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"survivingPerfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "tokillvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"survivors", "=!=", "survivorscheck"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with survivingPerfectMatchings! It's not \
determining the correct set of surviving perfect-matching numbers\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestSurvivingPerfectMatchings", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580289290621*^9, 3.68458029291835*^9}, {
   3.6847498998628654`*^9, 3.68474992199912*^9}, {3.6847500203715506`*^9, 
   3.684750021958994*^9}, {3.6847524218191314`*^9, 3.6847524264156675`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958054424649*^9, 3.680958054471553*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "matroidPolytope"}], ",", 
   " ", "moduliSpaceBFT", ",", " ", "turnIntoPolytope", ",", " ", 
   "dimensionPolytope", ",", " ", "lowNumberLoopsPMpos"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684577759576995*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestPolytopesAndPMs", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "matroidpoly", ",", "moduligauging1", ",", 
       "loopvarsgauging1", ",", "moduligauging2", ",", "loopvarsgauging2", 
       ",", "dimmatroidpoly", ",", "dimmoduli1", ",", "dimmoduli2", ",", 
       "externalnodes"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matroidpoly", "=", 
       RowBox[{"matroidPolytope", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"moduligauging1", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopvarsgauging1", "=", 
          RowBox[{"loopVariablesBasis", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"moduligauging2", "=", 
       RowBox[{"moduliSpaceBFT", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"loopvarsgauging2", "=", 
       RowBox[{"loopVariablesBasis", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "matroidpoly", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=!=", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the matroid polytope! Its number of \
columns is not equal to the number of perfect matchings\>\""}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dimmatroidpoly", "=", 
       RowBox[{"dimensionPolytope", "[", "matroidpoly", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dimmatroidpoly", "=!=", 
         RowBox[{"Length", "[", 
          RowBox[{"loopvarsgauging2", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"bftlabeling", "=!=", "False"}], "&&", 
            RowBox[{"dimmatroidpoly", "=!=", 
             RowBox[{"dimensionPolytope", "[", 
              RowBox[{
               RowBox[{"moduliLoopVariablesBFT", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}], 
               "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the matroid polytope! Its \
dimension does not correspond to that obtained from the loop variable basis\>\
\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"moduligauging2", "=!=", "matroidpoly"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the moduli space Gauging 2! It's \
not equal to the matroid polytope\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Dimensions", "[", "moduligauging1", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "=!=", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli space Gauging 1! Its \
number of columns is not equal to the number of perfect matchings\>\""}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dimmoduli1", "=", 
          RowBox[{"dimensionPolytope", "[", "moduligauging1", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dimmoduli1", "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"loopvarsgauging1", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"bftlabeling", "=!=", "False"}], "&&", 
               RowBox[{"dimmoduli1", "=!=", 
                RowBox[{"dimensionPolytope", "[", 
                 RowBox[{
                  RowBox[{"moduliLoopVariablesBFT", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], 
                   "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli space Gauging 1! \
Its dimension does not correspond to that obtained from the loop variable \
basis\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"dimmoduli2", "=", 
       RowBox[{"dimensionPolytope", "[", "moduligauging2", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dimmoduli2", "\[NotEqual]", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"externalnodes", "=", 
          RowBox[{"getOrderingExternalNodesDefault", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dimmoduli2", "=!=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Variables", "[", 
                  RowBox[{"Join", "[", 
                   RowBox[{"b", ",", "c"}], "]"}], "]"}], "]"}], "-", 
                RowBox[{"Length", "[", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"ConnectedComponents", "[", 
                    RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     "]"}], ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "}"}],
                     "]"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"Alternatives", "@@", "externalnodes"}], ",", 
                    "___"}], "}"}]}], "]"}], "]"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], "\[Rule]", "0"}], "}"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with dimensionPolytope!\>\""}], "]"}],
             ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "perfs", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], ">", 
            RowBox[{"Length", "[", 
             RowBox[{"Subsets", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"Length", "[", "c", "]"}], "+", 
                 RowBox[{
                  RowBox[{"Dimensions", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"getSourceEdges", "[", 
                  RowBox[{"b", ",", "c", ",", 
                   RowBox[{"perfs", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "}"}]}], 
              "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with turnIntoPolytope! It claims that \
the matroid polytope has more points than Plucker coordinates\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", "matroidpoly", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with turnIntoPolytope! The sum of \
multiplicities does not equal the number of point!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{
                RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", 
                  RowBox[{"Min", "[", 
                   RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
               "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Transpose", "[", "matroidpoly", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with lowNumberLoopsPMpos! It's not \
selecting the lowest possible number of loops\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Total", "[", 
                RowBox[{
                 RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                 "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               RowBox[{
                RowBox[{"Dimensions", "[", "moduligauging1", "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli space Gauging 1! \
The sum of multiplicities does not equal the number of point!\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", "moduligauging2", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", "moduligauging2", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli space Gauging 2! The \
sum of multiplicities does not equal the number of point!\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestPolytopesAndPMs", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.684578191390497*^9, 3.6845781986049185`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580548468485`*^9, 3.680958054893749*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "reducibilityBFTQ"}], ",", 
   " ", "reducibilityBFTedges"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestReducibilityBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "reducib1", ",", "reducib2", ",", "reducib1Q", ",", "reducibedges1", 
       ",", "reducib2Q", ",", "reducibedges2", ",", "perfs", ",", 
       "removeuselessedgesgauging1", ",", "removeuselessedgesgauging2"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reducib1", "=", 
          RowBox[{"reducibilityBFTedges", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "reducib1", "]"}], "=!=", "List"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibilityBFTedges! It's not \
returning a list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"reducib1Q", "=", 
          RowBox[{"reducibilityBFTQ", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"reducibedges1", "=", 
          RowBox[{"reducibilityBFTedges", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"reducib1Q", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "reducibedges1", "]"}], "\[Equal]", 
               "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibility! It claims \
reducibility without having any edges that can be removed\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "reducibedges1", "]"}], 
               "\[GreaterEqual]", "1"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibility! It claims that \
it's not reducible yet there are edges that can be removed without affecting \
the moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"reducib2", "=", 
       RowBox[{"reducibilityBFTedges", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
         "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "reducib2", "]"}], "=!=", "List"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with reducibilityBFTedges! It's not \
returning a list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reducib2Q", "=", 
       RowBox[{"reducibilityBFTQ", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
         "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"reducibedges2", "=", 
       RowBox[{"reducibilityBFTedges", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
         "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"reducib2Q", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "reducibedges2", "]"}], "\[Equal]", "0"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibility! It claims \
reducibility without having any edges that can be removed\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "reducibedges2", "]"}], "\[GreaterEqual]", 
            "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibility! It claims that \
it's not reducible yet there are edges that can be removed without affecting \
the moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"perfs", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"removeuselessedgesgauging1", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
               RowBox[{"reducibilityBFTedges", "[", 
                RowBox[{
                "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", 
                 ",", "True"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"turnIntoPolytope", "[", 
                  RowBox[{"moduliSpaceBFT", "[", 
                   RowBox[{
                   "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", 
                    ",", "True"}], "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"turnIntoPolytope", "[", 
                  RowBox[{"Transpose", "[", 
                   RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False",
                     ",", "True"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"survivingPerfectMatchings", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", 
                    "removeuselessedgesgauging1"}], "]"}], "]"}], "]"}], 
                   "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 1! Removing the edges that it says can be removed actually decreases \
the number of points in the moduli space\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"removeuselessedgesgauging2", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
            RowBox[{"reducibilityBFTedges", "[", 
             RowBox[{
             "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
              "False"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", 
               RowBox[{"moduliSpaceBFT", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}], 
               "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"moduliSpaceBFT", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                   "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"survivingPerfectMatchings", "[", 
                   RowBox[{
                   "a", ",", "b", ",", "c", ",", "d", ",", 
                    "removeuselessedgesgauging2"}], "]"}], "]"}], "]"}], 
                "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 2! Removing the edges that it says can be removed actually decreases \
the number of points in the moduli space\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"reducibilityBFTedges", "[", 
                RowBox[{
                "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", 
                 ",", "True"}], "]"}], "=!=", 
               RowBox[{"Variables", "[", 
                RowBox[{"joinupKasteleyn", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 1! When there are no perfect matchings it should match ALL \
edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"reducibilityBFTedges", "[", 
             RowBox[{
             "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
              "False"}], "]"}], "=!=", 
            RowBox[{"Variables", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 2! When there are no perfect matchings it should match ALL \
edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestReducibilityBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684580201026436*^9, 3.684580202456217*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "consistentEdgeRemoval"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestconsistentEdgeRemoval", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tokillvars", ",", "killededges", ",", "tozero", ",", "extrakillpos", 
       ",", "remainingvars"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tokillvars", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"Min", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Variables", "[", 
                 RowBox[{"Join", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                "]"}], "/", "2"}], "]"}]}], "}"}], "]"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "tokillvars", "]"}], ">", "5000"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tokillvars", "=", 
          RowBox[{"tokillvars", "[", 
           RowBox[{"[", 
            RowBox[{"Range", "[", "5000", "]"}], "]"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"killededges", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"consistentEdgeRemoval", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "tokillvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tozero", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", "tokillvars", ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extrakillpos", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"#", ",", 
             RowBox[{"ConstantArray", "[", 
              RowBox[{"0", ",", 
               RowBox[{
                RowBox[{"Dimensions", "[", "#", "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "]"}], 
          "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"matchingPolytope", "[", 
             RowBox[{
              RowBox[{"a", "/.", "#"}], ",", 
              RowBox[{"b", "/.", "#"}], ",", 
              RowBox[{"c", "/.", "#"}], ",", "d"}], "]"}], "&"}], ",", 
           "tozero"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"remainingvars", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Variables", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"a", "/.", "#"}], ",", 
             RowBox[{"b", "/.", "#"}], ",", 
             RowBox[{"c", "/.", "#"}]}], "]"}], "]"}], "&"}], ",", "tozero"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#1", "[", 
             RowBox[{"[", "#2", "]"}], "]"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"remainingvars", ",", "extrakillpos"}], "}"}]}], "]"}], "=!=", 
         RowBox[{"MapThread", "[", 
          RowBox[{"Complement", ",", 
           RowBox[{"{", 
            RowBox[{"killededges", ",", "tokillvars"}], "}"}]}], "]"}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with consistentEdgeRemoval! It doesn't \
seem to be adding the correc additional edges\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestconsistentEdgeRemoval", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6845773940653725`*^9, 3.684577397198944*^9}, {
   3.684577456458424*^9, 3.6845774575523963`*^9}, 3.6845775496856365`*^9, 
   3.6845776377975335`*^9, {3.6845782312264123`*^9, 3.6845782315076885`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "reductionGraphBFT"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestReductionGraphBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "reductiongauging1", ",", "moduligauging1", ",", "perfs", ",", 
       "reductiongauging2", ",", "moduligauging2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reductiongauging1", "=", 
          RowBox[{"reductionGraphBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "bftlabeling"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"moduligauging1", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "bftlabeling"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reducibilityBFTQ", "[", 
            RowBox[{
            "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
             "True"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging1", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is reducible and yet reductionGraphBFT returns an empty \
list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging1", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is not reducible and yet reductionGraphBFT does not \
return an empty list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"And", "@@", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"survivingPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}]}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                   "reductiongauging1"}], "]"}]}], ")"}], "===", "False"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! Acting out on the reduction decreases the number of points in the \
moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"reducibilityBFTedges", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
         "\[LessEqual]", "14"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reductiongauging2", "=", 
          RowBox[{"reductionGraphBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"moduligauging2", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reducibilityBFTQ", "[", 
            RowBox[{
            "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
             "True"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging2", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is reducible and yet reductionGraphBFT returns an empty \
list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging2", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is not reducible and yet reductionGraphBFT does not \
return an empty list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"bftlabeling", "=!=", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"perfs", "=", 
             RowBox[{"perfectMatchings", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"And", "@@", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging2", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"survivingPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}]}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging2", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                   "reductiongauging2"}], "]"}]}], ")"}], "===", "False"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 2! Acting out on the reduction decreases the number of points in the \
moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestReductionGraphBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, {3.684648317203306*^9, 3.6846483756137633`*^9}, {
   3.684648405830348*^9, 3.684648471870284*^9}, {3.684648515476287*^9, 
   3.6846486547138352`*^9}, {3.6846486849241643`*^9, 
   3.6846488044910727`*^9}, {3.684653008260338*^9, 3.684653040932087*^9}, {
   3.684653127758386*^9, 3.6846531642077336`*^9}, {3.684654380524395*^9, 
   3.684654384558196*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580552781534`*^9, 3.680958055309431*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", 
    RowBox[{"edgeOrderings", ".", " ", "NB"}], " ", "the", " ", "function", 
    " ", "must", " ", "be", " ", "copied", " ", "from", " ", "the", " ", 
    "package"}], ",", " ", 
   RowBox[{"because", " ", 
    RowBox[{"it", "'"}], "s", " ", "currently", " ", "in", " ", "the", " ", 
    "Private", " ", 
    RowBox[{"context", "!"}]}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648252238911*^9, 
   3.6846532874026117`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"edgeOrderings", "[", 
    RowBox[{"edges_", ",", "currentedge_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"orderings", ",", "ii"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Start", " ", "with", " ", "our", " ", "current", " ", 
       RowBox[{"edge", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"orderings", "=", 
        RowBox[{"{", 
         RowBox[{"Cases", "[", 
          RowBox[{"edges", ",", "currentedge"}], "]"}], "}"}]}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"orderings", "=", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"edges", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "}"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "The", " ", "next", " ", "edge", " ", "should", " ", "have", " ", 
         "the", " ", "structure", " ", 
         RowBox[{
          RowBox[{"_", "[", 
           RowBox[{
            RowBox[{"currentedge", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}], ".", " ", 
          "There"}], " ", "may", " ", "however", " ", "be", " ", "multiple", 
         " ", "alternatives", " ", "of", " ", "this", " ", "type"}], ",", " ", 
        RowBox[{
        "and", " ", "not", " ", "all", " ", "of", " ", "them", " ", "are", 
         " ", "viable", " ", "edge", " ", "orderings", " ", "that", " ", 
         "all", " ", "match", " ", 
         RowBox[{"up", ".", " ", "For"}], " ", "for", " ", "each", " ", 
         "alternative"}], ",", " ", 
        RowBox[{
        "try", " ", "it", " ", "out", " ", "by", " ", "adding", " ", "this", 
         " ", "alternative", " ", "onto", " ", 
         RowBox[{
          RowBox[{"{", "currentedge", "}"}], ".", " ", "Ultimately"}], " ", 
         "we", " ", "only", " ", "want", " ", "to", " ", "keep", " ", "those",
          " ", "alternatives", " ", "that", " ", "match", " ", 
         RowBox[{"up", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"ii", "=", "1"}], ",", 
        RowBox[{"ii", "<", 
         RowBox[{"Length", "[", "edges", "]"}]}], ",", 
        RowBox[{"ii", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "orderings", " ", "contains", " ", "a", " ", "list", " ", "of", " ", 
           RowBox[{"orderings", ".", " ", "In"}], " ", "each", " ", "case"}], 
          ",", " ", 
          RowBox[{
          "try", " ", "and", " ", "tag", " ", "on", " ", "another", " ", 
           "edge", " ", "that", " ", "makes", " ", 
           RowBox[{"sense", ".", " ", "If"}], " ", "there", " ", "are", " ", 
           "none", " ", "that", " ", "make", " ", "sense"}], ",", " ", 
          RowBox[{"this", " ", "chain", " ", "of", " ", "edges", " ", 
           RowBox[{"wasn", "'"}], "t", " ", "a", " ", "viable", " ", "option",
            " ", "for", " ", "edge", " ", "orderings"}], ",", " ", 
          RowBox[{
          "and", " ", "this", " ", "thread", " ", "will", " ", "get", " ", 
           "killed", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
              "because", " ", "the", " ", "MapThread", " ", "function", " ", 
               "will", " ", "take", " ", "an", " ", "empty", " ", "list"}], 
              ",", " ", 
              RowBox[{
              "and", " ", "it", " ", "will", " ", "Map", " ", "a", " ", 
               "Join", " ", "function", " ", "on", " ", "each", " ", 
               "element", " ", "of", " ", "the", " ", "empty", " ", "list"}], 
              ",", " ", 
              RowBox[{"which", " ", "returns", " ", "an", " ", "empty", " ", 
               RowBox[{"list", ".", " ", "\"\<Sequence\>\""}], " ", "then", 
               " ", "destroys", " ", "it"}]}], ")"}], "."}]}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"orderings", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Sequence", "@@", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"input1", ",", "input2"}], "}"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"input1", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "input2"}], 
                  "]"}]}], "]"}], "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"orderings", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Complement", "[", 
                    RowBox[{"edges", ",", "#"}], "]"}], ",", 
                   RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}]}], 
                  "]"}], "&"}], ",", "orderings"}], "]"}]}], "}"}]}], "]"}]}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"orderings", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"RotateLeft", ",", "orderings"}], "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"orderings", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"RotateLeft", "[", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"#", ",", "currentedge"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
         "orderings"}], "]"}]}], ";", "\[IndentingNewLine]", "orderings"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bft1TestEdgeOrderings", "[", 
    RowBox[{"{", 
     RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "kasteleyn", ",", "transposekast", ",", "nonzerorows", ",", 
       "nonzerocolumns"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"transposekast", "=", 
       RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nonzerorows", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"kasteleyn", ",", 
         RowBox[{"{", 
          RowBox[{"___", ",", 
           RowBox[{"Except", "[", "0", "]"}], ",", "___"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"nonzerocolumns", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"transposekast", ",", 
         RowBox[{"{", 
          RowBox[{"___", ",", 
           RowBox[{"Except", "[", "0", "]"}], ",", "___"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "\[Equal]", 
                RowBox[{"ConstantArray", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Variables", "[", "#2", "]"}], "]"}], ",", 
                  RowBox[{"Length", "[", "#1", "]"}]}], "]"}]}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"Length", ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "nonzerorows"}], "]"}]}], "]"}],
                   ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}], ",", "nonzerorows"}], 
               "}"}]}], "]"}]}], ")"}], "\[Equal]", "False"}], "||", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "\[Equal]", 
                RowBox[{"ConstantArray", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Variables", "[", "#2", "]"}], "]"}], ",", 
                  RowBox[{"Length", "[", "#1", "]"}]}], "]"}]}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"Length", ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "nonzerocolumns"}], "]"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}], ",", "nonzerocolumns"}], 
               "}"}]}], "]"}]}], ")"}], "\[Equal]", "False"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with edgeOrderings! It returns a list \
which doesn't have the right length\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "iii"], 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], 
                 "\[Equal]", "0"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"kasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "a", "]"}], "]"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}], ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], "\[Equal]", 
          "False"}], "||", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "iii"], 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], 
                 "\[Equal]", "0"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"transposekast", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "c"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}], ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], "\[Equal]", 
          "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with edgeOrderings! The index structure \
in the lists doesn't make sense\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bft1TestEdgeOrderings", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{"bft1TestEdgeOrderings", "&"}], ",", "allbft1kasteleyns"}], "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{"bft1TestEdgeOrderings", "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.684648345849888*^9, {3.684653359136537*^9, 
   3.68465341815114*^9}, {3.6846535243957367`*^9, 3.684653546732436*^9}, 
   3.684653591388288*^9, 3.684653644075118*^9, {3.6846537026572824`*^9, 
   3.684653774732584*^9}, {3.6846538803864202`*^9, 3.684653888625921*^9}, {
   3.6846539239122686`*^9, 3.684653979274121*^9}, {3.684654013367979*^9, 
   3.684654213546036*^9}, {3.6846542445896654`*^9, 3.684654244902182*^9}, {
   3.6846543533374057`*^9, 3.68465436969821*^9}, {3.684654422967018*^9, 
   3.6846544555183764`*^9}, {3.684654485808992*^9, 3.684654495557716*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580556844263`*^9, 3.680958055700055*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "zigZagNumeratorsDenominators"}], 
   ",", " ", "zigZags", ",", " ", "selfIntersectingZigZagsQ", ",", " ", 
   "badDoubleCrossingZigZagPairs", ",", " ", "badDoubleCrossingZigZagQ", ",", 
   " ", 
   RowBox[{
    RowBox[{"zigZagsAsPerfectMatchings", ".", " ", "MAKE"}], " ", "SURE", " ",
     "threadJointheLists", " ", "IS", " ", "UP", " ", "TO", " ", "DATE", " ", 
    "IN", " ", "THIS", " ", 
    RowBox[{"CELL", "!"}]}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253158931*^9, 
   3.6846545539616823`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{
                    "--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "threadJointheLists", " ", "IS", " ", "TAKEN", " ", "FROM", " ", 
     "badDoubleCrossingZigZagPairs"}], ",", " ", 
    RowBox[{
    "AND", " ", "WE", " ", "NEED", " ", "TO", " ", "MAKE", " ", "SURE", " ", 
     RowBox[{"IT", "'"}], "S", " ", "EXACTLY", " ", "THE", " ", "SAME", " ", 
     "BEFORE", " ", "EVALUATING", " ", "THIS", " ", 
     RowBox[{
      RowBox[{"CELL", "!!"}], "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{
                    "--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"threadJointheLists", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"numerator", ",", "denominator"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"list1", ",", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "numerator", "]"}], "\[GreaterEqual]", 
             RowBox[{"Length", "[", "denominator", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list1", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{"numerator", ",", "numerator"}], "}"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"list2", "=", "denominator"}], ";"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{
             RowBox[{"list1", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{"denominator", ",", "denominator"}], "}"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"list2", "=", "numerator"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Interweave", " ", "the", " ", "two", " ", "lists"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"list1", "[", 
            RowBox[{"[", 
             RowBox[{"Range", "[", 
              RowBox[{"2", ",", 
               RowBox[{"2", 
                RowBox[{"Length", "[", "list2", "]"}]}], ",", "2"}], "]"}], 
             "]"}], "]"}], "=", "list2"}], ";", "\[IndentingNewLine]", 
          RowBox[{"list1", "=", 
           RowBox[{"PadRight", "[", 
            RowBox[{"list1", ",", 
             RowBox[{
              RowBox[{"Length", "[", "numerator", "]"}], "+", 
              RowBox[{"Length", "[", "denominator", "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
            "If", " ", "the", " ", "numerator", " ", "and", " ", "the", " ", 
             "denominator", " ", "had", " ", "the", " ", "same", " ", 
             "numnber", " ", "of", " ", "edges"}], ",", " ", 
            RowBox[{"we", " ", 
             RowBox[{"don", "'"}], "t", " ", "know", " ", "which", " ", 
             "edge", " ", "should", " ", "come", " ", "first"}], ",", " ", 
            RowBox[{"so", " ", 
             RowBox[{"we", "'"}], "ll", " ", "need", " ", "to", " ", "check", 
             " ", "that", " ", "the", " ", "index", " ", "structure", " ", 
             "is", " ", "all", " ", "correct"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "numerator", "]"}], "\[Equal]", 
             RowBox[{"Length", "[", "denominator", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"And", "@@", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Equal", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], "&"}], ",", "list1"}], "]"}],
                     "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", "2"}], "]"}]}], "]"}]}],
                  ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"The", " ", "index", " ", "structure", " ", 
                  RowBox[{"wasn", "'"}], "t", " ", "correct"}], ",", " ", 
                 RowBox[{
                 "and", " ", "we", " ", "should", " ", "have", " ", "started",
                   " ", "with", " ", "the", " ", "first", " ", "edge", " ", 
                  "in", " ", "the", " ", "denominator"}]}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Print", "[", "\"\<had to do it the opposite way!\>\"", 
                  "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"list1", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Transpose", "[", 
                   RowBox[{"{", 
                    RowBox[{"numerator", ",", "numerator"}], "}"}], "]"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"list2", "=", "denominator"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"list1", "[", 
                  RowBox[{"[", 
                   RowBox[{"Range", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"2", 
                    RowBox[{"Length", "[", "list2", "]"}]}], ",", "2"}], 
                    "]"}], "]"}], "]"}], "=", "list2"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"list1", "=", 
                 RowBox[{"PadRight", "[", 
                  RowBox[{"list1", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "numerator", "]"}], "+", 
                    RowBox[{"Length", "[", "list2", "]"}]}]}], "]"}]}], 
                ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"And", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Equal", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Partition", "[", 
                  RowBox[{
                   RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], "&"}], ",", "list1"}], "]"}],
                     "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", "2"}], "]"}]}], "]"}]}],
               ")"}], "\[Equal]", "False"}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<We somehow still messed up!\>\"", "]"}], 
             ";"}]}], "]"}], ";", "\[IndentingNewLine]", "list1"}]}], "]"}]}],
       "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"independentCyclicEdgeOrderings", "[", 
      RowBox[{"edges_", ",", "currentedge_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "listSubtraction", ",", "orderings", ",", "remainingedges", ",", "ii",
          ",", "removedduplicates"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "Make", " ", "a", " ", "function", " ", "that", " ", "takes", " ", 
         "a", " ", "list", " ", "and", " ", "subtracts", " ", "away", " ", 
         "the", " ", "elements", " ", "from", " ", "a", " ", "second", " ", 
         "list"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"listSubtraction", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"listtoremovefrom", ",", "listofremoveditems"}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"newlist", ",", "newremovelist", ",", "jj"}], "}"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"newlist", "=", "listtoremovefrom"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newremovelist", "=", "listofremoveditems"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"For", "[", 
               RowBox[{
                RowBox[{"jj", "=", "1"}], ",", 
                RowBox[{"jj", "\[LessEqual]", 
                 RowBox[{"Length", "[", "listofremoveditems", "]"}]}], ",", 
                RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"newlist", "=", 
                  RowBox[{"Delete", "[", 
                   RowBox[{"newlist", ",", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"newlist", ",", 
                    RowBox[{"newremovelist", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"newremovelist", "=", 
                  RowBox[{"Delete", "[", 
                   RowBox[{"newremovelist", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "newlist"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Start", " ", "with", " ", "our", " ", "current", " ", 
          RowBox[{"edge", "."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"orderings", "=", 
         RowBox[{"{", 
          RowBox[{"{", "currentedge", "}"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"In", " ", "each", " ", "ordering"}], ",", " ", 
          RowBox[{
          "we", " ", "have", " ", "used", " ", "up", " ", "a", " ", "certain",
            " ", "set", " ", "of", " ", "edges"}], ",", " ", 
          RowBox[{"so", " ", 
           RowBox[{"we", "'"}], "ll", " ", "also", " ", "keep", " ", "track", 
           " ", "of", " ", "which", " ", "edges", " ", "remain", " ", 
           "available", " ", "to", " ", "us"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"remainingedges", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"listSubtraction", "[", 
             RowBox[{"edges", ",", "#"}], "]"}], "&"}], ",", "orderings"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "The", " ", "next", " ", "edge", " ", "should", " ", "have", " ", 
           "the", " ", "structure", " ", 
           RowBox[{
            RowBox[{"_", "[", 
             RowBox[{
              RowBox[{"currentedge", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}], ".", " ", 
            "There"}], " ", "may", " ", "however", " ", "be", " ", "multiple",
            " ", "alternatives", " ", "of", " ", "this", " ", "type"}], ",", 
          " ", 
          RowBox[{
          "and", " ", "not", " ", "all", " ", "of", " ", "them", " ", "are", 
           " ", "viable", " ", "edge", " ", "orderings", " ", "that", " ", 
           "all", " ", "match", " ", 
           RowBox[{"up", ".", " ", "For"}], " ", "for", " ", "each", " ", 
           "alternative"}], ",", " ", 
          RowBox[{
          "try", " ", "it", " ", "out", " ", "by", " ", "adding", " ", "this",
            " ", "alternative", " ", "onto", " ", 
           RowBox[{
            RowBox[{"{", "currentedge", "}"}], ".", " ", "Ultimately"}], " ", 
           "we", " ", "only", " ", "want", " ", "to", " ", "keep", " ", 
           "those", " ", "alternatives", " ", "that", " ", "match", " ", 
           RowBox[{"up", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"ii", "=", "1"}], ",", 
          RowBox[{"ii", "<", 
           RowBox[{"Length", "[", "edges", "]"}]}], ",", 
          RowBox[{"ii", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"orderings", "=", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sequence", "@@", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"input1", ",", "input2"}], "}"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"input1", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "input2"}], 
                    "]"}]}], "]"}], "[", 
                 RowBox[{"#1", ",", 
                  RowBox[{"Cases", "[", 
                   RowBox[{"#2", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#1", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}]}], 
                   "]"}]}], "]"}]}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{"orderings", ",", "remainingedges"}], "}"}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"remainingedges", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"listSubtraction", "[", 
                RowBox[{"edges", ",", "#"}], "]"}], "&"}], ",", "orderings"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"removedduplicates", "=", 
            RowBox[{
             RowBox[{"GatherBy", "[", 
              RowBox[{
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"orderings", ",", "remainingedges"}], "}"}]}], 
                "]"}], ",", 
               RowBox[{
                RowBox[{"Product", "[", 
                 RowBox[{
                  SuperscriptBox[
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], 
                   RowBox[{
                    RowBox[{"2", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"iii", ",", "2"}], "]"}]}], "-", "1"}]], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
                "&"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"orderings", "=", 
            RowBox[{"removedduplicates", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"remainingedges", "=", 
            RowBox[{"removedduplicates", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "orderings"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"bft1TestZigZags", "[", 
      RowBox[{"{", 
       RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "zigzagnumdenom", ",", "zigzags", ",", "try1", ",", "zigzagstoflip", 
         ",", "try2", ",", "allzigs", ",", "useless", ",", "zigzagaspm", ",", 
         "numpmsperpair", ",", "yieldedzigzags"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"zigzagnumdenom", "=", 
         RowBox[{"zigZagNumeratorsDenominators", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"zigzags", "=", 
         RowBox[{"zigZags", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"Power", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", 
                  RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}], ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Times", "@@", "#"}], "&"}], ",", "zigzagnumdenom", 
               ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "=!=", "zigzags"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem! The zig-zags from \
zigZagNumeratorsDenominators and zigZags don't match each other!\>\""}], 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"try1", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Product", "[", 
             RowBox[{
              SuperscriptBox[
               RowBox[{"#", "[", 
                RowBox[{"[", "iii", "]"}], "]"}], 
               RowBox[{
                RowBox[{"2", 
                 RowBox[{"Mod", "[", 
                  RowBox[{"iii", ",", "2"}], "]"}]}], "-", "1"}]], ",", 
              RowBox[{"{", 
               RowBox[{"iii", ",", 
                RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], "&"}], 
           ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"independentCyclicEdgeOrderings", "[", 
               RowBox[{
                RowBox[{"Join", "@@", "#"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
             "zigzagnumdenom"}], "]"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"zigzagstoflip", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{"try1", ",", "zigzags"}], "}"}]}], "]"}], ",", 
            "False"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"try2", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Product", "[", 
             RowBox[{
              SuperscriptBox[
               RowBox[{"#", "[", 
                RowBox[{"[", "iii", "]"}], "]"}], 
               RowBox[{
                RowBox[{"2", 
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"iii", "+", "1"}], ",", "2"}], "]"}]}], "-", 
                "1"}]], ",", 
              RowBox[{"{", 
               RowBox[{"iii", ",", 
                RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], "&"}], 
           ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"independentCyclicEdgeOrderings", "[", 
               RowBox[{
                RowBox[{"Join", "@@", "#"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
             RowBox[{"zigzagnumdenom", "[", 
              RowBox[{"[", "zigzagstoflip", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"try2", ",", 
                 RowBox[{"zigzags", "[", 
                  RowBox[{"[", "zigzagstoflip", "]"}], "]"}]}], "}"}]}], 
              "]"}]}], ")"}], "\[Equal]", "False"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagNumeratorsDenominators! The \
index structure of the zig-zags is not consistent\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{"Join", "@@", 
               RowBox[{"zigzagnumdenom", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], "===", 
             RowBox[{"Sort", "[", 
              RowBox[{"Join", "@@", 
               RowBox[{"zigzagnumdenom", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "]"}], "===", 
             RowBox[{"Variables", "[", 
              RowBox[{"joinupKasteleyn", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
            ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagNumeratorsDenominators! \
Some edges are missing from the numerator or the denominator\>\""}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Times", "@@", "zigzags"}], ")"}], "=!=", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<kast=\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
            "\"\< : There's a problem with zigZags! The product of all \
zig-zags does not equal one\>\""}], "]"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"selfIntersectingZigZagsQ", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Intersection", "@@", "#"}], "]"}], "&"}], ",", 
               "zigzagnumdenom"}], "]"}], ",", 
             RowBox[{"zz_", "/;", 
              RowBox[{"zz", ">", "0"}]}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with selfIntersectingZigZagsQ! It \
claims that there are self-intersecting zig-zags even though no zig-zags run \
over the same edge twice (in opposite directions)\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", "input", "}"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "&"}], ",", "input"}], 
                    "]"}]}], "]"}], ">", "0"}]}], "]"}], "[", "#", "]"}], 
                "&"}], ",", 
               RowBox[{"badDoubleCrossingZigZagPairs", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}]}],
             ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with badDoubleCrossingZigZagPairs! It \
returns a pair of zig-zags that do not have a bad double crossing\>\""}], 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allzigs", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"threadJointheLists", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
           "zigzagnumdenom"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"And", "@@", "#"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[Equal]", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Partition", "[", 
                    RowBox[{"#", ",", "2", ",", "1"}], "]"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"threadJointheLists", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    "zigzagnumdenom"}], "]"}]}], "]"}], ",", 
                 RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ")"}], 
           "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with threadJointheLists! It's making \
zig-zags with a bad cyclic index structure!\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"allzigs", "=", 
         RowBox[{"allzigs", "/.", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", 
              RowBox[{"Join", "[", 
               RowBox[{"#", ",", "#"}], "]"}]}], "&"}], ",", 
            RowBox[{"Cases", "[", 
             RowBox[{"allzigs", ",", 
              RowBox[{"zz_", "/;", 
               RowBox[{
                RowBox[{"Intersection", "[", 
                 RowBox[{"zz", ",", 
                  RowBox[{"Variables", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "===", 
                RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Subsets", "[", 
              RowBox[{"allzigs", ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], ",", 
             RowBox[{"zz_", "/;", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Intersection", "[", 
                 RowBox[{
                  RowBox[{"Subsets", "[", 
                   RowBox[{
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                  RowBox[{"Subsets", "[", 
                   RowBox[{
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], ">", 
               "0"}]}]}], "]"}], "=!=", 
           RowBox[{"badDoubleCrossingZigZagPairs", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with badDoubleCrossingZigZagPairs! It \
doesn't find all possible bad-double-crossing pairs\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"badDoubleCrossingZigZagPairs", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ">", 
           "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"badDoubleCrossingZigZagQ", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "\[Equal]",
               "False"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with badDoubleCrossingZigZagQ! We \
have double-crossing pairs from badDoubleCrossingZigZagPairs, though \
badDoubleCrossingZigZagQ returns False\>\""}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"badDoubleCrossingZigZagQ", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with badDoubleCrossingZigZagQ! We \
do not have double-crossing pairs from badDoubleCrossingZigZagPairs, though \
badDoubleCrossingZigZagQ returns True\>\""}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"zigzagaspm", "=", 
         RowBox[{"zigZagsAsPerfectMatchings", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numpmsperpair", "=", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Map", "[", 
            RowBox[{"Length", ",", "zigzagaspm", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"numpmsperpair", "=!=", 
            RowBox[{"{", "2", "}"}]}], "&&", 
           RowBox[{"numpmsperpair", "=!=", 
            RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagsAsPerfectMatchings! It \
should return two perfect matchings for each zig-zag, but here it doesn't \
always do this\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"yieldedzigzags", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"DeleteDuplicates", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "/", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", "zigzagaspm", 
             ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "\[Equal]", "1"}], "||", 
                  RowBox[{"#", "\[Equal]", "0"}]}], ")"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{"Length", ",", "yieldedzigzags"}], "]"}]}], "]"}]}], 
            ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagsAsPerfectMatchings! The \
prefect matchings, when taken their ratio, do not always give the same \
expression for the zig-zag\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "===", "#2"}], "||", 
                 RowBox[{"#1", "===", 
                  RowBox[{"{", "}"}]}]}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"yieldedzigzags", ",", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", "zigzags", "}"}], "]"}]}], "}"}]}], "]"}]}], 
            ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagsAsPerfectMatchings! The \
prefect matchings, when taken their ratio, do not equal the expression for \
the zig-zag\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DistributeDefinitions", "[", "bft1TestZigZags", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{"bft1TestZigZags", ",", "allbft1kasteleyns"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{"bft1TestZigZags", ",", 
      RowBox[{"Cases", "[", 
       RowBox[{"annoyingsmallexamples", ",", 
        RowBox[{"zz_", "/;", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
          RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483432782288`*^9, {3.684654633672823*^9, 
   3.684654672925157*^9}, {3.684655157103376*^9, 3.6846551704875364`*^9}, {
   3.6846552228968625`*^9, 3.68465523897254*^9}, {3.6846580020771008`*^9, 
   3.6846580069642897`*^9}, {3.684658374492115*^9, 3.6846583892233295`*^9}, {
   3.684658433155861*^9, 3.6846584745248547`*^9}, {3.684658542837716*^9, 
   3.6846585432369785`*^9}, {3.684658594790456*^9, 3.6846586955828676`*^9}, {
   3.6846587549148717`*^9, 3.684658804862692*^9}, {3.684658912706405*^9, 
   3.6846589821353827`*^9}, {3.68465911877691*^9, 3.684659144223372*^9}, {
   3.684659174674801*^9, 3.684659244684067*^9}, {3.684659276722431*^9, 
   3.684659287713646*^9}, {3.6846596370655484`*^9, 3.6846596457096324`*^9}, {
   3.6846597050609016`*^9, 3.684659731023937*^9}, {3.684659774465824*^9, 
   3.6846598435294776`*^9}, {3.68466159444948*^9, 3.684661616097929*^9}, {
   3.684661663939406*^9, 3.684661721868502*^9}, {3.6846622020801086`*^9, 
   3.68466223410397*^9}, {3.6846624572909994`*^9, 3.6846624587221894`*^9}, {
   3.6846625114316893`*^9, 3.6846625148561735`*^9}, {3.6846625620622435`*^9, 
   3.6846626116371765`*^9}, {3.684662647348699*^9, 3.6846627440222816`*^9}, {
   3.6846627789205823`*^9, 3.6846628060922585`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580560906982`*^9, 3.6809580561376004`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "loopVariablesBasis"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6846630298783827`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bftTestLoopVariablesBasis", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "pmatrix", ",", "traditionalmodulispace", ",", "basis", 
       ",", "indepinternalfaces", ",", "pmatdim", ",", "modulispacedim"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"perfs", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pmatrix", "=", 
          RowBox[{"matchingPolytope", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pmatdim", "=", 
          RowBox[{"dimensionPolytope", "[", "pmatrix", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"traditionalmodulispace", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"modulispacedim", "=", 
          RowBox[{"dimensionPolytope", "[", "traditionalmodulispace", "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"basis", "=", 
          RowBox[{"loopVariablesBasis", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Flatten", "[", "basis", "]"}], "]"}], "=!=", 
               "pmatdim"}], "&&", 
              RowBox[{
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{
                 RowBox[{"moduliLoopVariablesBFT", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                  "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", "pmatdim"}]}], 
             ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"basis", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               "modulispacedim"}], "&&", 
              RowBox[{
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{
                 RowBox[{"moduliLoopVariablesBFT", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                  "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               "modulispacedim"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the loop variable basis! \
loopVariablesBasis doesn't give the right number of basis variables for \
gauging 2!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"traditionalmodulispace", "=", 
             RowBox[{"moduliSpaceBFT", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
               "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"basis", "=", 
             RowBox[{"loopVariablesBasis", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"indepinternalfaces", "=", 
             RowBox[{"getNumberInternalFaces", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getNumberExternalFaces", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
               "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"indepinternalfaces", "=", 
                RowBox[{"indepinternalfaces", "-", "1"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"modulispacedim", "=", 
             RowBox[{
             "dimensionPolytope", "[", "traditionalmodulispace", "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Flatten", "[", "basis", "]"}], "]"}], "=!=", 
                  "pmatdim"}], "&&", 
                 RowBox[{
                  RowBox[{"dimensionPolytope", "[", 
                   RowBox[{
                    RowBox[{"moduliLoopVariablesBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], 
                    "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", 
                  "pmatdim"}]}], ")"}], "||", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"basis", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", 
                "indepinternalfaces"}], "||", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"basis", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
                  "modulispacedim"}], "&&", 
                 RowBox[{
                  RowBox[{"dimensionPolytope", "[", 
                   RowBox[{
                    RowBox[{"moduliLoopVariablesBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
                  "modulispacedim"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the loop variable basis! \
loopVariablesBasis doesn't give the right number of basis variables for \
gauging 1!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bftTestLoopVariablesBasis", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestLoopVariablesBasis", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestLoopVariablesBasis", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestLoopVariablesBasis", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6846630427550173`*^9, 
   3.684663050037406*^9}, {3.684663089793779*^9, 3.684663261116503*^9}, {
   3.6846641768723793`*^9, 3.6846642154105864`*^9}, {3.684664266264132*^9, 
   3.684664335176717*^9}, {3.684664477164043*^9, 3.6846645134847364`*^9}, {
   3.684664552817524*^9, 3.6846645736040554`*^9}, {3.684664684162232*^9, 
   3.6846647112075806`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958056496975*^9, 3.680958056512599*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "moduliLoopVariablesBFT"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.684665345384*^9, 3.684665345774664*^9}, 3.6847526289869757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
       "loopvarbasis", ",", "traditionalmodulispace", ",", "loopperfs", ",", 
       "realperfs", ",", "pmatrix", ",", "toremove"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"perfs", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
            "loopvarbasis"}], "}"}], "=", 
          RowBox[{"moduliLoopVariablesBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"loopvarmodulispace", "=", 
          RowBox[{"loopvarmodulispace", "-", 
           RowBox[{"loopvarmodulispace", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"traditionalmodulispace", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"traditionalmodulispace", "=", 
          RowBox[{"traditionalmodulispace", "-", 
           RowBox[{"traditionalmodulispace", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"loopvarbasis", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"loopperfs", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Times", "@@", 
                 RowBox[{"Power", "[", 
                  RowBox[{"loopvarbasis", ",", "#"}], "]"}]}], "&"}], ",", 
               RowBox[{"Transpose", "[", "loopvarmasterspace", "]"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"realperfs", "=", "perfs"}], ";", "\[IndentingNewLine]", 
            RowBox[{"realperfs", "=", 
             RowBox[{"realperfs", "/", 
              RowBox[{"realperfs", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{"loopperfs", ",", "1"}], "]"}], ",", 
                   RowBox[{"{", "_", "}"}]}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"loopperfs", "=!=", "realperfs"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with moduliLoopVariablesBFT! The \
loop variable basis, when matched with the master space, doesn't give the \
correct (ratios of) perfect matchings!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"toremove", "=", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"Dimensions", "[", "loopvarmasterspace", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"loopvarmasterspace", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"RowReduce", "[", 
             RowBox[{"loopvarmasterspace", "-", 
              RowBox[{"loopvarmasterspace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
            "toremove"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"pmatrix", "=", 
          RowBox[{"matchingPolytope", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"toremove", "=", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"Dimensions", "[", "pmatrix", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pmatrix", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"RowReduce", "[", 
             RowBox[{"pmatrix", "-", 
              RowBox[{"pmatrix", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
            "toremove"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"pmatrix", "=!=", "loopvarmasterspace"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              
              "\"\< : There's a problem with moduliLoopVariablesBFT! The \
resulting master space is different from the one given by the P \
matrix!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"RowReduce", "[", "traditionalmodulispace", "]"}], ",", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"0", ",", 
                RowBox[{
                 RowBox[{"Dimensions", "[", "traditionalmodulispace", "]"}], 
                 "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "=!=", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"RowReduce", "[", "loopvarmodulispace", "]"}], ",", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"0", ",", 
                RowBox[{
                 RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli spaces! \
moduliSpaceBFT and moduliLoopVariablesBFT give different results under \
gauging 2!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
               "loopvarbasis"}], "}"}], "=", 
             RowBox[{"moduliLoopVariablesBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"loopvarmodulispace", "=", 
             RowBox[{"loopvarmodulispace", "-", 
              RowBox[{"loopvarmodulispace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"traditionalmodulispace", "=", 
             RowBox[{"moduliSpaceBFT", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
               "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"traditionalmodulispace", "=", 
             RowBox[{"traditionalmodulispace", "-", 
              RowBox[{"traditionalmodulispace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"RowReduce", "[", "traditionalmodulispace", "]"}], 
                 ",", 
                 RowBox[{"ConstantArray", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{
                    RowBox[{
                    "Dimensions", "[", "traditionalmodulispace", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "=!=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"RowReduce", "[", "loopvarmodulispace", "]"}], ",", 
                 RowBox[{"ConstantArray", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli spaces! \
moduliSpaceBFT and moduliLoopVariablesBFT give different results under \
gauging 1!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
            "loopvarbasis"}], "}"}], "=", 
          RowBox[{"moduliLoopVariablesBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Dimensions", "[", "loopvarmasterspace", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}], "||", 
            RowBox[{
             RowBox[{
              RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli spaces under gauging \
2! moduliLoopVariablesBFT should have 0 columns when there are no perfect \
matchings\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
               "loopvarbasis"}], "}"}], "=", 
             RowBox[{"moduliLoopVariablesBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Dimensions", "[", "loopvarmasterspace", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}], "||", 
               RowBox[{
                RowBox[{
                 RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli spaces under \
gauging 1! moduliLoopVariablesBFT should have 0 columns when there are no \
perfect matchings\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "bftTestModuliLoopVariablesBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.684752635295762*^9, 
   3.684752646788473*^9}, {3.684752690206507*^9, 3.6847527554263043`*^9}, {
   3.684752785913771*^9, 3.6847528046608377`*^9}, {3.6847528369363184`*^9, 
   3.6847528624766173`*^9}, {3.684752980222526*^9, 3.684753021548809*^9}, {
   3.6847548762967157`*^9, 3.6847548916389437`*^9}, {3.684755256100696*^9, 
   3.6847553082260094`*^9}, {3.6847553623283606`*^9, 
   3.6847554336010294`*^9}, {3.6847556335428853`*^9, 
   3.6847556691079006`*^9}, {3.684755769259431*^9, 3.684755819885806*^9}, {
   3.684755912076268*^9, 3.6847560161296897`*^9}, {3.6847586069820337`*^9, 
   3.684758671759245*^9}, {3.6847587549931345`*^9, 3.6847587567478228`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6846488430023017`*^9, 3.684648843073349*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "planarityQ"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6847587331924*^9, {3.684760430800808*^9, 3.684760462916053*^9}, {
   3.684763860056888*^9, 3.6847638611692953`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "is", " ", "code", " ", "from", " ", "stackexchange", " ", 
    "for", " ", "counting", " ", "the", " ", "number", " ", "of", " ", 
    "faces"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
      "===", "===", "===", "==="}], "=", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "==="}], "=", 
     RowBox[{"===", "===", "===", "===", "===", "===", "===", "=="}]}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"simple", " ", 
    RowBox[{"Kruskal", "'"}], "s", " ", "algorithm", " ", "without", " ", 
    "sorting"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"SpanningTree", "[", "graph_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"label", ",", 
         RowBox[{"edges", "=", 
          RowBox[{"EdgeList", "[", "graph", "]"}]}]}], "}"}], ",", 
       RowBox[{"Pick", "[", 
        RowBox[{"edges", ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"UnsameQ", "[", 
                RowBox[{"#1", ",", "#2"}], "]"}], ",", 
               RowBox[{
                RowBox[{"#2", "=", "#1"}], ";", "True"}], ",", "False"}], 
              "]"}], "&"}], "@@", 
            RowBox[{"Sort", "[", 
             RowBox[{"label", "/@", "edge"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"edge", ",", "edges"}], "}"}]}], "]"}]}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"makeEges", "[", "list_", "]"}], ":=", 
    RowBox[{"Sort", "/@", 
     RowBox[{"UndirectedEdge", "@@@", 
      RowBox[{"Partition", "[", 
       RowBox[{"list", ",", "2", ",", "1"}], "]"}]}]}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{"FindFace", ":", 
     RowBox[{
      RowBox[{"finds", " ", "the", " ", "smallest", " ", 
       RowBox[{"cycle", ".", "This"}], " ", "cycle", " ", "is", " ", "a", " ",
        "pseudo"}], "-", 
      RowBox[{"face", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FindFace", "[", 
     RowBox[{"graph_", ",", "edges_"}], "]"}], ":=", 
    RowBox[{"MapAt", "[", 
     RowBox[{"makeEges", ",", 
      RowBox[{"First", "@", 
       RowBox[{"SortBy", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"FindShortestPath", "[", 
               RowBox[{"graph", ",", 
                RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}], "/@", 
             "edges"}], ",", "edges"}], "}"}], "]"}], ",", 
         RowBox[{"Composition", "[", 
          RowBox[{"Length", ",", "First"}], "]"}]}], "]"}]}], ",", "1"}], 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Append", " ", "analyzed", " ", "edge", " ", "to", " ", "a", " ", 
     "graph"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"appendEge", "[", 
     RowBox[{"graph_", ",", "edge_"}], "]"}], ":=", 
    RowBox[{"Graph", "@", 
     RowBox[{"Append", "[", 
      RowBox[{
       RowBox[{"EdgeList", "[", "graph", "]"}], ",", "edge"}], "]"}]}]}], 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"iteration", "[", 
      RowBox[{"graph_", ",", 
       RowBox[{"{", "}"}]}], "]"}], ":=", "$faces"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"iteration", "[", 
     RowBox[{"graph_", ",", "edges_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"iteration", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"$faces", ",", 
           RowBox[{"Flatten", "[", "#", "]"}]}], "]"}], ";", 
         RowBox[{"appendEge", "[", 
          RowBox[{"graph", ",", 
           RowBox[{"Last", "@", "#"}]}], "]"}]}], ",", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"edges", ",", 
          RowBox[{"Last", "@", "#"}]}], "]"}]}], "]"}], "&"}], "[", 
     RowBox[{"FindFace", "[", 
      RowBox[{"graph", ",", "edges"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Faces", ":", 
     RowBox[{
      RowBox[{"returns", " ", "all", " ", "pseudo"}], "-", 
      RowBox[{"faces", " ", "of", " ", "a", " ", "graph"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Faces", "[", "graph_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"$faces", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"tree", "=", 
         RowBox[{"SpanningTree", "[", "graph", "]"}]}]}], "}"}], ",", 
      RowBox[{"iteration", "[", 
       RowBox[{
        RowBox[{"Graph", "[", "tree", "]"}], ",", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"EdgeList", "[", "graph", "]"}], ",", "tree"}], "]"}]}], 
       "]"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
       "===", "===", "===", "==="}], "=", 
     RowBox[{
      RowBox[{
      "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
       "==="}], "=", 
      RowBox[{"===", "===", "===", "===", "===", "===", "===", "=="}]}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPlanarityQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa_", ",", "bb_", ",", "cc_", ",", "dd_"}], "}"}], ",", 
       "bftlabeling_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "planaritycollapsed", ",", 
         "graph", ",", "externalnodes", ",", "internalfaces", ",", 
         "internalfacenodes", ",", "externaledges", ",", 
         "whichfacescouldyoubein", ",", "howmanyfacescanyoubein", ",", 
         "numcommonfaces"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"planaritycollapsed", "=", 
         RowBox[{"planarityQ", "[", 
          RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}], "//.", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "firstmat_", ",", "secondmat_", ",", "thirdmat_", ",", 
             "fourthmat_"}], "}"}], "\[RuleDelayed]", 
           RowBox[{"simplifyGraph", "[", 
            RowBox[{"firstmat", ",", 
             RowBox[{"(", 
              RowBox[{"secondmat", "/.", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "secondmat"}], "]"}], ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", "zz", "]"}], ">", "1"}]}]}], 
                    "]"}]}], "]"}], "]"}]}], "]"}]}], ")"}], ",", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "thebottomleft", "}"}], ",", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", "output", "}"}], ",", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "thebottomleft", "]"}], ">", "0"}],
                     ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"thebottomleft", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", "thebottomleft", "]"}]}], "]"}],
                     ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", "zz", "]"}], ">", "1"}]}]}], 
                    "]"}]}], "]"}], "]"}]}], "]"}]}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", "thebottomleft"}], ";"}]}], "]"}], 
                   ";", "output"}]}], "]"}]}], "]"}], "[", "thirdmat", "]"}], 
             ",", "fourthmat"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"graph", "=", 
         RowBox[{"turnIntoGraph", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"PlanarGraphQ", "[", "graph", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"externalnodes", "=", 
            RowBox[{"getOrderingExternalNodesDefault", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"internalfaces", "=", 
            RowBox[{"Faces", "[", 
             RowBox[{"Graph", "[", 
              RowBox[{"graph", ",", 
               RowBox[{
               "GraphLayout", "\[Rule]", "\"\<PlanarEmbedding\>\""}]}], "]"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"internalfacenodes", "=", 
            RowBox[{"Map", "[", 
             RowBox[{"Union", ",", 
              RowBox[{"internalfaces", "/.", 
               RowBox[{"UndirectedEdge", "\[Rule]", "Sequence"}]}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"externaledges", "=", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"EdgeList", "[", "graph", "]"}], ",", 
              RowBox[{
               RowBox[{"UndirectedEdge", "[", 
                RowBox[{
                 RowBox[{"Alternatives", "@@", "externalnodes"}], ",", "_"}], 
                "]"}], "|", 
               RowBox[{"UndirectedEdge", "[", 
                RowBox[{"_", ",", 
                 RowBox[{"Alternatives", "@@", "externalnodes"}]}], "]"}]}]}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"whichfacescouldyoubein", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"DeleteDuplicates", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"#", "/.", 
                   RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ii", ",", "ii"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ii", ",", 
                    RowBox[{"Length", "[", "internalfaces", "]"}]}], "}"}]}], 
                    "]"}]}]}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "&"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"internalfacenodes", ",", 
                   RowBox[{"Alternatives", "@@", "#"}]}], "]"}], "&"}], ",", 
                "externaledges"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"howmanyfacescanyoubein", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"VertexDegree", "[", "graph", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"externaledges", "/.", 
                 RowBox[{
                  RowBox[{"UndirectedEdge", "[", 
                   RowBox[{"v1_Integer", ",", "v2_Integer"}], "]"}], 
                  "\[RuleDelayed]", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"v1", ",", "v2"}], "}"}], ",", 
                    RowBox[{"Alternatives", "@@", "externalnodes"}]}], 
                   "]"}]}]}], "]"}], "]"}], "]"}], "-", "1"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"whichfacescouldyoubein", "=", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"PadRight", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                 "whichfacescouldyoubein", ",", "howmanyfacescanyoubein"}], 
                 "}"}]}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"whichfacescouldyoubein", "\[Equal]", 
              RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"numcommonfaces", "=", "1"}], ";"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{
              RowBox[{"numcommonfaces", "=", 
               RowBox[{"Length", "[", 
                RowBox[{"Intersection", "@@", "whichfacescouldyoubein"}], 
                "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"planaritycollapsed", "===", "True"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"numcommonfaces", "\[Equal]", "0"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Print", "[", 
                  RowBox[{"\"\<kast=\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                   "\"\< : There's a problem with planarityQ! We are on genus \
zero on a graph declared planar, and yet we don't have that B=1.\>\""}], 
                  "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"numcommonfaces", "\[GreaterEqual]", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Print", "[", 
                  RowBox[{"\"\<kast=\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                   "\"\< : There's a problem with planarityQ! We are on genus \
zero on a graph declared nonplanar, and yet we have that B=1.\>\""}], "]"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"planaritycollapsed", "=!=", "False"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with planarityQ! When we don't \
collapse bivalent nodes, it gives that this example is planar even though it \
can't even be embedded on genus zero.\>\""}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DistributeDefinitions", "[", "allTestPlanarityQ", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestPlanarityQ", "[", 
        RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
     "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestPlanarityQ", "[", 
        RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
     "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestPlanarityQ", "[", 
        RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
      "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestPlanarityQ", "[", 
        RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
      RowBox[{"Cases", "[", 
       RowBox[{"annoyingsmallexamples", ",", 
        RowBox[{"zz_", "/;", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
          RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.684758740765997*^9, 
   3.6847587486757727`*^9}, 3.6847589668246293`*^9, {3.684759072087677*^9, 
   3.684759076976714*^9}, {3.6847598533847303`*^9, 3.684759862502415*^9}, {
   3.6847604105457573`*^9, 3.684760426176469*^9}, {3.6847615341998477`*^9, 
   3.684761647955044*^9}, {3.684761711202359*^9, 3.684761732113801*^9}, {
   3.68476195005608*^9, 3.684761964276211*^9}, {3.6847623007053823`*^9, 
   3.684762387136321*^9}, {3.684762500621395*^9, 3.6847625752463145`*^9}, {
   3.6847627958635535`*^9, 3.684762808272461*^9}, {3.684763201499195*^9, 
   3.6847632065296397`*^9}, {3.6847634031348734`*^9, 
   3.6847634159043713`*^9}, {3.684763477922958*^9, 3.6847634936633058`*^9}, {
   3.684763557871423*^9, 3.684763631819785*^9}, {3.6847636994284062`*^9, 
   3.684763764461209*^9}, {3.6847638102387953`*^9, 3.68476381304633*^9}, {
   3.684763914083949*^9, 3.6847639209600916`*^9}, 3.684817576662812*^9, {
   3.684817815492402*^9, 3.6848178201404157`*^9}, {3.6848178833076987`*^9, 
   3.6848178927697372`*^9}, {3.684818828295362*^9, 3.684818922808974*^9}, {
   3.6848222944585433`*^9, 3.684822453678132*^9}, {3.6848225487369156`*^9, 
   3.6848225780963264`*^9}, {3.684822626638132*^9, 3.6848226292762594`*^9}, {
   3.6848235564367766`*^9, 3.6848235710374928`*^9}, {3.684823691921395*^9, 
   3.684823754499069*^9}, {3.684823819041852*^9, 3.684823858392539*^9}, {
   3.684824998305909*^9, 3.684825003882391*^9}, {3.6848250434792066`*^9, 
   3.6848251432168674`*^9}, {3.6848254548005943`*^9, 3.684825460848869*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6847633005667562`*^9, 3.6847633259467363`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "getOrderingExternalEdgesDefault"}], 
   ",", " ", "getSourceEdges", ",", " ", "getSinkEdges", ",", " ", 
   "getExternalEdgeNodeNumbers"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684763960849737*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "sources", ",", "sourcetally", ",", "sinks", ",", 
       "sinktally", ",", "matroidtally", ",", "kasteleyn"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
           RowBox[{"getOrderingExternalEdgesDefault", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], "=!=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"DeleteCases", "[", 
             RowBox[{"c", ",", "0", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "mat", "}"}], ",", 
                 RowBox[{"Block", "[", 
                  RowBox[{
                   RowBox[{"{", "transposemat", "}"}], ",", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"mat", "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"transposemat", "=", 
                    RowBox[{"{", "}"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"transposemat", "=", 
                    RowBox[{"Transpose", "[", "mat", "]"}]}], ";"}]}], "]"}], 
                    ";", "transposemat"}]}], "]"}]}], "]"}], "[", "b", "]"}], 
              ",", "0", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getOrderingExternalEdgesDefault! It \
doesn't give the right edges in the right order\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sources", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceEdges", "[", 
           RowBox[{"b", ",", "c", ",", "#"}], "]"}], "&"}], ",", "perfs"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sourcetally", "=", 
       RowBox[{"Tally", "[", "sources", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sinks", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSinkEdges", "[", 
           RowBox[{"b", ",", "c", ",", "#"}], "]"}], "&"}], ",", "perfs"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sinktally", "=", 
       RowBox[{"Tally", "[", "sinks", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matroidtally", "=", 
       RowBox[{"Tally", "[", 
        RowBox[{"Transpose", "[", 
         RowBox[{"matroidPolytope", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sourcetally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", "sources"}], 
          "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSourceEdges! It doesn't \
correspond with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sinktally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", "sinks"}], 
          "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSinkEdges! It doesn't correspond \
with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"kasteleyn", ",", 
             RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"getExternalEdgeNodeNumbers", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
              RowBox[{"Variables", "[", 
               RowBox[{"Join", "[", 
                RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
          "]"}], "=!=", 
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"b", ",", "c"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getExternalEdgeNodeNumbers! It \
doesn't give the correct node numbers\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestSourceSinkEdgesOrdering", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6847639944818907`*^9, 
   3.6847640333081274`*^9}, {3.684764065055216*^9, 3.6847640674277997`*^9}, {
   3.684764600196615*^9, 3.6847646658909426`*^9}, {3.6847647178194*^9, 
   3.684764724408382*^9}, 3.6848263191632957`*^9, {3.6848263557611585`*^9, 
   3.6848264263658457`*^9}, {3.6848264619370103`*^9, 
   3.6848264656495256`*^9}, {3.6848266357703853`*^9, 3.6848266988693943`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6846488466756153`*^9, 3.684648846722494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "getOrderingExternalNodesDefault"}], 
   ",", " ", "getSourceNodes", ",", " ", "getSinkNodes"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684764704719036*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestSourceSinkNodesOrdering", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "sourcenodes", ",", "sourcetally", ",", "sinknodes", ",", 
       "sinktally", ",", "matroidtally"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getOrderingExternalNodesDefault", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "a", "]"}], "+", "1"}], ",", 
             RowBox[{"Length", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"a", ",", "c"}], "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", "1"}], 
             ",", 
             RowBox[{
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", 
              RowBox[{
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getOrderingExternalNodesDefault! It \
doesn't give the right nodes in the right order!\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sourcenodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sourcetally", "=", 
       RowBox[{"Tally", "[", "sourcenodes", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sinknodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSinkNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sinktally", "=", 
       RowBox[{"Tally", "[", "sinknodes", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matroidtally", "=", 
       RowBox[{"Tally", "[", 
        RowBox[{"Transpose", "[", 
         RowBox[{"matroidPolytope", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sourcetally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           "sourcenodes"}], "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSourceEdges! It doesn't \
correspond with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sinktally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           "sinknodes"}], "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSinkEdges! It doesn't correspond \
with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestSourceSinkNodesOrdering", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.684764725497431*^9, 
   3.6847648249711018`*^9}, 3.684826388203803*^9, 3.6848267779542274`*^9, {
   3.68482692446859*^9, 3.6848269512322865`*^9}, {3.68482708103259*^9, 
   3.6848270845503798`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Here", " ", "we", " ", "check", " ", "traditionalConnectivityMatrix"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6848296041687064`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"alternativeConnectivityMat", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", 
     RowBox[{"referencematching_:", "Null"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfmatchings", ",", "theperf", ",", "adjacencymat", ",", "kasteleyn", 
       ",", "perfpositions", ",", "jj", ",", "graph", ",", "cyclenodes", ",", 
       "turnIntoContributionNothingAdded", ",", "cycles", ",", "loopnodes", 
       ",", "extraloopnodes", ",", "toadd", ",", "loopcontributions", ",", 
       "turnIntoContribution", ",", "size", ",", "connectivitymat"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"referencematching", "===", "Null"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfmatchings", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfmatchings", "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theperf", "=", 
             RowBox[{"perfmatchings", "[", 
              RowBox[{"[", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"theperf", "=", "0"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"theperf", "=", "referencematching"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theperf", "=!=", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"adjacencymat", "=", 
          RowBox[{"UpperTriangularize", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"kasteleyn", "=", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perfpositions", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], 
               "}"}]}], "&"}], ",", 
            RowBox[{"Position", "[", 
             RowBox[{"kasteleyn", ",", 
              RowBox[{"Alternatives", "@@", 
               RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"adjacencymat", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"perfpositions", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"adjacencymat", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"Reverse", "[", 
                 RowBox[{"perfpositions", "[", 
                  RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"adjacencymat", "[", 
               RowBox[{"[", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"Reverse", "[", 
                  RowBox[{"perfpositions", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
              "-", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"graph", "=", 
          RowBox[{"DirectedGraph", "[", 
           RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"turnIntoContributionNothingAdded", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
                "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"bigmatrix", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Join", "[", 
                   RowBox[{"kasteleyn", ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"edges", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"bigmatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"pathnodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"edgedirections", "=", 
                RowBox[{
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Ordering", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"pathnodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"2", "\[Rule]", 
                   RowBox[{"-", "1"}]}], "}"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"giveContribution", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"edges", ",", "sign"}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Block", "[", 
                   RowBox[{
                    RowBox[{"{", "contribution", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"Times", "@@", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"giveContribution", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"edges", ",", "edgedirections"}], "}"}]}], 
                  "]"}]}]}], ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"cycles", "=", 
          RowBox[{
           RowBox[{"FindCycle", "[", 
            RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"loopnodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", 
               RowBox[{"Append", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
                 RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], 
             "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "2"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"toadd", "=", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Subsets", "[", 
                RowBox[{"loopnodes", ",", 
                 RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
               RowBox[{"zz_", "/;", 
                RowBox[{
                 RowBox[{"Join", "@@", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{"zz", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
                 RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"toadd", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"extraloopnodes", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopcontributions", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Power", "[", 
               RowBox[{
                RowBox[{"-", "1"}], ",", 
                RowBox[{
                 RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
              RowBox[{"(", 
               RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
             "turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cyclenodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Union", "@@", "#"}], "&"}], ",", "loopnodes"}], "]"}]}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"turnIntoContribution", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "totalcontrib", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"totalcontrib", "=", 
                RowBox[{
                "turnIntoContributionNothingAdded", "[", "pathnodes", "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"totalcontrib", "/", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"Total", "[", "loopcontributions", "]"}]}], 
                  ")"}]}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"totalcontrib", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"Total", "[", 
                    RowBox[{"loopcontributions", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "pathnodes"}], "]"}], "]"}], ">", "0"}],
                     "&"}], ",", "cyclenodes"}], "]"}], ",", "False"}], "]"}],
                     "]"}], "]"}], "]"}], "]"}]}], ")"}]}]}], ";", 
               "\[IndentingNewLine]", "totalcontrib"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"FindPath", "[", 
             RowBox[{
             "graph", ",", "iii", ",", "jjj", ",", "Infinity", ",", "All"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"iii", ",", 
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"jjj", ",", 
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], 
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"Join", ",", 
            RowBox[{"{", 
             RowBox[{"connectivitymat", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"DiagonalMatrix", "[", 
                  RowBox[{"Range", "[", 
                   RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}], 
                   "]"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"0", "\[Rule]", 
                   RowBox[{"{", "}"}]}], "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"zz_Integer", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"{", "zz", "}"}], "}"}]}], "}"}]}]}], "}"}], ",", 
            "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Total", ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"turnIntoContribution", "[", "#", "]"}], "&"}], ",", 
              "connectivitymat", ",", 
              RowBox[{"{", "3", "}"}]}], "]"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
        ",", 
        RowBox[{
         RowBox[{"size", "=", 
          RowBox[{"Total", "[", 
           RowBox[{"Dimensions", "[", 
            RowBox[{"joinupKasteleyn", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", 
             RowBox[{"{", 
              RowBox[{"iii", ",", "size"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"jjj", ",", "size"}], "}"}]}], "]"}], "+", 
           RowBox[{"IdentityMatrix", "[", "size", "]"}]}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "connectivitymat"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestTraditionalConnectivityMatrix", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "multiplic", ",", "equals", ",", "jj", ",", 
       "alternative", ",", "normal"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"equals", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"multiplic", "[", 
             RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"alternative", "=", 
             RowBox[{"alternativeConnectivityMat", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"normal", "=", 
             RowBox[{"traditionalConnectivityMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"equals", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"equals", ",", 
               RowBox[{
                RowBox[{"Simplify", "[", 
                 RowBox[{"alternative", "\[Equal]", "normal"}], "]"}], "===", 
                "True"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"And", "@@", "equals"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           
           "\"\< : There's a problem with traditionalConnectivityMatrix! It \
doesn't seem to be equal to the connectivity matrix obtained using the \
alternative method\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestTraditionalConnectivityMatrix", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestTraditionalConnectivityMatrix", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestTraditionalConnectivityMatrix", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestTraditionalConnectivityMatrix", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestTraditionalConnectivityMatrix", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848296283230743`*^9, 
   3.684829779613954*^9}, {3.684830092372987*^9, 3.684830094147309*^9}, {
   3.684830222465855*^9, 3.684830224235766*^9}, {3.6848339985634356`*^9, 
   3.6848340041537466`*^9}, 3.684834302875061*^9, {3.684834707885019*^9, 
   3.6848347106509047`*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "connectivityMatrix"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684830264914666*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"alternativeConnectivityMat", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", 
     RowBox[{"referencematching_:", "Null"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfmatchings", ",", "theperf", ",", "adjacencymat", ",", "kasteleyn", 
       ",", "perfpositions", ",", "jj", ",", "graph", ",", "cyclenodes", ",", 
       "turnIntoContributionNothingAdded", ",", "cycles", ",", "loopnodes", 
       ",", "extraloopnodes", ",", "toadd", ",", "loopcontributions", ",", 
       "turnIntoContribution", ",", "size", ",", "connectivitymat"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"referencematching", "===", "Null"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfmatchings", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfmatchings", "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theperf", "=", 
             RowBox[{"perfmatchings", "[", 
              RowBox[{"[", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"theperf", "=", "0"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"theperf", "=", "referencematching"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theperf", "=!=", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"adjacencymat", "=", 
          RowBox[{"UpperTriangularize", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"kasteleyn", "=", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perfpositions", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], 
               "}"}]}], "&"}], ",", 
            RowBox[{"Position", "[", 
             RowBox[{"kasteleyn", ",", 
              RowBox[{"Alternatives", "@@", 
               RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"adjacencymat", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"perfpositions", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"adjacencymat", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"Reverse", "[", 
                 RowBox[{"perfpositions", "[", 
                  RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"adjacencymat", "[", 
               RowBox[{"[", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"Reverse", "[", 
                  RowBox[{"perfpositions", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
              "-", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"graph", "=", 
          RowBox[{"DirectedGraph", "[", 
           RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"turnIntoContributionNothingAdded", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
                "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"bigmatrix", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Join", "[", 
                   RowBox[{"kasteleyn", ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"edges", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"bigmatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"pathnodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"edgedirections", "=", 
                RowBox[{
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Ordering", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"pathnodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"2", "\[Rule]", 
                   RowBox[{"-", "1"}]}], "}"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"giveContribution", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"edges", ",", "sign"}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Block", "[", 
                   RowBox[{
                    RowBox[{"{", "contribution", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"Times", "@@", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"giveContribution", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"edges", ",", "edgedirections"}], "}"}]}], 
                  "]"}]}]}], ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"cycles", "=", 
          RowBox[{
           RowBox[{"FindCycle", "[", 
            RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"loopnodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", 
               RowBox[{"Append", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
                 RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], 
             "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "2"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"toadd", "=", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Subsets", "[", 
                RowBox[{"loopnodes", ",", 
                 RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
               RowBox[{"zz_", "/;", 
                RowBox[{
                 RowBox[{"Join", "@@", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{"zz", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
                 RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"toadd", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"extraloopnodes", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopcontributions", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Power", "[", 
               RowBox[{
                RowBox[{"-", "1"}], ",", 
                RowBox[{
                 RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
              RowBox[{"(", 
               RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
             "turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cyclenodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Union", "@@", "#"}], "&"}], ",", "loopnodes"}], "]"}]}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"turnIntoContribution", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "totalcontrib", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"totalcontrib", "=", 
                RowBox[{
                "turnIntoContributionNothingAdded", "[", "pathnodes", "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"totalcontrib", "/", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"Total", "[", "loopcontributions", "]"}]}], 
                  ")"}]}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"totalcontrib", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"Total", "[", 
                    RowBox[{"loopcontributions", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "pathnodes"}], "]"}], "]"}], ">", "0"}],
                     "&"}], ",", "cyclenodes"}], "]"}], ",", "False"}], "]"}],
                     "]"}], "]"}], "]"}], "]"}]}], ")"}]}]}], ";", 
               "\[IndentingNewLine]", "totalcontrib"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"FindPath", "[", 
             RowBox[{
             "graph", ",", "iii", ",", "jjj", ",", "Infinity", ",", "All"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"iii", ",", 
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"jjj", ",", 
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], 
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"Join", ",", 
            RowBox[{"{", 
             RowBox[{"connectivitymat", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"DiagonalMatrix", "[", 
                  RowBox[{"Range", "[", 
                   RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}], 
                   "]"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"0", "\[Rule]", 
                   RowBox[{"{", "}"}]}], "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"zz_Integer", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"{", "zz", "}"}], "}"}]}], "}"}]}]}], "}"}], ",", 
            "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Total", ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"turnIntoContribution", "[", "#", "]"}], "&"}], ",", 
              "connectivitymat", ",", 
              RowBox[{"{", "3", "}"}]}], "]"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
        ",", 
        RowBox[{
         RowBox[{"size", "=", 
          RowBox[{"Total", "[", 
           RowBox[{"Dimensions", "[", 
            RowBox[{"joinupKasteleyn", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", 
             RowBox[{"{", 
              RowBox[{"iii", ",", "size"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"jjj", ",", "size"}], "}"}]}], "]"}], "+", 
           RowBox[{"IdentityMatrix", "[", "size", "]"}]}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "connectivitymat"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestConnectivityMatrix", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "multiplic", ",", "equals", ",", "jj", ",", 
       "alternative", ",", "normal", ",", "traditional"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"equals", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"multiplic", "[", 
             RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "10"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"alternative", "=", 
             RowBox[{"alternativeConnectivityMat", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"normal", "=", 
             RowBox[{"connectivityMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"equals", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"equals", ",", 
               RowBox[{
                RowBox[{"Simplify", "[", 
                 RowBox[{"alternative", "\[Equal]", "normal"}], "]"}], "===", 
                "True"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"multiplic", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"traditional", "=", 
                RowBox[{"traditionalConnectivityMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"equals", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"equals", ",", 
                  RowBox[{
                   RowBox[{"Simplify", "[", 
                    RowBox[{"traditional", "\[Equal]", "normal"}], "]"}], "===",
                    "True"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"And", "@@", "equals"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with connectivityMatrix! It doesn't seem \
to be equal to either the alternative method, or the traditional method \
involving the inverse (one of the two equalities was violated)\>\""}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestConnectivityMatrix", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848304023152523`*^9, 
   3.684830423874124*^9}, {3.6848304930750675`*^9, 3.684830496496272*^9}, {
   3.6848306034338064`*^9, 3.684830635219882*^9}, {3.6848306719112625`*^9, 
   3.684830696069599*^9}, 3.684831184007085*^9, 3.6848340210081034`*^9, {
   3.684834325735805*^9, 3.6848343432444744`*^9}, {3.6848347208974967`*^9, 
   3.684834724306249*^9}}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "loopDenominator"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684831221560369*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestLoopDenominator", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "multiplic", ",", "equals", ",", "jj", ",", 
       "traditionalmethod", ",", "newmethod"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"equals", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"multiplic", "[", 
             RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "10"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"traditionalmethod", "=", 
             RowBox[{"Expand", "[", 
              RowBox[{"1", "/", 
               RowBox[{"Expand", "[", 
                RowBox[{"Simplify", "[", 
                 RowBox[{"Det", "[", 
                  RowBox[{"Simplify", "[", 
                   RowBox[{"connectivityMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                 "]"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"newmethod", "=", 
             RowBox[{"loopDenominator", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"equals", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"equals", ",", 
               RowBox[{
                RowBox[{"Simplify", "[", 
                 RowBox[{"newmethod", "\[Equal]", "traditionalmethod"}], 
                 "]"}], "===", "True"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"And", "@@", "equals"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           
           "\"\< : There's a problem with loopDenominator! It doesn't equal \
the result obtained from the determinant of the connectivity matrix\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestLoopDenominator", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848312681994314`*^9, 
   3.684831300914626*^9}, {3.6848313467683363`*^9, 3.684831373236657*^9}, 
   3.6848343959195337`*^9, {3.6848344770354767`*^9, 3.684834499579558*^9}, {
   3.6848345369121*^9, 3.6848345388743496`*^9}, {3.684835189552026*^9, 
   3.684835194940216*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Simplify", "::", "time"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Time spent on a transformation exceeded \\!\\(300.`\\) \
seconds, and the transformation was aborted. Increasing the value of \
TimeConstraint option may improve the result of simplification.\"\>"}]], \
"Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.685015274301793*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Simplify", "::", "time"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Time spent on a transformation exceeded \\!\\(300.`\\) \
seconds, and the transformation was aborted. Increasing the value of \
TimeConstraint option may improve the result of simplification.\"\>"}]], \
"Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.6850156323385086`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Simplify", "::", "time"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Time spent on a transformation exceeded \\!\\(300.`\\) \
seconds, and the transformation was aborted. Increasing the value of \
TimeConstraint option may improve the result of simplification.\"\>"}]], \
"Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.6850164388185883`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Simplify", "::", "time"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Time spent on a transformation exceeded \\!\\(300.`\\) \
seconds, and the transformation was aborted. Increasing the value of \
TimeConstraint option may improve the result of simplification.\"\>"}]], \
"Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.685016678475238*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \\!\\(\\*StyleBox[\\(Simplify :: \
time\\), \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"\>"}]], "Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.685016678528273*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Simplify", "::", "time"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Time spent on a transformation exceeded \\!\\(300.`\\) \
seconds, and the transformation was aborted. Increasing the value of \
TimeConstraint option may improve the result of simplification.\"\>"}]], \
"Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.685016795692545*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Simplify", "::", "time"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Time spent on a transformation exceeded \\!\\(300.`\\) \
seconds, and the transformation was aborted. Increasing the value of \
TimeConstraint option may improve the result of simplification.\"\>"}]], \
"Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.6850178164540405`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \\!\\(\\*StyleBox[\\(Simplify :: \
time\\), \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"\>"}]], "Message", "MSG",
 ShowCellLabel->True,
 CellChangeTimes->{3.6850178165360985`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "pathMatrix"}], ",", " ", 
   "traditionalPathMatrix", ",", " ", "minorsAsPerfectMatchings"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.6848347452726264`*^9, 3.68483474701765*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"giveMeLoopDenominator", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", "theperf_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "adjacencymat", ",", "kasteleyn", ",", "perfpositions", ",", "jj", ",", 
       "graph", ",", "turnIntoContributionNothingAdded", ",", "cycles", ",", 
       "loopnodes", ",", "extraloopnodes", ",", "toadd", ",", 
       "loopcontributions"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"adjacencymat", "=", 
       RowBox[{"UpperTriangularize", "[", 
        RowBox[{"turnIntoAdjacencyMatrix", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfpositions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], "}"}]}], 
          "&"}], ",", 
         RowBox[{"Position", "[", 
          RowBox[{"kasteleyn", ",", 
           RowBox[{"Alternatives", "@@", 
            RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"perfpositions", "[", 
              RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"Reverse", "[", 
              RowBox[{"perfpositions", "[", 
               RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{"adjacencymat", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"Reverse", "[", 
               RowBox[{"perfpositions", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "-", 
           "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graph", "=", 
       RowBox[{"DirectedGraph", "[", 
        RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"turnIntoContributionNothingAdded", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
             "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"bigmatrix", "=", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                  "]"}], ",", 
                 RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{"kasteleyn", ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edges", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"bigmatrix", "[", 
                 RowBox[{"[", 
                  RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"pathnodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"iii", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                  "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edgedirections", "=", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Ordering", "[", "#", "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"pathnodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                   "}"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"2", "\[Rule]", 
                RowBox[{"-", "1"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"giveContribution", "=", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"edges", ",", "sign"}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Block", "[", 
                RowBox[{
                 RowBox[{"{", "contribution", "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                  ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"Times", "@@", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"giveContribution", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"edges", ",", "edgedirections"}], "}"}]}], "]"}]}]}],
             ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"cycles", "=", 
       RowBox[{
        RowBox[{"FindCycle", "[", 
         RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"1", ",", 
                RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
              RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], "&"}],
          ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extraloopnodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "2"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"toadd", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Subsets", "[", 
             RowBox[{"loopnodes", ",", 
              RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"Join", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"zz", ",", 
                   RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
              RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"toadd", "===", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopcontributions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Power", "[", 
            RowBox[{
             RowBox[{"-", "1"}], ",", 
             RowBox[{
              RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
           RowBox[{"(", 
            RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{"turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"Total", "[", "loopcontributions", "]"}]}], ")"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"alternativeConnectivityMat", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", 
     RowBox[{"referencematching_:", "Null"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "theperf", ",", "adjacencymat", ",", "kasteleyn", ",", "perfpositions", 
       ",", "jj", ",", "graph", ",", "cyclenodes", ",", 
       "turnIntoContributionNothingAdded", ",", "cycles", ",", "loopnodes", 
       ",", "extraloopnodes", ",", "toadd", ",", "loopcontributions", ",", 
       "turnIntoContribution", ",", "connectivitymat"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"referencematching", "===", "Null"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theperf", "=", 
          RowBox[{
           RowBox[{"perfectMatchings", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"lowNumberLoopsPMpos", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
           "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"theperf", "=", "referencematching"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"adjacencymat", "=", 
       RowBox[{"UpperTriangularize", "[", 
        RowBox[{"turnIntoAdjacencyMatrix", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfpositions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], "}"}]}], 
          "&"}], ",", 
         RowBox[{"Position", "[", 
          RowBox[{"kasteleyn", ",", 
           RowBox[{"Alternatives", "@@", 
            RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"perfpositions", "[", 
              RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"Reverse", "[", 
              RowBox[{"perfpositions", "[", 
               RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{"adjacencymat", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"Reverse", "[", 
               RowBox[{"perfpositions", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "-", 
           "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"graph", "=", 
       RowBox[{"DirectedGraph", "[", 
        RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"turnIntoContributionNothingAdded", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
             "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"bigmatrix", "=", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                  "]"}], ",", 
                 RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{"kasteleyn", ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edges", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"bigmatrix", "[", 
                 RowBox[{"[", 
                  RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"pathnodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"iii", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                  "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edgedirections", "=", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Ordering", "[", "#", "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"pathnodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                   "}"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"2", "\[Rule]", 
                RowBox[{"-", "1"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"giveContribution", "=", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"edges", ",", "sign"}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Block", "[", 
                RowBox[{
                 RowBox[{"{", "contribution", "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                  ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"Times", "@@", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"giveContribution", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"edges", ",", "edgedirections"}], "}"}]}], "]"}]}]}],
             ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cycles", "=", 
       RowBox[{
        RowBox[{"FindCycle", "[", 
         RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"1", ",", 
                RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
              RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], "&"}],
          ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extraloopnodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "2"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"toadd", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Subsets", "[", 
             RowBox[{"loopnodes", ",", 
              RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"Join", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"zz", ",", 
                   RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
              RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"toadd", "===", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopcontributions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Power", "[", 
            RowBox[{
             RowBox[{"-", "1"}], ",", 
             RowBox[{
              RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
           RowBox[{"(", 
            RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{"turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cyclenodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "@@", "#"}], "&"}], ",", "loopnodes"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"turnIntoContribution", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "totalcontrib", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"totalcontrib", "=", 
             RowBox[{
             "turnIntoContributionNothingAdded", "[", "pathnodes", "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"totalcontrib", "/", 
              RowBox[{"(", 
               RowBox[{"1", "-", 
                RowBox[{"Total", "[", "loopcontributions", "]"}]}], ")"}]}]}],
             ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"totalcontrib", 
              RowBox[{"(", 
               RowBox[{"1", "-", 
                RowBox[{"Total", "[", 
                 RowBox[{"loopcontributions", "[", 
                  RowBox[{"[", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "pathnodes"}], "]"}], "]"}], ">", "0"}],
                     "&"}], ",", "cyclenodes"}], "]"}], ",", "False"}], "]"}],
                     "]"}], "]"}], "]"}], "]"}]}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "totalcontrib"}]}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"connectivitymat", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"FindPath", "[", 
          RowBox[{
          "graph", ",", "iii", ",", "jjj", ",", "Infinity", ",", "All"}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"iii", ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"jjj", ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"connectivitymat", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Join", ",", 
         RowBox[{"{", 
          RowBox[{"connectivitymat", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DiagonalMatrix", "[", 
               RowBox[{"Range", "[", 
                RowBox[{"Total", "[", 
                 RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}], "]"}], 
               "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"0", "\[Rule]", 
                RowBox[{"{", "}"}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"zz_Integer", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", "zz", "}"}], "}"}]}], "}"}]}]}], "}"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"connectivitymat", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"Total", ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"turnIntoContribution", "[", "#", "]"}], "&"}], ",", 
           "connectivitymat", ",", 
           RowBox[{"{", "3", "}"}]}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "connectivitymat"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPathMatricesAndMinors", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "snks", ",", "multiplic", ",", 
       "externalnodes", ",", "jj", ",", "pathmat", ",", "sources", ",", 
       "sinks", ",", "numberofdenomintaorterms", ",", "loopdenom", ",", 
       "variablesmatrix", ",", "sourceedges", ",", "sinkedges", ",", 
       "usefulloopvariables", ",", "minors", ",", "matroidpoly", ",", 
       "niceminors", ",", "pp", ",", "theperfsinminors", ",", "bigpathmatrix",
        ",", "externalrows", ",", "externalcolumns", ",", "finalpathmatrix", 
       ",", "traditionalpathmat", ",", "loopdenominator", ",", 
       "truemapminortoperfmatch"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"snks", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSinkNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"externalnodes", "=", 
       RowBox[{"getOrderingExternalNodesDefault", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "externalnodes", "]"}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"We", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"multiplic", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "9"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pathmat", "=", 
                RowBox[{"pathMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"pathmat", "=!=", "Null"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"sources", "=", 
                   RowBox[{"srcs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sinks", "=", 
                   RowBox[{"snks", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pathmat", "\[Equal]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Length", "[", "sources", "]"}], "\[NotEqual]", 
                    "0"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pathmat", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "pathmat", "]"}], "=!=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "[", "sources", "]"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"sources", ",", "sinks"}], "]"}], "]"}]}], 
                    "}"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! Its size \
is not correct!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"loopdenom", "=", 
                   RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"loopdenom", "===", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "=", "1"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "=", 
                    RowBox[{"Length", "[", "loopdenom", "]"}]}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"numberofdenomintaorterms", "\[NotEqual]", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! The \
denominators do not all have the right number of terms\>\""}], "]"}], ";"}]}],
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"variablesmatrix", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "#", "]"}], ",", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "&"}], 
                    ",", "pathmat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sourceedges", "=", 
                   RowBox[{"getSourceEdges", "[", 
                    RowBox[{"b", ",", "c", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sinkedges", "=", 
                   RowBox[{"getSinkEdges", "[", 
                    RowBox[{"b", ",", "c", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"usefulloopvariables", "=", 
                   RowBox[{"Variables", "[", 
                    RowBox[{
                    RowBox[{"loopVariablesBasis", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Variables", "[", "pathmat", "]"}], "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "sourceedges"}], "]"}], "&"}], ",", 
                    "variablesmatrix", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"usefulloopvariables", ",", "sourceedges"}], 
                    "]"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "sinkedges"}], "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "variablesmatrix", "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"usefulloopvariables", ",", "sinkedges"}], "]"}], 
                    "]"}]}], ")"}]}], ")"}], "=!=", "True"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! It \
doesn't seem to be going from sources to sinks\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"pathmat", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"minors", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"pathmat", ",", 
                    RowBox[{"Length", "[", "pathmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Power", "[", 
                    RowBox[{"___", ",", "num1_"}], "]"}], "/;", 
                    RowBox[{"num1", ">", "1"}]}], ")"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"num2_", ",", "___"}], "]"}], "/;", 
                    RowBox[{"num2", ">", "1"}]}], ")"}]}]}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! Its \
minors do not simplify\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "NB", " ", "expecteddenominatorloops", " ", "SOMETIMES", 
                    " ", "HAS", " ", "POSITIVE", " ", "TERMS", " ", "AS", " ", 
                    RowBox[{"WELL", "!"}], " ", "This", " ", "only", " ", 
                    "works", " ", "for", " ", "small", " ", "numbers", " ", 
                    "of", " ", "loops", " ", "and", " ", 
                    RowBox[{"won", "'"}], "t", " ", "work", " ", "in", " ", 
                    RowBox[{
                    RowBox[{"general", "!!"}], "!"}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"matroidpoly", "=", 
                    RowBox[{"matroidPolytope", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"expecteddenominatorloops", "=", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "+", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "matroidpoly", "]"}], ",", 
                    "#"}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "jj", ",", "___"}], "}"}]}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "jj"}], "]"}]}], 
                    "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"expecteddenominatorloops", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], 
                    RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], "]"}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"niceminors", "=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minors", " ", "expecteddenominatorloops"}], 
                    "]"}], "]"}], "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"pp", "[", "iii", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], "]"}]}],
                     ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"theperfsinminors", "=", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "mino", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "mino", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"List", "@@", "mino"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "mino", "}"}]}], ";"}]}], "]"}], ";", 
                    "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",",
                     "niceminors"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"pp", "[", "zz_", "]"}]}], "\[Rule]", 
                    RowBox[{"pp", "[", "zz", "]"}]}], "}"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "===", "pp"}], "&"}], 
                    ",", 
                    RowBox[{"Flatten", "[", "theperfsinminors", "]"}]}], 
                    "]"}]}], ")"}], "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! Its \
minors are not equal to sums of perfect matchings\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"DeleteDuplicates", ",", 
                    RowBox[{"theperfsinminors", "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pp", "[", "iii", "]"}], "\[Rule]", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"srcs", "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], "\[Rule]", "jjj"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                    "]"}]}], "}"}]}], "]"}]}]}], "]"}], "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], "=!=", 
                    RowBox[{"Delete", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "pathmat", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "pathmat", "]"}], "}"}]}], "]"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", "0"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! The \
perfect matchings contributing to each minor do not have the correct source \
sets\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"theperfsinminors", "=!=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "mino", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "mino", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"List", "@@", "mino"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "mino", "}"}]}], ";"}]}], "]"}], ";", 
                    "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
                    "0"}], "]"}], "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"pp", "[", "iii", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"pp", "[", "zz_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"pp", "[", "zz", "]"}]}], "}"}]}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with minorsAsPerfectMatchings! \
The perfect matchings contributing to each minor do not correspond to the \
calculation done directly by the path matrix\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{"Now", " ", 
                    RowBox[{"we", "'"}], "ll", " ", "check", " ", "whether", 
                    " ", "minorsAsPerfectMatchings", " ", "is", " ", 
                    "completely", " ", "correct"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"bigpathmatrix", "=", 
                   RowBox[{"connectivityMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"externalrows", "=", 
                   RowBox[{"getSourceNodes", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"externalcolumns", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "a", "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "a", "]"}], "+", 
                    RowBox[{"Length", "[", "c", "]"}]}]}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", "1"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"finalpathmatrix", "=", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"bigpathmatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"externalrows", ",", "externalcolumns"}], "]"}], 
                    "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"finalpathmatrix", "\[Equal]", "pathmat"}], "]"}],
                     "=!=", "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< and jj=\>\"", ",", "jj", ",", 
                    "\"\< : There's a problem with the path matrix! It \
doesn't give the same result as what is found using the alternative method!\>\
\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"traditionalpathmat", "=", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"traditionalPathMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"finalpathmatrix", "\[Equal]", "pathmat"}], "]"}],
                     "=!=", "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< and jj=\>\"", ",", "jj", ",", 
                    "\"\< : There's a problem with the path matrix! It \
doesn't give the same result as what is found using the traditional method!\>\
\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"finalpathmatrix", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"minors", "=", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"finalpathmatrix", ",", 
                    RowBox[{"Length", "[", "finalpathmatrix", "]"}]}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"loopdenominator", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], " ", 
                    RowBox[{"giveMeLoopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"truemapminortoperfmatch", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minors", " ", "loopdenominator"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "=!=", 
                    "truemapminortoperfmatch"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< and jj=\>\"", ",", "jj", ",", 
                    "\"\< : There's a problem with minorsAsPerfectMatchings! \
It doesn't give the same result as what is found using the alternative \
method!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestPathMatricesAndMinors", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848347894936*^9, 
   3.684834809153864*^9}, {3.684835207776204*^9, 3.684835234505227*^9}, {
   3.6848354057346563`*^9, 3.6848355857899737`*^9}, {3.684835773309247*^9, 
   3.684835814243683*^9}, {3.6848359279518533`*^9, 3.684836014110338*^9}, {
   3.684836426772529*^9, 3.684836442754021*^9}, {3.6848375343054214`*^9, 
   3.6848375467218227`*^9}, {3.6848392852717233`*^9, 
   3.6848393157355256`*^9}, {3.68483935130013*^9, 3.6848394194085107`*^9}, {
   3.684839591334359*^9, 3.684839591553114*^9}, {3.6848396222529087`*^9, 
   3.684839667619683*^9}, {3.684840133929549*^9, 3.6848401390649247`*^9}, {
   3.684840400424701*^9, 3.6848404352795105`*^9}, {3.684840549677243*^9, 
   3.6848406270943775`*^9}, {3.6848407687755923`*^9, 
   3.6848407797046127`*^9}, {3.6848409033487096`*^9, 3.68484094586121*^9}, {
   3.6848409805510206`*^9, 3.6848410661838007`*^9}, {3.684841096427416*^9, 
   3.684841138431076*^9}, {3.684841198328536*^9, 3.684841239550929*^9}, {
   3.6848413748165674`*^9, 3.6848414141851764`*^9}, {3.684841462374319*^9, 
   3.684841514971063*^9}, {3.6848415868703575`*^9, 3.684841606945702*^9}, {
   3.684841640103861*^9, 3.6848416415810204`*^9}, {3.6849919246201367`*^9, 
   3.6849919297166805`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6848347417400913`*^9, 3.684834741916008*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "dimensionGrassmannian"}], 
   ",", " ", 
   RowBox[{"reducibilityQ", "."}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.685006513827117*^9, 3.685006587109598*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NEWindependentPluckerRelations", "[", 
    RowBox[{"k_Integer", ",", "n_Integer", ",", 
     RowBox[{"indexlistminorstozero_:", 
      RowBox[{"{", "}"}]}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "pluckerrel", ",", "numindeppluckerrelations", ",", "solutions", ",", 
       "independentrelations", ",", "newsolution", ",", "ii"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pluckerrel", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"pluckerRelations", "[", 
           RowBox[{"k", ",", "n"}], "]"}], "/.", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"HoldForm", "[", "bipartiteSUSY`minor", "]"}], "[", 
               RowBox[{"Sequence", "@@", "#"}], "]"}], "\[Rule]", "0"}], 
             "&"}], ",", "indexlistminorstozero"}], "]"}]}], ",", "True"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "The", " ", "max", " ", "number", " ", "of", " ", "independent", " ", 
        "plucker", " ", "relations"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"numindeppluckerrelations", "=", 
       RowBox[{
        RowBox[{"Binomial", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "-", "1", "-", 
        RowBox[{"k", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"solutions", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "If", " ", "we", " ", "have", " ", "any", " ", "plukcer", " ", 
         "relations"}], ",", " ", 
        RowBox[{"start", " ", "solving", " ", "them"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pluckerrel", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"independentrelations", "=", 
          RowBox[{"pluckerrel", "[", 
           RowBox[{"[", 
            RowBox[{"{", "1", "}"}], "]"}], "]"}]}], ";", 
         RowBox[{"(*", 
          RowBox[{
          "this", " ", "variable", " ", "will", " ", "contain", " ", "all", 
           " ", "independent", " ", "relations"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"newsolution", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Solve", "[", 
             RowBox[{"And", "@@", "independentrelations"}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"zz", ",", 
               RowBox[{"_", "\[Rule]", "0"}]}], "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"solutions", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"solutions", ",", 
            RowBox[{"newsolution", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
         RowBox[{"(*", 
          RowBox[{
          "this", " ", "variable", " ", "will", " ", "contain", " ", "all", 
           " ", "independent", " ", "solutions"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "Go", " ", "through", " ", "the", " ", "remaining", " ", "plucker",
             " ", 
            RowBox[{"relations", ".", " ", "If"}], " ", "the", " ", "next", 
            " ", "Plucker", " ", "relations", " ", "is", " ", "not", " ", 
            "triviliazied", " ", "by", " ", "the", " ", "solutions", " ", 
            "we", " ", "already", " ", "found", " ", "to", " ", "the", " ", 
            "previous", " ", "relations"}], ",", " ", 
           RowBox[{
           "add", " ", "it", " ", "to", " ", "the", " ", "list", " ", "of", 
            " ", "independent", " ", "relations"}], ",", " ", 
           RowBox[{"and", " ", "solve", " ", 
            RowBox[{"it", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"ii", "=", "2"}], ",", 
           RowBox[{"ii", "\[LessEqual]", 
            RowBox[{"Length", "[", "pluckerrel", "]"}]}], ",", 
           RowBox[{"ii", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Simplify", "[", 
                RowBox[{
                 RowBox[{"pluckerrel", "[", 
                  RowBox[{"[", "ii", "]"}], "]"}], "//.", "solutions"}], 
                "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"independentrelations", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"independentrelations", ",", 
                  RowBox[{"pluckerrel", "[", 
                   RowBox[{"[", "ii", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"newsolution", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Solve", "[", 
                   RowBox[{"And", "@@", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"independentrelations", "//.", "solutions"}], 
                    "]"}]}], "]"}], ",", 
                  RowBox[{"zz_", "/;", 
                   RowBox[{"MemberQ", "[", 
                    RowBox[{"zz", ",", 
                    RowBox[{"_", "\[Rule]", "0"}]}], "]"}]}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"solutions", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"solutions", ",", 
                  RowBox[{"newsolution", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "If", " ", "we", " ", "have", " ", "found", " ", "as", " ", 
                  "many", " ", "solutions", " ", "as", " ", "there", " ", 
                  "are", " ", "independent", " ", "relations", " ", "in", " ",
                   "total"}], ",", " ", 
                 RowBox[{"stop", " ", "here"}], ",", " ", 
                 RowBox[{
                 "since", " ", "the", " ", "remainigs", " ", "Plucker", " ", 
                  "relations", " ", "cannot", " ", "be", " ", 
                  "independent"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "solutions", "]"}], "\[Equal]", 
                  "numindeppluckerrelations"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]",
                 "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "Tidy", " ", "up", " ", "the", " ", "solutions", " ", "so", " ", 
           "that", " ", "they", " ", "all", " ", "depend", " ", "on", " ", 
           "the", " ", "same", " ", "set", " ", "of", " ", "variables"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solutions", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"Rule", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", "solutions"}], 
               "]"}], ",", 
              RowBox[{"Simplify", "[", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "solutions"}],
                  "]"}], "//.", "solutions"}], "]"}]}], "}"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "if", " ", "there", " ", "are", " ", "no", " ", "Plucker", " ", 
           "relations"}], ",", " ", 
          RowBox[{"return", " ", "empty", " ", "sets"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"independentrelations", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"independentrelations", ",", "solutions"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestGrassmannianAndReducibility", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "fullreduction", ",", "newa", ",", "newb", ",", "newc", ",", "newd", 
       ",", "perfs", ",", "minloopnumber", ",", "Cmat", ",", "planar", ",", 
       "entries", ",", "minors", ",", "positionzeros", ",", "srcK", ",", 
       "endN", ",", "indiceszerominors", ",", "indeppluckrels", ",", "dimC", 
       ",", "edges", ",", "redgauging1", ",", "moduligauging1", ",", 
       "redgauging2", ",", "pmatrix", ",", "redscattering", ",", 
       "numberofzerominors", ",", "didyoukillpluckers"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "+", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"reducibilityBFTedges", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "\[LessEqual]", "14"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"fullreduction", "=", 
             RowBox[{"reductionGraphBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"fullreduction", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "}"}], "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Last", "[", 
                    RowBox[{"reductionGraphBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                    "]"}], "]"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
              ",", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{"matchingPolytope", "[", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "]"}], "]"}], "=!=", 
               RowBox[{"dimensionGrassmannian", "[", 
                RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with dimensionGrassmannian! When a \
graph is reduced by looking at the moduli space, the master space should have \
the same dimension as the Grassmannian!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"minloopnumber", "=", 
          RowBox[{"Length", "[", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"matroidPolytope", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"matroidPolytope", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "[", 
              RowBox[{"[", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"perfs", "\[NotEqual]", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{"minloopnumber", "\[LessEqual]", "3"}]}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Cmat", "=", 
             RowBox[{"pathMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Cmat", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"dimensionGrassmannian", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
                  "0"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : The dimension of the Grassmannian should zero \
when the path matrix is C={} .\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}], "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"planar", "=", 
                RowBox[{"planarityQ", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"entries", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", "Cmat", "]"}], ",", 
                  RowBox[{"0", "|", "1"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dimC", "=", 
                RowBox[{"dimensionGrassmannian", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "we", " ", "are", " ", "not", " ", "on", " ", "a", " ", 
                 "secret", " ", 
                 RowBox[{"pole", ".", " ", "We"}], " ", "can", " ", "then", 
                 " ", "use", " ", "the", " ", "independent", " ", "plucker", 
                 " ", "relations", " ", "to", " ", "determine", " ", "the", 
                 " ", "dimension"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"srcK", "=", 
                RowBox[{"getK", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"endN", "=", 
                RowBox[{"getN", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"minors", "=", 
                RowBox[{
                 RowBox[{"Minors", "[", 
                  RowBox[{"Cmat", ",", 
                   RowBox[{"Length", "[", "Cmat", "]"}]}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"positionzeros", "=", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"Position", "[", 
                  RowBox[{"minors", ",", "0", ",", 
                   RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"indiceszerominors", "=", 
                RowBox[{
                 RowBox[{"Subsets", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", "endN", "]"}], ",", 
                   RowBox[{"{", "srcK", "}"}]}], "]"}], "[", 
                 RowBox[{"[", "positionzeros", "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"indeppluckrels", "=", 
                RowBox[{
                 RowBox[{"NEWindependentPluckerRelations", "[", 
                  RowBox[{"srcK", ",", "endN", ",", "indiceszerominors"}], 
                  "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"planar", "||", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Length", "[", "entries", "]"}], "\[LessEqual]", 
                    "dimC"}], ")"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "we", " ", "are", " ", "not", " ", "on", " ", "a", " ", 
                   "secret", " ", 
                   RowBox[{"pole", ".", " ", "We"}], " ", "can", " ", "then", 
                   " ", "use", " ", "the", " ", "independent", " ", "plucker",
                    " ", "relations", " ", "to", " ", "determine", " ", "the",
                    " ", "dimension"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "minors", "]"}], "-", 
                    RowBox[{"Length", "[", "positionzeros", "]"}], "-", 
                    RowBox[{"Length", "[", "indeppluckrels", "]"}], "-", 
                    "1"}], "=!=", 
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : The dimension of the Grassmannian should be equal \
to (# of Pluckers - # of indep Plucker relations - 1), when we are not on \
secret poles!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", 
                  RowBox[{
                  "we", " ", "have", " ", "secret", " ", "relations", " ", 
                   "among", " ", "the", " ", "pluckers"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "minors", "]"}], "-", 
                    RowBox[{"Length", "[", "positionzeros", "]"}], "-", 
                    RowBox[{"Length", "[", "indeppluckrels", "]"}], "-", 
                    "1"}], "\[LessEqual]", 
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with dimensionGrassmannian! The \
dimension of the Grassmannian should be less than the number of non-trivial \
entries, when we are on secret poles!\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"edges", "=", 
          RowBox[{"Variables", "[", 
           RowBox[{"joinupKasteleyn", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"redgauging2", "=", 
          RowBox[{"reducibilityQ", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True", ",", 
            "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"pmatrix", "=", 
          RowBox[{"matchingPolytope", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"redgauging1", "=", 
             RowBox[{"reducibilityQ", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True", 
               ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"moduligauging1", "=", 
             RowBox[{"moduliSpaceBFT", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
               "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"perfs", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{"redgauging1", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                    "pmatrix"}], "]"}]}], ",", "False"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is reducible but there are no edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                    "pmatrix"}], "]"}]}], ",", "False"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is not reducible but there are edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "edges", "]"}], "&&", 
                  RowBox[{"redgauging1", "=!=", "True"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! This \
example should be reducible, though reducibilityQ does not return True\>\""}],
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{"redgauging2", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"edges", ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"zz", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"zz", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"zz", "\[Rule]", "0"}], "}"}]}], ",", "d", ",", 
                    "2"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}]}], "]"}], "===", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is reducible but there are no edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}], ",", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"edges", ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"zz", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"zz", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"zz", "\[Rule]", "0"}], "}"}]}], ",", "d", ",", 
                    "2"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}]}], "]"}], "=!=", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is not reducible but there are edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"redgauging2", "=!=", "True"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibilityQ! This example \
should be reducible, though reducibilityQ does not return True\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"perfs", "\[NotEqual]", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{"minloopnumber", "\[LessEqual]", "3"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"redscattering", "=", 
             RowBox[{"reducibilityQ", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "False", 
               ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Cmat", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"numberofzerominors", "=", 
                RowBox[{"Length", "[", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"Cmat", ",", 
                    RowBox[{"Length", "[", "Cmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "0"}], "]"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"didyoukillpluckers", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "edgeinput", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "smallgrass", ",", "numzerominors", ",", "thenewkast"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Variables", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], "]"}], 
                    "]"}], "\[GreaterEqual]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"thenewkast", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], ",", 
                    "d"}], "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"perfectMatchings", "@@", "thenewkast"}], ")"}], "=!=",
                     "0"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"smallgrass", "=", 
                    RowBox[{"pathMatrix", "@@", "thenewkast"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"smallgrass", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", "0"}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"smallgrass", ",", 
                    RowBox[{"Length", "[", "smallgrass", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "0"}], "]"}], 
                    "]"}]}], ";"}]}], "]"}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", "0"}], ";"}]}], "]"}], 
                    ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", "0"}], ";"}]}], "]"}], ";", 
                    RowBox[{"numzerominors", ">", "numberofzerominors"}]}]}], 
                    "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",", "edges"}], 
                 "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestGrassmannianAndReducibility", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "20"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "20"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", "20"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685006572250659*^9, 
   3.6850065944345016`*^9}, {3.685006798938786*^9, 3.6850068052850275`*^9}, {
   3.6850071983404217`*^9, 3.6850072268690195`*^9}, {3.685007291921028*^9, 
   3.6850073405765553`*^9}, {3.685007428081041*^9, 3.6850074454001245`*^9}, {
   3.6850075249606423`*^9, 3.6850075417343884`*^9}, {3.685010106456232*^9, 
   3.6850101813943276`*^9}, {3.685010229563541*^9, 3.685010240557389*^9}, 
   3.6850102990145082`*^9, {3.6850103914748693`*^9, 3.6850103919932165`*^9}, {
   3.6850156409682584`*^9, 3.685015641505153*^9}, 3.685015731695116*^9, {
   3.6850160285011168`*^9, 3.6850160711364155`*^9}, {3.685016166553125*^9, 
   3.685016176609563*^9}, {3.685016274387309*^9, 3.6850163879943933`*^9}, {
   3.685017876908708*^9, 3.685017906366027*^9}, 3.6850179483022366`*^9, {
   3.685018066695913*^9, 3.685018093538677*^9}, {3.6850181428652983`*^9, 
   3.685018187521451*^9}, {3.685018296411391*^9, 3.6850182965494833`*^9}, {
   3.685018523462476*^9, 3.6850186036008615`*^9}, {3.6850194838921223`*^9, 
   3.685019544613428*^9}, 3.6850195831524343`*^9, {3.6850200296641884`*^9, 
   3.685020053611603*^9}, {3.685020154515847*^9, 3.6850201560103593`*^9}, {
   3.6850202236421127`*^9, 3.6850202546797295`*^9}, {3.685020312835369*^9, 
   3.6850203227652187`*^9}, {3.685020355495496*^9, 3.6850203848967*^9}, {
   3.685022777252514*^9, 3.685022806765155*^9}, {3.685024382446768*^9, 
   3.685024399996913*^9}, {3.6850244448118043`*^9, 3.685024471633343*^9}, {
   3.6850245043464518`*^9, 3.6850245172607684`*^9}, {3.6850245670148087`*^9, 
   3.685024581039236*^9}, 3.6850246538377743`*^9, {3.6850246979740534`*^9, 
   3.685024726561909*^9}, {3.685024759534542*^9, 3.685024915243692*^9}, {
   3.685025018862587*^9, 3.685025021740408*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"{", "0", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", 
         RowBox[{"XX", "[", 
          RowBox[{"1", ",", "2"}], "]"}], ",", 
         RowBox[{"XX", "[", 
          RowBox[{"2", ",", "1"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"XX", "[", 
          RowBox[{"7", ",", "2"}], "]"}], ",", 
         RowBox[{"XX", "[", 
          RowBox[{"2", ",", "7"}], "]"}], ",", "0", ",", "0"}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"X", "[", 
        RowBox[{"2", ",", "2"}], "]"}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bftlabeling", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kast", "=", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"perfs", "=", 
   RowBox[{"perfectMatchings", "[", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Cmat", "=", 
  RowBox[{"pathMatrix", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"planar", "=", 
  RowBox[{"planarityQ", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"entries", "=", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", "Cmat", "]"}], ",", 
    RowBox[{"0", "|", "1"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"dimC", "=", 
  RowBox[{"dimensionGrassmannian", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"srcK", "=", 
  RowBox[{"getK", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"endN", "=", 
  RowBox[{"getN", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"minors", "=", 
  RowBox[{
   RowBox[{"Minors", "[", 
    RowBox[{"Cmat", ",", 
     RowBox[{"Length", "[", "Cmat", "]"}]}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"positionzeros", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"minors", ",", "0", ",", 
      RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"indiceszerominors", "=", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{
      RowBox[{"Range", "[", "endN", "]"}], ",", 
      RowBox[{"{", "srcK", "}"}]}], "]"}], "[", 
    RowBox[{"[", "positionzeros", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indeppluckrels", "=", 
    RowBox[{
     RowBox[{"NEWindependentPluckerRelations", "[", 
      RowBox[{"srcK", ",", "endN", ",", "indiceszerominors"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"Variables", "[", 
    RowBox[{"joinupKasteleyn", "[", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"redgauging2", "=", 
   RowBox[{"reducibilityQ", "[", 
    RowBox[{
    "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True", ",", "2"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pmatrix", "=", 
   RowBox[{"matchingPolytope", "[", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"bftlabling", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"redgauging1", "=", 
      RowBox[{"reducibilityQ", "[", 
       RowBox[{
       "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True", ",", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"moduligauging1", "=", 
      RowBox[{"moduliSpaceBFT", "[", 
       RowBox[{
       "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
        "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"perfs", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"redgauging1", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"And", "@@", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                  "pmatrix"}], "]"}]}], ",", "False"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with reducibilityQ! The BFT graph \
is reducible but there are no edges I can remove without removing points in \
the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}],
           ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"And", "@@", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                  "pmatrix"}], "]"}]}], ",", "False"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with reducibilityQ! The BFT graph \
is not reducible but there are edges I can remove without removing points in \
the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "edges", "]"}], "&&", 
           RowBox[{"redgauging1", "=!=", "True"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with reducibilityQ! This example \
should be reducible, though reducibilityQ does not return True\>\""}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6850164792731695`*^9, 3.685016539708884*^9}, {
   3.6850169248769393`*^9, 3.685016928535066*^9}, {3.6850170875988026`*^9, 
   3.6850171089662123`*^9}, {3.685017285177596*^9, 3.685017285685937*^9}, 
   3.68501734326025*^9, {3.685017380167584*^9, 3.6850173989722753`*^9}, {
   3.6850183387627683`*^9, 3.6850184074674506`*^9}, {3.68501843791257*^9, 
   3.6850184662422314`*^9}, {3.685018645737048*^9, 3.685018649783106*^9}, {
   3.685020831432473*^9, 3.685020886046485*^9}, 3.685021985241205*^9, {
   3.68502275937945*^9, 3.685022771329144*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     FractionBox[
      RowBox[{"XX", "[", 
       RowBox[{"7", ",", "2"}], "]"}], 
      RowBox[{"XX", "[", 
       RowBox[{"2", ",", "7"}], "]"}]], ",", "1", ",", "0", ",", "0"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
     FractionBox[
      RowBox[{"XX", "[", 
       RowBox[{"2", ",", "1"}], "]"}], 
      RowBox[{"XX", "[", 
       RowBox[{"1", ",", "2"}], "]"}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.6850219878695035`*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.685021987877508*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"XX", "[", 
     RowBox[{"7", ",", "2"}], "]"}], 
    RowBox[{"XX", "[", 
     RowBox[{"2", ",", "7"}], "]"}]], ",", 
   FractionBox[
    RowBox[{"XX", "[", 
     RowBox[{"2", ",", "1"}], "]"}], 
    RowBox[{"XX", "[", 
     RowBox[{"1", ",", "2"}], "]"}]]}], "}"}]], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.6850219878835125`*^9}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.685021987889517*^9}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.68502198789452*^9}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.6850219879005237`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", 
   FractionBox[
    RowBox[{"XX", "[", 
     RowBox[{"7", ",", "2"}], "]"}], 
    RowBox[{"XX", "[", 
     RowBox[{"2", ",", "7"}], "]"}]], ",", 
   FractionBox[
    RowBox[{
     RowBox[{"XX", "[", 
      RowBox[{"2", ",", "1"}], "]"}], " ", 
     RowBox[{"XX", "[", 
      RowBox[{"7", ",", "2"}], "]"}]}], 
    RowBox[{
     RowBox[{"XX", "[", 
      RowBox[{"1", ",", "2"}], "]"}], " ", 
     RowBox[{"XX", "[", 
      RowBox[{"2", ",", "7"}], "]"}]}]], ",", "1", ",", 
   FractionBox[
    RowBox[{"XX", "[", 
     RowBox[{"2", ",", "1"}], "]"}], 
    RowBox[{"XX", "[", 
     RowBox[{"1", ",", "2"}], "]"}]], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.6850208321279387`*^9, 3.6850208864497547`*^9}, 
   3.685021987907528*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Transpose", "::", "nmtx"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The first two levels of \[NoBreak]\\!\\({}\\)\[NoBreak] \
cannot be transposed. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Transpose/nmtx\\\", ButtonNote -> \
\\\"Transpose::nmtx\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.685021988053626*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6850064840787334`*^9, 3.685006484293377*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "dimensionGrassmannian"}], 
   ",", " ", 
   RowBox[{"reducibilityQ", "."}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.665829906274736*^9, {
   3.665831295184313*^9, 3.6658313043666134`*^9}, {3.6665244849878807`*^9, 
   3.6665245508670397`*^9}, {3.6666127583425817`*^9, 3.666612758467588*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ii", "\[NotEqual]", "104"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Position", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"matroidPolytope", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"lowNumberLoopsPMpos", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
           "]"}]}], "]"}], "]"}], "\[LessEqual]", "3"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"planar", "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"originalorder3relations", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Times", "@@", "#"}], "&"}], ",", 
              RowBox[{"Subsets", "[", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"HoldForm", "[", "minor", "]"}], "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "&"}], ",", 
                  RowBox[{"Subsets", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmat", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "Cmat", "]"}], "}"}]}], "]"}]}], 
                 "]"}], ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "/.", 
            RowBox[{"MapThread", "[", 
             RowBox[{"Rule", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"HoldForm", "[", "minor", "]"}], "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "&"}], ",", 
                  RowBox[{"Subsets", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmat", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "Cmat", "]"}], "}"}]}], "]"}]}], 
                 "]"}], ",", 
                RowBox[{"(", 
                 RowBox[{"minorsAsPerfectMatchings", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ")"}]}],
                "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"didyoukillpluckers", "[", 
           RowBox[{"[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Position", "[", 
              RowBox[{"didyoukillpluckers", ",", "False"}], "]"}], "]"}], 
            "]"}], "]"}], "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "inputedge", "}"}], ",", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"order3relations", ",", "outputTrueFalse"}], "}"}],
                   ",", 
                  RowBox[{
                   RowBox[{"order3relations", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"HoldForm", "[", "minor", "]"}], "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmat", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "Cmat", "]"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "/.", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Rule", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"HoldForm", "[", "minor", "]"}], "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmat", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "Cmat", "]"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ")"}]}], 
                    "}"}]}], "]"}]}], "]"}]}], ";", 
                   RowBox[{"outputTrueFalse", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "order3relations", "]"}], "-", 
                    RowBox[{"Length", "[", 
                    RowBox[{"DeleteDuplicates", "[", "order3relations", "]"}],
                     "]"}]}], ")"}], ">", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "originalorder3relations", "]"}], 
                    "-", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "DeleteDuplicates", "[", "originalorder3relations", "]"}],
                     "]"}]}], ")"}]}]}], ";", "outputTrueFalse"}]}], "]"}]}], 
               "]"}], "[", "#", "]"}], "&"}], ",", 
            RowBox[{"edges", "[", 
             RowBox[{"[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Position", "[", 
                RowBox[{"didyoukillpluckers", ",", "False"}], "]"}], "]"}], 
              "]"}], "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"didyoukillDOF", "=", "didyoukillpluckers"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"redscattering", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"didyoukillDOF", ",", "False"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<ii=\>\"", ",", "ii", ",", 
              "\"\< : There's a problem with reducibilityQ! The scattering \
graph is reducible, even though there are no edges which I can remove that \
keep the same number of elements in the Grassmannian matrix!\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"didyoukillDOF", ",", "False"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<ii=\>\"", ",", "ii", ",", 
              "\"\< : There's a problem with reducibilityQ! The scattering \
graph is not reducible, even though there are edges which I can remove that \
keep the same number of elements in the Grassmannian matrix!\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6665290513862414`*^9, 3.6665290516363416`*^9}, {
   3.6665299724770365`*^9, 3.6665300009116697`*^9}, {3.666530088819817*^9, 
   3.666530128316635*^9}, {3.6665302672504177`*^9, 3.6665302813892417`*^9}, 
   3.666530509483374*^9, {3.6665311832591496`*^9, 3.6665311836574163`*^9}, {
   3.666532935983368*^9, 3.666532937266738*^9}, {3.666590887530099*^9, 
   3.6665910480420675`*^9}, {3.666596246307023*^9, 3.666596247686492*^9}, {
   3.666596281871814*^9, 3.6665962982549906`*^9}, {3.666596328434821*^9, 
   3.6665963366269236`*^9}, {3.666596422926762*^9, 3.6665964241455774`*^9}, {
   3.6665965815178466`*^9, 3.666596582564776*^9}, {3.666596651807828*^9, 
   3.666596656294677*^9}, {3.66659672199334*^9, 3.666596820121982*^9}, {
   3.666596865312018*^9, 3.6665968751740265`*^9}, {3.6665981482872815`*^9, 
   3.6665982000836067`*^9}, 3.6666119841504183`*^9, {3.6666120887045393`*^9, 
   3.6666120933161173`*^9}, {3.6666121514101872`*^9, 3.6666121823580694`*^9}, 
   3.666612220076093*^9, {3.666612274900276*^9, 3.6666123117251263`*^9}, {
   3.6666123981157455`*^9, 3.666612413645131*^9}, {3.6666130173240137`*^9, 
   3.6666130189279222`*^9}, {3.666613422534994*^9, 3.666613437886575*^9}, 
   3.666614181831832*^9, {3.666614256617727*^9, 3.6666142615109653`*^9}, {
   3.6666154098308*^9, 3.666615444157339*^9}, {3.6666154880433855`*^9, 
   3.6666155004092445`*^9}, {3.666615531886362*^9, 3.6666155727227545`*^9}, {
   3.6666158966097136`*^9, 3.666615908554063*^9}, {3.666618823467035*^9, 
   3.6666188235920134`*^9}, {3.6666189235337534`*^9, 3.666618955772812*^9}, {
   3.66661901853673*^9, 3.6666190405281825`*^9}, {3.666632420106245*^9, 
   3.66663243238476*^9}, {3.6666324845601788`*^9, 3.666632542488106*^9}, {
   3.6666329600245743`*^9, 3.666633012275989*^9}, 3.667047503622698*^9, 
   3.667048814939345*^9, {3.667640261384919*^9, 3.6676402698411236`*^9}, {
   3.6678267808236313`*^9, 3.6678267825824013`*^9}, {3.667827338091591*^9, 
   3.667827402290561*^9}, 3.671543688767076*^9, {3.671545370913251*^9, 
   3.6715453713929257`*^9}, {3.671545445702312*^9, 3.671545451929431*^9}, {
   3.671545528851487*^9, 3.671545529554343*^9}, {3.6727462785353374`*^9, 
   3.672746280637918*^9}, 3.672746311095434*^9, {3.6850068552979555`*^9, 
   3.6850068605064363`*^9}, {3.685007180073697*^9, 3.6850071909384737`*^9}, {
   3.6850072325318036`*^9, 3.6850072389100666`*^9}, {3.6850074574326673`*^9, 
   3.685007479468395*^9}, {3.685010304621256*^9, 3.685010305505847*^9}, {
   3.685018672257831*^9, 3.685018673304045*^9}, {3.6850195202789264`*^9, 
   3.6850195208697753`*^9}, 3.685020347154179*^9, {3.6850243014285765`*^9, 
   3.6850243030687084`*^9}, {3.68502459397027*^9, 3.6850245942827845`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.685025117570421*^9, 3.685025117789184*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check"}], " ", "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestreductionGraphBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ","}], "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<kast=\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
       "\"\< : \>\""}], "]"}], "*)"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestreductionGraphBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestreductionGraphBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "10"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestreductionGraphBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "10"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestreductionGraphBFT", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", "10"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestreductionGraphBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"10.2 for Microsoft Windows (64-bit) (July 7, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1019, 20, 72, "Input"],
Cell[1580, 42, 773, 16, 92, "Input"],
Cell[2356, 60, 96, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[2477, 65, 407, 8, 52, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[2887, 75, 6091, 136, 372, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[8993, 214, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[9112, 219, 318, 8, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[9433, 229, 8465, 202, 612, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[17913, 434, 149, 2, 25, "Input"],
Cell[CellGroupData[{
Cell[18087, 440, 260, 6, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[18350, 448, 16295, 385, 1004, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[34660, 836, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[34779, 841, 836, 14, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[35618, 857, 14777, 302, 792, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[50410, 1162, 96, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[50531, 1167, 802, 13, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[51336, 1182, 9178, 185, 372, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[60529, 1370, 92, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[60646, 1375, 881, 14, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[61530, 1391, 20911, 440, 1512, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[82456, 1834, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[82575, 1839, 814, 13, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[83392, 1854, 19110, 392, 1532, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[102517, 2249, 92, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[102634, 2254, 798, 13, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[103435, 2269, 10600, 217, 372, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[114050, 2489, 248, 3, 25, "Input"],
Cell[CellGroupData[{
Cell[114323, 2496, 816, 13, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[115142, 2511, 16068, 317, 1152, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[131225, 2831, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[131344, 2836, 1192, 21, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[132539, 2859, 20587, 437, 891, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[153141, 3299, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[153260, 3304, 1282, 23, 52, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[154545, 3329, 49146, 1116, 2540, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[203706, 4448, 96, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[203827, 4453, 867, 14, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[204697, 4469, 13539, 263, 712, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[218251, 4735, 92, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[218368, 4740, 914, 14, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[219285, 4756, 19875, 403, 1232, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[239175, 5162, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[239294, 5167, 953, 15, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[240250, 5184, 24574, 533, 1252, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[264839, 5720, 96, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[264960, 5725, 995, 17, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[265958, 5744, 14611, 308, 612, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[280584, 6055, 94, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[280703, 6060, 951, 16, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[281657, 6078, 12868, 267, 512, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[294540, 6348, 92, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[294657, 6353, 881, 15, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[295541, 6370, 30030, 651, 1912, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[325586, 7024, 92, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[325703, 7029, 865, 14, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[326571, 7045, 31072, 673, 1992, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[357658, 7721, 92, 1, 25, "Input"],
Cell[CellGroupData[{
Cell[357775, 7726, 862, 14, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[358640, 7742, 10741, 213, 452, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[369396, 7958, 406, 10, 21, "Message"],
Cell[369805, 7970, 408, 10, 21, "Message"],
Cell[370216, 7982, 408, 10, 21, "Message"],
Cell[370627, 7994, 406, 10, 21, "Message"],
Cell[371036, 8006, 343, 9, 21, "Message"],
Cell[371382, 8017, 406, 10, 21, "Message"],
Cell[371791, 8029, 408, 10, 21, "Message"],
Cell[372202, 8041, 345, 9, 21, "Message"],
Cell[372550, 8052, 92, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[372667, 8057, 973, 16, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[373643, 8075, 70869, 1533, 4312, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[444527, 9611, 94, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[444646, 9616, 951, 16, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[445600, 9634, 45594, 944, 3032, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[491209, 10581, 92, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[491326, 10586, 9433, 239, 872, "Input"],
Cell[500762, 10827, 645, 19, 48, "Output"],
Cell[501410, 10848, 127, 2, 31, "Output"],
Cell[501540, 10852, 443, 14, 48, "Output"],
Cell[501986, 10868, 124, 2, 31, "Output"],
Cell[502113, 10872, 123, 2, 31, "Output"],
Cell[502239, 10876, 126, 2, 31, "Output"],
Cell[502368, 10880, 886, 27, 48, "Output"],
Cell[503257, 10909, 465, 10, 21, "Message"]
}, Open  ]],
Cell[503737, 10922, 94, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[503856, 10927, 603, 11, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[504462, 10940, 11717, 243, 732, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[516194, 11186, 92, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[516311, 11191, 814, 12, 31, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[517128, 11205, 7095, 128, 172, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[524238, 11336, 92, 1, 25, "Input"]
}
]
*)

(* End of internal cache information *)
