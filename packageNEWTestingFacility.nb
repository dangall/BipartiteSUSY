(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1397701,      30602]
NotebookOptionsPosition[   1384355,      30258]
NotebookOutlinePosition[   1384692,      30273]
CellTagsIndexPosition[   1384649,      30270]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"CurrentValue", "[", 
    RowBox[{"$FrontEnd", ",", "\"\<ClearEvaluationQueueOnKernelQuit\>\""}], 
    "]"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"SetOptions", "[", 
   RowBox[{"$FrontEnd", ",", 
    RowBox[{
    "\"\<ClearEvaluationQueueOnKernelQuit\>\"", "\[Rule]", "False"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"allbft1kasteleyns", "=", 
    RowBox[{"<<", "allbft1kasteleyns"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"allbft2kasteleyns", "=", 
    RowBox[{"<<", "allbft2kasteleyns"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"allscatteringkasteleyns", "=", 
    RowBox[{"<<", "allscatteringkasteleyns"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"<<", "annoyingsmallexamples"}]}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.680936749950627*^9, 3.6809367529289207`*^9}, {
   3.6809494277220397`*^9, 3.6809494359161243`*^9}, {3.6809502871251383`*^9, 
   3.6809503204036846`*^9}, 3.6845604567157564`*^9, 3.684560498101055*^9, 
   3.6845605600539923`*^9, {3.684561322369362*^9, 3.6845613237849407`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580188155656`*^9, 3.6809580190545444`*^9}, 
   3.684561319861355*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "getNumberFaces"}], ",", " ",
    "getNumberExternalFaces", ",", " ", "getNumberInternalFaces", ",", " ", 
   "getInternalFaceLabels", ",", " ", "getExternalFaceLabels", ",", " ", 
   "getFaceLabels"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.6809580264274635`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bft1TestFaces", "[", 
    RowBox[{"{", 
     RowBox[{"aa_", ",", "bb_", ",", "cc_", ",", "dd_"}], "}"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "When", " ", "we", " ", "count", " ", "faces", " ", "we", " ", "need", 
        " ", "to", " ", "remove", " ", "those", " ", "edges", " ", "which", 
        " ", 
        RowBox[{"don", "'"}], "t", " ", "participate", " ", "in", " ", "any", 
        " ", "perfect", " ", "matchings"}], ",", " ", 
       RowBox[{
       "in", " ", "case", " ", "they", " ", "happen", " ", "to", " ", "form", 
        " ", "an", " ", "extra", " ", "face"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{"higgsEdgesBFT", "[", 
        RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd", ",", 
         RowBox[{"consistentEdgeRemoval", "[", 
          RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd", ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{"{", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}], "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"getNumberFaces", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
             RowBox[{
              RowBox[{"getNumberInternalFaces", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "+", 
              RowBox[{"getNumberExternalFaces", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}]}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"perfectMatchings", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
               "\[NotEqual]", 
               RowBox[{"{", "}"}]}], "&&", 
              RowBox[{
               RowBox[{
                RowBox[{"getNumberFaces", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "-", 
                "1"}], ">", 
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{"matchingPolytope", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                "]"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with counting faces!\>\""}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<and {aa,bb,cc,dd}=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"getFaceLabels", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "=!=", 
            RowBox[{"Sort", "[", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"getInternalFaceLabels", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
               RowBox[{"getExternalFaceLabels", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the face labels! The internal \
and external face lables do not togehter form all face labels\>\""}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<and {aa,bb,cc,dd}=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bft1TestFaces", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"bft1TestFaces", ",", "allbft1kasteleyns"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"bft1TestFaces", ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6809368673042316`*^9, 3.6809369642578907`*^9}, {
   3.6809373036755733`*^9, 3.680937320393875*^9}, {3.68094945328999*^9, 
   3.6809494551585407`*^9}, {3.680949567555023*^9, 3.6809496049332643`*^9}, {
   3.680949641164015*^9, 3.680949650602211*^9}, {3.6809500858928022`*^9, 
   3.6809500860894055`*^9}, {3.680953204512086*^9, 3.680953281020768*^9}, 
   3.680953323091693*^9, 3.6809533619719105`*^9, {3.6809536983983207`*^9, 
   3.680953723634925*^9}, {3.6809537973310194`*^9, 3.6809538183646946`*^9}, {
   3.6809538527826324`*^9, 3.6809538572553144`*^9}, 3.6809580264274635`*^9, {
   3.684560528346801*^9, 3.6845607041956577`*^9}, {3.684561524712669*^9, 
   3.684561526427541*^9}, {3.68456158650616*^9, 3.684561600073309*^9}, {
   3.68456541057578*^9, 3.6845654823915157`*^9}, 3.68456558226375*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.685886306615547*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809538659790955`*^9, 3.680953866166606*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "turnIntoWeightedAdjacencyMatrix"}], 
   ",", " ", "turnIntoAdjacencyMatrix", ",", " ", "turnIntoGraph"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.6809580374065695`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestAdjacencyMatricesAndGraph", "[", 
    RowBox[{"{", 
     RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"graphwithedges", ",", "graphnoedges"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"WeightedGraphQ", "[", 
           RowBox[{"WeightedAdjacencyGraph", "[", 
            RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}],
           "\[Equal]", "False"}], "||", 
         RowBox[{
          RowBox[{"GraphQ", "[", 
           RowBox[{"AdjacencyGraph", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "/.", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "\[Rule]", "1"}], "&"}], ",", 
                 RowBox[{"Variables", "[", 
                  RowBox[{"Join", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                  "]"}]}], "]"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"\[Infinity]", "\[Rule]", "0"}], "}"}]}], "]"}], "]"}], 
          "\[Equal]", "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the Weighted adjacency matrix! It \
does not form a valid weighted graph\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", 
          RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "=!=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}], ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the Weighted adjacency matrix! Its \
size is wrong\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"GraphQ", "[", 
          RowBox[{"AdjacencyGraph", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}], 
         "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the normal adjacency matrix! It \
does not form a valid graph\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "=!=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}], ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the normal adjacency matrix! Its \
size is wrong\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"turnIntoWeightedAdjacencyMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "/.", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "\[Rule]", "1"}], "&"}], ",", 
               RowBox[{"Variables", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
              "]"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"\[Infinity]", "\[Rule]", "0"}], "}"}]}], ")"}], "=!=", 
         RowBox[{"turnIntoAdjacencyMatrix", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the adjacency matrices! \
turnIntoWeightedAdjacencyMatrix doesn't correspond to turnIntoAdjacencyMatrix\
\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graphwithedges", "=", 
       RowBox[{"turnIntoGraph", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graphnoedges", "=", 
       RowBox[{"turnIntoGraph", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"GraphQ", "[", "graphwithedges", "]"}], "\[Equal]", 
          "False"}], "||", 
         RowBox[{
          RowBox[{"GraphQ", "[", "graphnoedges", "]"}], "\[Equal]", 
          "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with turnIntoGraph! It doesn't produce a \
valid graph\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestAdjacencyMatricesAndGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"allTestAdjacencyMatricesAndGraph", ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"allTestAdjacencyMatricesAndGraph", ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
   "allTestAdjacencyMatricesAndGraph", ",", "allscatteringkasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{"allTestAdjacencyMatricesAndGraph", ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6809501524175406`*^9, 3.6809502773276024`*^9}, {
   3.680953890358967*^9, 3.6809538935656924`*^9}, {3.680954262356439*^9, 
   3.6809542746316233`*^9}, 3.6809580374065695`*^9, {3.6845616110498343`*^9, 
   3.6845617304827843`*^9}, {3.684561806666645*^9, 3.684561820680134*^9}, {
   3.684561882080971*^9, 3.684561883680973*^9}, 3.684565624592127*^9, 
   3.68457695304594*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.68589124847528*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809547750940943`*^9, 3.6809547751724873`*^9}, {
  3.6809548811659465`*^9, 3.6809548817128515`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "getDuplicateEdges"}], ",", 
   " ", "getEdgesBFTformQ"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.68095806299942*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestChecksKasteleyn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"messuprule", ",", "duplicatingrule"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"(", 
           RowBox[{"getEdgesBFTformQ", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"edge_", "?", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "=!=", "List"}], " ", "&"}], ")"}]}], "[", 
                 RowBox[{"ind1_", ",", "ind2_"}], "]"}], "\[RuleDelayed]", 
                SubscriptBox["edge", 
                 RowBox[{"ind1", ",", "ind2"}]]}], "}"}]}], ")"}]}], ")"}], 
          ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"bftlabeling", "\[Equal]", "False"}], "&&", 
           RowBox[{"getEdgesBFTformQ", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ")"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getEdgesBFTformQ! It doesn't \
complain even when all the edges are \!\(\*SubscriptBox[\(X\), \(i, j\)]\) \
rather than X[i,j]\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"messuprule", "=", 
       RowBox[{
        RowBox[{"Last", "[", 
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"Variables", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"edge_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "=!=", "List"}], " ", "&"}], ")"}]}], "[", 
             RowBox[{"ind1_", ",", "ind2_"}], "]"}], "\[RuleDelayed]", 
            SubscriptBox["edge", 
             RowBox[{"ind1", ",", "ind2"}]]}], "}"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{"(", 
          RowBox[{"getEdgesBFTformQ", "[", 
           RowBox[{
            RowBox[{"a", "/.", "messuprule"}], ",", 
            RowBox[{"b", "/.", "messuprule"}], ",", 
            RowBox[{"c", "/.", "messuprule"}], ",", 
            RowBox[{"d", "/.", "messuprule"}]}], "]"}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getEdgesBFTformQ! It doesn't \
complain even when an edge is \!\(\*SubscriptBox[\(X\), \(i, j\)]\) rather \
than X[i,j]\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"getEdgesBFTformQ", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "\[Equal]", 
          "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getEdgesBFTformQ! It complains even \
though all the edges are of the form X[i,j]\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getDuplicateEdges", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getDuplicateEdges! It claims we \
have duplicate edges in this Kastelen\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"duplicatingrule", "=", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"Last", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"getDuplicateEdges", "[", 
           RowBox[{
            RowBox[{"a", "/.", "duplicatingrule"}], ",", 
            RowBox[{"b", "/.", "duplicatingrule"}], ",", 
            RowBox[{"c", "/.", "duplicatingrule"}], ",", 
            RowBox[{"d", "/.", "duplicatingrule"}]}], "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Last", "[", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "b", "]"}], ",", 
              RowBox[{"Variables", "[", "c", "]"}], ",", 
              RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}], "}"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Variables", "[", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}], "]"}],
           ">", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getDuplicateEdges! It doesn't spot \
a duplicated edge\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"duplicatingrule", "=", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}]}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"Last", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Variables", "[", "b", "]"}], ",", 
           RowBox[{"Variables", "[", "a", "]"}], ",", 
           RowBox[{"Variables", "[", "c", "]"}]}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"getDuplicateEdges", "[", 
           RowBox[{
            RowBox[{"a", "/.", "duplicatingrule"}], ",", 
            RowBox[{"b", "/.", "duplicatingrule"}], ",", 
            RowBox[{"c", "/.", "duplicatingrule"}], ",", 
            RowBox[{"d", "/.", "duplicatingrule"}]}], "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Last", "[", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "b", "]"}], ",", 
              RowBox[{"Variables", "[", "a", "]"}], ",", 
              RowBox[{"Variables", "[", "c", "]"}]}], "]"}], "]"}], "}"}]}], "&&", 
         RowBox[{
          RowBox[{"duplicatingrule", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=!=", 
          RowBox[{"duplicatingrule", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Variables", "[", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}], "]"}],
           ">", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getDuplicateEdges! It doesn't spot \
a duplicated edge\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"getKasteleynConsistencyViolation", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getKasteleynConsistencyViolation! \
It's finding problems where there are none, by claimimng some rows or columns \
don't have the right cyclic structure\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Variables", "[", "a", "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"zz", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
              RowBox[{"zz", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}], "=!=", 
          RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"messuprule", "=", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "a", "]"}], ",", 
              RowBox[{"zz_", "/;", 
               RowBox[{
                RowBox[{"zz", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
                RowBox[{"zz", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}], "]"}], 
           "\[Rule]", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"Variables", "[", "a", "]"}], ",", 
               RowBox[{"zz_", "/;", 
                RowBox[{
                 RowBox[{"zz", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
                 RowBox[{"zz", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"Length", ",", 
               RowBox[{"getKasteleynConsistencyViolation", "[", 
                RowBox[{
                 RowBox[{"a", "/.", "messuprule"}], ",", 
                 RowBox[{"b", "/.", "messuprule"}], ",", 
                 RowBox[{"c", "/.", "messuprule"}], ",", 
                 RowBox[{"d", "/.", "messuprule"}]}], "]"}]}], "]"}], "]"}], 
            "\[LessEqual]", "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with \
getKasteleynConsistencyViolation! It's finding problems where there are none, \
by claimimng some rows or columns don't have the right cyclic \
structure\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getKasteleynCheckQ", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}], 
         "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getKasteleynCheckQ! It claims there \
are duplicate edges in the Kasteleyn\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"bftlabeling", "===", "True"}], "&&", 
         RowBox[{
          RowBox[{"getKasteleynCheckQ", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}], 
          "\[Equal]", "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getKasteleynCheckQ! It claims \
there's something wrong with the Kasteleyn\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestChecksKasteleyn", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestChecksKasteleyn", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6809548359029303`*^9, 3.6809548771314993`*^9}, 
   3.6809549575141845`*^9, {3.6809550018475513`*^9, 3.680955016054621*^9}, {
   3.680955089907172*^9, 3.6809552826635556`*^9}, {3.6809553521551037`*^9, 
   3.680955424583268*^9}, {3.680955469919272*^9, 3.6809555127457175`*^9}, {
   3.6809563095784492`*^9, 3.680956390645215*^9}, {3.6809564545788746`*^9, 
   3.6809565398682613`*^9}, {3.680956594376968*^9, 3.680956631869005*^9}, {
   3.6809566953540554`*^9, 3.6809567201604347`*^9}, {3.6809567777217293`*^9, 
   3.6809567850952597`*^9}, {3.680956815128813*^9, 3.680956835314481*^9}, {
   3.6809568750363607`*^9, 3.6809568752554026`*^9}, {3.6809569281548967`*^9, 
   3.6809569470629773`*^9}, {3.680956983738322*^9, 3.6809570063447423`*^9}, {
   3.6809570615978966`*^9, 3.6809570812467613`*^9}, {3.6809571757589655`*^9, 
   3.6809572965056458`*^9}, {3.680957341166053*^9, 3.68095735222294*^9}, {
   3.680957393324005*^9, 3.6809574700091496`*^9}, 3.68095806299942*^9, {
   3.68456187513946*^9, 3.6845618898919077`*^9}, {3.684565633377084*^9, 
   3.684565634568331*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.68589561922722*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958051477315*^9, 3.6809580516023474`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "perfectMatchings"}], ",", 
   " ", "matchingPolytope"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845771110976667`*^9, 
   3.684578169129551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"aa_", ",", "bb_", ",", "cc_", ",", "dd_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "a", ",", "b", ",", "c", ",", "d", ",", "perfsnoBFT", ",", 
       "perfsnochecknoBFT", ",", "matrixPchecknoBFT", ",", 
       "matrixPnochecknoBFT", ",", "perfscheckBFT", ",", "perfsnocheckBFT", 
       ",", "matrixPcheckBFT", ",", "matrixPnocheckBFT"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"XX_Symbol", "[", 
            RowBox[{"ind1_Integer", ",", "ind2_Integer"}], "]"}], "/;", 
           RowBox[{"(", 
            RowBox[{"XX", "=!=", "List"}], ")"}]}], "\[RuleDelayed]", 
          SubscriptBox["XX", 
           RowBox[{"{", 
            RowBox[{"ind1", ",", "ind2"}], "}"}]]}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfsnoBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfsnochecknoBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matrixPchecknoBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matrixPnochecknoBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "False"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{"{", 
        RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfscheckBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfsnocheckBFT", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "perfsnoBFT", "]"}], "=!=", 
          RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}], "=!=", 
          RowBox[{"Length", "[", "perfscheckBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Length", "[", "perfscheckBFT", "]"}], "=!=", 
          RowBox[{"Length", "[", "perfsnocheckBFT", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with perfectMatchings! It doesn't give \
the same number of perfect matchings irrespective of checking options\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matrixPcheckBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matrixPnocheckBFT", "=", 
       RowBox[{"matchingPolytope", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
         RowBox[{"(", 
          RowBox[{"bftlabeling", "/.", 
           RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPchecknoBFT", "]"}], "=!=", 
          RowBox[{"Dimensions", "[", "matrixPnochecknoBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPchecknoBFT", "]"}], "=!=", 
          RowBox[{"Dimensions", "[", "matrixPcheckBFT", "]"}]}], "||", 
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPcheckBFT", "]"}], "=!=", 
          RowBox[{"Dimensions", "[", "matrixPnocheckBFT", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! It doesn't have the \
same size irrespective of checking options\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "matrixPcheckBFT", "]"}], "=!=", 
         RowBox[{"Length", "[", 
          RowBox[{"Variables", "[", 
           RowBox[{"Join", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! It's Length is not the \
numnber of edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "matrixPcheckBFT", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=!=", 
         RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! It has a different \
number of columns than perfect matchings\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"perfsnocheckBFT", ",", 
               RowBox[{"Times", "@@", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Variables", "[", 
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                    "#"}], ",", "0"}], "]"}]}]}], "]"}], "&"}], ",", 
            RowBox[{"Transpose", "[", "matrixPcheckBFT", "]"}]}], "]"}], 
          "]"}], "=!=", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "perfsnochecknoBFT", "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getPmatrix! Its columns do not \
correspond to perfect matchings, i.e. the 1's are in the wrong places\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestPerfectMatchingsMatrixP", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPerfectMatchingsMatrixP", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577117376279*^9, 
   3.684577126118273*^9}, {3.6845771775434*^9, 3.684577196731828*^9}, {
   3.6845774317136207`*^9, 3.6845774511807165`*^9}, {3.6845775890748835`*^9, 
   3.684577594016451*^9}, {3.68457762806287*^9, 3.6845776599138165`*^9}, {
   3.684578216468128*^9, 3.684578225636292*^9}, {3.6845785133518724`*^9, 
   3.6845786599941845`*^9}, 3.6845787822522287`*^9, {3.684578831686072*^9, 
   3.6845788389014473`*^9}, {3.6845789830670347`*^9, 3.684578991074467*^9}, 
   3.6845790366649113`*^9, {3.6845792310247006`*^9, 3.6845792548635235`*^9}, {
   3.6845792858710604`*^9, 3.684579300094637*^9}, {3.684579339084278*^9, 
   3.6845793502639246`*^9}, {3.684579513111389*^9, 3.6845796137432575`*^9}, {
   3.684579699401449*^9, 3.6845797113456388`*^9}, {3.6845797785930214`*^9, 
   3.6845797898038454`*^9}, {3.6845798242101564`*^9, 
   3.6845798676406307`*^9}, {3.6845843383353357`*^9, 3.6845843516086607`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.685900658648052*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6845782513985415`*^9, 3.6845782515860577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "survivingPerfectMatchings"}],
   "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestSurvivingPerfectMatchings", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tokillvars", ",", "perfs", ",", "survivorscheck", ",", "survivors"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tokillvars", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"Min", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Variables", "[", 
                 RowBox[{"Join", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                "]"}], "/", "7"}], "]"}]}], "}"}], "]"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "tokillvars", "]"}], ">", "200"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tokillvars", "=", 
          RowBox[{"RandomSample", "[", 
           RowBox[{"tokillvars", ",", "200"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"survivorscheck", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Complement", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "perfs", "]"}], "]"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"perfs", "/.", "#"}], ",", "0"}], "]"}], "]"}]}], 
           "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", "tokillvars", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"survivors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"survivingPerfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "tokillvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"survivors", "=!=", "survivorscheck"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with survivingPerfectMatchings! It's not \
determining the correct set of surviving perfect-matching numbers\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestSurvivingPerfectMatchings", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSurvivingPerfectMatchings", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580289290621*^9, 3.68458029291835*^9}, {
   3.684584408317378*^9, 3.6845844145345173`*^9}, {3.6853526998749523`*^9, 
   3.685352733258518*^9}, {3.6853633611818333`*^9, 3.6853633636865587`*^9}, {
   3.685701441238188*^9, 3.68570144283689*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.685940001314584*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958054424649*^9, 3.680958054471553*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "matroidPolytope"}], ",", 
   " ", "moduliSpaceBFT", ",", " ", "turnIntoPolytope", ",", " ", 
   "dimensionPolytope", ",", " ", "lowNumberLoopsPMpos"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684577759576995*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPolytopesAndPMs", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "matroidpoly", ",", "moduligauging1", ",", 
       "loopvarsgauging1", ",", "moduligauging2", ",", "loopvarsgauging2", 
       ",", "dimmatroidpoly", ",", "dimmoduli1", ",", "dimmoduli2", ",", 
       "externalnodes"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"matroidpoly", "=", 
       RowBox[{"matroidPolytope", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"moduligauging1", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopvarsgauging1", "=", 
          RowBox[{"loopVariablesBasis", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"moduligauging2", "=", 
       RowBox[{"moduliSpaceBFT", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"loopvarsgauging2", "=", 
       RowBox[{"loopVariablesBasis", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "matroidpoly", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=!=", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the matroid polytope! Its number of \
columns is not equal to the number of perfect matchings\>\""}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dimmatroidpoly", "=", 
       RowBox[{"dimensionPolytope", "[", "matroidpoly", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dimmatroidpoly", "=!=", 
         RowBox[{"Length", "[", 
          RowBox[{"loopvarsgauging2", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"bftlabeling", "=!=", "False"}], "&&", 
            RowBox[{"dimmatroidpoly", "=!=", 
             RowBox[{"dimensionPolytope", "[", 
              RowBox[{
               RowBox[{"moduliLoopVariablesBFT", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}], 
               "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the matroid polytope! Its \
dimension does not correspond to that obtained from the loop variable basis\>\
\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"moduligauging2", "=!=", "matroidpoly"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with the moduli space Gauging 2! It's \
not equal to the matroid polytope\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Dimensions", "[", "moduligauging1", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "=!=", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli space Gauging 1! Its \
number of columns is not equal to the number of perfect matchings\>\""}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dimmoduli1", "=", 
          RowBox[{"dimensionPolytope", "[", "moduligauging1", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dimmoduli1", "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"loopvarsgauging1", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"bftlabeling", "=!=", "False"}], "&&", 
               RowBox[{"dimmoduli1", "=!=", 
                RowBox[{"dimensionPolytope", "[", 
                 RowBox[{
                  RowBox[{"moduliLoopVariablesBFT", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], 
                   "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli space Gauging 1! \
Its dimension does not correspond to that obtained from the loop variable \
basis\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"dimmoduli2", "=", 
       RowBox[{"dimensionPolytope", "[", "moduligauging2", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dimmoduli2", "\[NotEqual]", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"externalnodes", "=", 
          RowBox[{"getOrderingExternalNodesDefault", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dimmoduli2", "=!=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Variables", "[", 
                  RowBox[{"Join", "[", 
                   RowBox[{"b", ",", "c"}], "]"}], "]"}], "]"}], "-", 
                RowBox[{"Length", "[", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"ConnectedComponents", "[", 
                    RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     "]"}], ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "}"}],
                     "]"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"Alternatives", "@@", "externalnodes"}], ",", 
                    "___"}], "}"}]}], "]"}], "]"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], "\[Rule]", "0"}], "}"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with dimensionPolytope!\>\""}], "]"}],
             ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "perfs", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], ">", 
            RowBox[{"Length", "[", 
             RowBox[{"Subsets", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"Length", "[", "c", "]"}], "+", 
                 RowBox[{
                  RowBox[{"Dimensions", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"getSourceEdges", "[", 
                  RowBox[{"b", ",", "c", ",", 
                   RowBox[{"perfs", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "}"}]}], 
              "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with turnIntoPolytope! It claims that \
the matroid polytope has more points than Plucker coordinates\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", "matroidpoly", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with turnIntoPolytope! The sum of \
multiplicities does not equal the number of point!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{
                RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", 
                  RowBox[{"Min", "[", 
                   RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
               "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Transpose", "[", "matroidpoly", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with lowNumberLoopsPMpos! It's not \
selecting the lowest possible number of loops\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Total", "[", 
                RowBox[{
                 RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                 "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               RowBox[{
                RowBox[{"Dimensions", "[", "moduligauging1", "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli space Gauging 1! \
The sum of multiplicities does not equal the number of point!\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", "moduligauging2", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", "moduligauging2", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli space Gauging 2! The \
sum of multiplicities does not equal the number of point!\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestPolytopesAndPMs", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPolytopesAndPMs", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.684578191390497*^9, 3.6845781986049185`*^9}, {3.6845844192324266`*^9, 
   3.684584427039625*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.686412638328169*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580548468485`*^9, 3.680958054893749*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "reducibilityBFTQ"}], ",", 
   " ", "reducibilityBFTedges"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, {
   3.685861536515818*^9, 3.685861536619719*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestReducibilityBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "reducib1", ",", "reducib2", ",", "reducib1Q", ",", "reducibedges1", 
       ",", "reducib2Q", ",", "reducibedges2", ",", "perfs", ",", 
       "removeuselessedgesgauging1", ",", "removeuselessedgesgauging2"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reducib1", "=", 
          RowBox[{"reducibilityBFTedges", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "reducib1", "]"}], "=!=", "List"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibilityBFTedges! It's not \
returning a list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"reducib1Q", "=", 
          RowBox[{"reducibilityBFTQ", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"reducibedges1", "=", "reducib1"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"reducib1Q", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "reducibedges1", "]"}], "\[Equal]", 
               "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibility! It claims \
reducibility without having any edges that can be removed\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "reducibedges1", "]"}], 
               "\[GreaterEqual]", "1"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibility! It claims that \
it's not reducible yet there are edges that can be removed without affecting \
the moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"reducib2", "=", 
       RowBox[{"reducibilityBFTedges", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
         "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "reducib2", "]"}], "=!=", "List"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with reducibilityBFTedges! It's not \
returning a list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reducib2Q", "=", 
       RowBox[{"reducibilityBFTQ", "[", 
        RowBox[{
        "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
         "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"reducibedges2", "=", "reducib2"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"reducib2Q", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "reducibedges2", "]"}], "\[Equal]", "0"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibility! It claims \
reducibility without having any edges that can be removed\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "reducibedges2", "]"}], "\[GreaterEqual]", 
            "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibility! It claims that \
it's not reducible yet there are edges that can be removed without affecting \
the moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"perfs", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"removeuselessedgesgauging1", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
               RowBox[{"reducibilityBFTedges", "[", 
                RowBox[{
                "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", 
                 ",", "True"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"turnIntoPolytope", "[", 
                  RowBox[{"moduliSpaceBFT", "[", 
                   RowBox[{
                   "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", 
                    ",", "True"}], "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"turnIntoPolytope", "[", 
                  RowBox[{"Transpose", "[", 
                   RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False",
                     ",", "True"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"survivingPerfectMatchings", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", 
                    "removeuselessedgesgauging1"}], "]"}], "]"}], "]"}], 
                   "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 1! Removing the edges that it says can be removed actually decreases \
the number of points in the moduli space\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"removeuselessedgesgauging2", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
            RowBox[{"reducibilityBFTedges", "[", 
             RowBox[{
             "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
              "False"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", 
               RowBox[{"moduliSpaceBFT", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}], 
               "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"turnIntoPolytope", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"moduliSpaceBFT", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                   "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"survivingPerfectMatchings", "[", 
                   RowBox[{
                   "a", ",", "b", ",", "c", ",", "d", ",", 
                    "removeuselessedgesgauging2"}], "]"}], "]"}], "]"}], 
                "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 2! Removing the edges that it says can be removed actually decreases \
the number of points in the moduli space\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"reducibilityBFTedges", "[", 
                RowBox[{
                "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", 
                 ",", "True"}], "]"}], "=!=", 
               RowBox[{"Variables", "[", 
                RowBox[{"joinupKasteleyn", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 1! When there are no perfect matchings it should match ALL \
edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"reducibilityBFTedges", "[", 
             RowBox[{
             "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
              "False"}], "]"}], "=!=", 
            RowBox[{"Variables", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              
              "\"\< : There's a problem with reducibilityBFTedges using \
Gauging 2! When there are no perfect matchings it should match ALL \
edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestReducibilityBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allbft1kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", "allbft2kasteleyns"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    "allscatteringkasteleyns"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReducibilityBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.684584433151743*^9, 3.684584445173649*^9}, {
   3.686482202985506*^9, 3.686482219754404*^9}, {3.6865656508637733`*^9, 
   3.6865656612134666`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6865696021439867`*^9, 3.686569640740512*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958053346465*^9, 3.680958053377736*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "consistentEdgeRemoval"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestconsistentEdgeRemoval", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tokillvars", ",", "killededges", ",", "tozero", ",", "extrakillpos", 
       ",", "remainingvars"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tokillvars", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"Min", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Variables", "[", 
                 RowBox[{"Join", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                "]"}], "/", "2"}], "]"}]}], "}"}], "]"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "tokillvars", "]"}], ">", "20"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tokillvars", "=", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"tokillvars", ",", 
             RowBox[{"Round", "[", 
              RowBox[{
               RowBox[{"Length", "[", "tokillvars", "]"}], "/", "20"}], 
              "]"}]}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"killededges", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"consistentEdgeRemoval", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "tokillvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tozero", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", "tokillvars", ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extrakillpos", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"#", ",", 
             RowBox[{"ConstantArray", "[", 
              RowBox[{"0", ",", 
               RowBox[{
                RowBox[{"Dimensions", "[", "#", "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "]"}], 
          "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"matchingPolytope", "[", 
             RowBox[{
              RowBox[{"a", "/.", "#"}], ",", 
              RowBox[{"b", "/.", "#"}], ",", 
              RowBox[{"c", "/.", "#"}], ",", "d"}], "]"}], "&"}], ",", 
           "tozero"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"remainingvars", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Variables", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"a", "/.", "#"}], ",", 
             RowBox[{"b", "/.", "#"}], ",", 
             RowBox[{"c", "/.", "#"}]}], "]"}], "]"}], "&"}], ",", "tozero"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#1", "[", 
             RowBox[{"[", "#2", "]"}], "]"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"remainingvars", ",", "extrakillpos"}], "}"}]}], "]"}], "=!=", 
         RowBox[{"MapThread", "[", 
          RowBox[{"Complement", ",", 
           RowBox[{"{", 
            RowBox[{"killededges", ",", "tokillvars"}], "}"}]}], "]"}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with consistentEdgeRemoval! It doesn't \
seem to be adding the correc additional edges\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestconsistentEdgeRemoval", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestconsistentEdgeRemoval", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.6856843466862793`*^9, 
   3.6856843478399677`*^9}, {3.685684618551756*^9, 3.6856846249925737`*^9}, 
   3.686558422829887*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.686611212972906*^9, 3.6868964307260323`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6845773940653725`*^9, 3.684577397198944*^9}, {
   3.684577456458424*^9, 3.6845774575523963`*^9}, 3.6845775496856365`*^9, 
   3.6845776377975335`*^9, {3.6845782312264123`*^9, 3.6845782315076885`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "reductionGraphBFT"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestReductionGraphBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "reductiongauging1", ",", "moduligauging1", ",", "perfs", ",", 
       "reductiongauging2", ",", "moduligauging2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"bftlabeling", "===", "True"}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"reducibilityBFTedges", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], "]"}], 
           "]"}], "\[LessEqual]", "8"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reductiongauging1", "=", 
          RowBox[{"reductionGraphBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "bftlabeling"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"moduligauging1", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
            "bftlabeling"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reducibilityBFTQ", "[", 
            RowBox[{
            "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
             "True"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging1", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is reducible and yet reductionGraphBFT returns an empty \
list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging1", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is not reducible and yet reductionGraphBFT does not \
return an empty list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";", "a"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"And", "@@", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"survivingPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}]}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                   "reductiongauging1"}], "]"}]}], ")"}], "===", "False"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! Acting out on the reduction decreases the number of points in the \
moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"reducibilityBFTedges", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
         "\[LessEqual]", "8"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reductiongauging2", "=", 
          RowBox[{"reductionGraphBFT", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
            "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"moduligauging2", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reducibilityBFTQ", "[", 
            RowBox[{
            "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False", ",", 
             "True"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging2", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is reducible and yet reductionGraphBFT returns an empty \
list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reductiongauging2", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 1! The graph is not reducible and yet reductionGraphBFT does not \
return an empty list\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"bftlabeling", "=!=", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"perfs", "=", 
             RowBox[{"perfectMatchings", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"And", "@@", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging2", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"survivingPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}]}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging2", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                   "reductiongauging2"}], "]"}]}], ")"}], "===", "False"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reductionGraphBFT under \
Gauging 2! Acting out on the reduction decreases the number of points in the \
moduli space\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestReductionGraphBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductionGraphBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, {3.684648317203306*^9, 3.6846483756137633`*^9}, {
   3.684648405830348*^9, 3.684648471870284*^9}, {3.684648515476287*^9, 
   3.6846486547138352`*^9}, {3.6846486849241643`*^9, 
   3.6846488044910727`*^9}, {3.684653008260338*^9, 3.684653040932087*^9}, {
   3.684653127758386*^9, 3.6846531642077336`*^9}, {3.684654380524395*^9, 
   3.684654384558196*^9}, 3.6856843641781387`*^9, {3.685684639223373*^9, 
   3.6856846428008957`*^9}, 3.686569574572535*^9, {3.687064974264567*^9, 
   3.6870649744090014`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6870112496135073`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580552781534`*^9, 3.680958055309431*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", 
    RowBox[{"edgeOrderings", ".", " ", "NB"}], " ", "the", " ", "function", 
    " ", "must", " ", "be", " ", "copied", " ", "from", " ", "the", " ", 
    "package"}], ",", " ", 
   RowBox[{"because", " ", 
    RowBox[{"it", "'"}], "s", " ", "currently", " ", "in", " ", "the", " ", 
    "Private", " ", 
    RowBox[{"context", "!"}]}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648252238911*^9, 
   3.6846532874026117`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"edgeOrderings", "[", 
    RowBox[{"edges_", ",", "currentedge_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"orderings", ",", "ii"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Start", " ", "with", " ", "our", " ", "current", " ", 
       RowBox[{"edge", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"orderings", "=", 
        RowBox[{"{", 
         RowBox[{"Cases", "[", 
          RowBox[{"edges", ",", "currentedge"}], "]"}], "}"}]}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"orderings", "=", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"edges", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "}"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "The", " ", "next", " ", "edge", " ", "should", " ", "have", " ", 
         "the", " ", "structure", " ", 
         RowBox[{
          RowBox[{"_", "[", 
           RowBox[{
            RowBox[{"currentedge", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}], ".", " ", 
          "There"}], " ", "may", " ", "however", " ", "be", " ", "multiple", 
         " ", "alternatives", " ", "of", " ", "this", " ", "type"}], ",", " ", 
        RowBox[{
        "and", " ", "not", " ", "all", " ", "of", " ", "them", " ", "are", 
         " ", "viable", " ", "edge", " ", "orderings", " ", "that", " ", 
         "all", " ", "match", " ", 
         RowBox[{"up", ".", " ", "For"}], " ", "for", " ", "each", " ", 
         "alternative"}], ",", " ", 
        RowBox[{
        "try", " ", "it", " ", "out", " ", "by", " ", "adding", " ", "this", 
         " ", "alternative", " ", "onto", " ", 
         RowBox[{
          RowBox[{"{", "currentedge", "}"}], ".", " ", "Ultimately"}], " ", 
         "we", " ", "only", " ", "want", " ", "to", " ", "keep", " ", "those",
          " ", "alternatives", " ", "that", " ", "match", " ", 
         RowBox[{"up", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"ii", "=", "1"}], ",", 
        RowBox[{"ii", "<", 
         RowBox[{"Length", "[", "edges", "]"}]}], ",", 
        RowBox[{"ii", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "orderings", " ", "contains", " ", "a", " ", "list", " ", "of", " ", 
           RowBox[{"orderings", ".", " ", "In"}], " ", "each", " ", "case"}], 
          ",", " ", 
          RowBox[{
          "try", " ", "and", " ", "tag", " ", "on", " ", "another", " ", 
           "edge", " ", "that", " ", "makes", " ", 
           RowBox[{"sense", ".", " ", "If"}], " ", "there", " ", "are", " ", 
           "none", " ", "that", " ", "make", " ", "sense"}], ",", " ", 
          RowBox[{"this", " ", "chain", " ", "of", " ", "edges", " ", 
           RowBox[{"wasn", "'"}], "t", " ", "a", " ", "viable", " ", "option",
            " ", "for", " ", "edge", " ", "orderings"}], ",", " ", 
          RowBox[{
          "and", " ", "this", " ", "thread", " ", "will", " ", "get", " ", 
           "killed", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
              "because", " ", "the", " ", "MapThread", " ", "function", " ", 
               "will", " ", "take", " ", "an", " ", "empty", " ", "list"}], 
              ",", " ", 
              RowBox[{
              "and", " ", "it", " ", "will", " ", "Map", " ", "a", " ", 
               "Join", " ", "function", " ", "on", " ", "each", " ", 
               "element", " ", "of", " ", "the", " ", "empty", " ", "list"}], 
              ",", " ", 
              RowBox[{"which", " ", "returns", " ", "an", " ", "empty", " ", 
               RowBox[{"list", ".", " ", "\"\<Sequence\>\""}], " ", "then", 
               " ", "destroys", " ", "it"}]}], ")"}], "."}]}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"orderings", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Sequence", "@@", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"input1", ",", "input2"}], "}"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"input1", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "input2"}], 
                  "]"}]}], "]"}], "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"orderings", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Complement", "[", 
                    RowBox[{"edges", ",", "#"}], "]"}], ",", 
                   RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}]}], 
                  "]"}], "&"}], ",", "orderings"}], "]"}]}], "}"}]}], "]"}]}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"orderings", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"RotateLeft", ",", "orderings"}], "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"orderings", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"RotateLeft", "[", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"#", ",", "currentedge"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
         "orderings"}], "]"}]}], ";", "\[IndentingNewLine]", "orderings"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bft1TestEdgeOrderings", "[", 
    RowBox[{"{", 
     RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "kasteleyn", ",", "transposekast", ",", "nonzerorows", ",", 
       "nonzerocolumns"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"transposekast", "=", 
       RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nonzerorows", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"kasteleyn", ",", 
         RowBox[{"{", 
          RowBox[{"___", ",", 
           RowBox[{"Except", "[", "0", "]"}], ",", "___"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"nonzerocolumns", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"transposekast", ",", 
         RowBox[{"{", 
          RowBox[{"___", ",", 
           RowBox[{"Except", "[", "0", "]"}], ",", "___"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "\[Equal]", 
                RowBox[{"ConstantArray", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Variables", "[", "#2", "]"}], "]"}], ",", 
                  RowBox[{"Length", "[", "#1", "]"}]}], "]"}]}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"Length", ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "nonzerorows"}], "]"}]}], "]"}],
                   ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}], ",", "nonzerorows"}], 
               "}"}]}], "]"}]}], ")"}], "\[Equal]", "False"}], "||", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "\[Equal]", 
                RowBox[{"ConstantArray", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Variables", "[", "#2", "]"}], "]"}], ",", 
                  RowBox[{"Length", "[", "#1", "]"}]}], "]"}]}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"Length", ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "nonzerocolumns"}], "]"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}], ",", "nonzerocolumns"}], 
               "}"}]}], "]"}]}], ")"}], "\[Equal]", "False"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with edgeOrderings! It returns a list \
which doesn't have the right length\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "iii"], 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], 
                 "\[Equal]", "0"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"kasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "a", "]"}], "]"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}], ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], "\[Equal]", 
          "False"}], "||", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "iii"], 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], 
                 "\[Equal]", "0"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"edgeOrderings", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"transposekast", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "c"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}], ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], "\[Equal]", 
          "False"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with edgeOrderings! The index structure \
in the lists doesn't make sense\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bft1TestEdgeOrderings", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{"bft1TestEdgeOrderings", "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{"bft1TestEdgeOrderings", "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.684648345849888*^9, {3.684653359136537*^9, 
   3.68465341815114*^9}, {3.6846535243957367`*^9, 3.684653546732436*^9}, 
   3.684653591388288*^9, 3.684653644075118*^9, {3.6846537026572824`*^9, 
   3.684653774732584*^9}, {3.6846538803864202`*^9, 3.684653888625921*^9}, {
   3.6846539239122686`*^9, 3.684653979274121*^9}, {3.684654013367979*^9, 
   3.684654213546036*^9}, {3.6846542445896654`*^9, 3.684654244902182*^9}, {
   3.6846543533374057`*^9, 3.68465436969821*^9}, {3.684654422967018*^9, 
   3.6846544555183764`*^9}, {3.684654485808992*^9, 3.684654495557716*^9}, 
   3.685684369194261*^9, {3.685684653727685*^9, 3.685684718249609*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.68750451352931*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580556844263`*^9, 3.680958055700055*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "zigZagNumeratorsDenominators"}], 
   ",", " ", "zigZags", ",", " ", "selfIntersectingZigZagsQ", ",", " ", 
   "badDoubleCrossingZigZagPairs", ",", " ", "badDoubleCrossingZigZagQ", ",", 
   " ", 
   RowBox[{
    RowBox[{"zigZagsAsPerfectMatchings", ".", " ", "MAKE"}], " ", "SURE", " ",
     "threadJointheLists", " ", "IS", " ", "UP", " ", "TO", " ", "DATE", " ", 
    "IN", " ", "THIS", " ", 
    RowBox[{"CELL", "!"}]}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253158931*^9, 
   3.6846545539616823`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{
                    "--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "threadJointheLists", " ", "IS", " ", "TAKEN", " ", "FROM", " ", 
     "badDoubleCrossingZigZagPairs"}], ",", " ", 
    RowBox[{
    "AND", " ", "WE", " ", "NEED", " ", "TO", " ", "MAKE", " ", "SURE", " ", 
     RowBox[{"IT", "'"}], "S", " ", "EXACTLY", " ", "THE", " ", "SAME", " ", 
     "BEFORE", " ", "EVALUATING", " ", "THIS", " ", 
     RowBox[{
      RowBox[{"CELL", "!!"}], "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"-", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{
                    "--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetDirectory", "[", 
     RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
    RowBox[{"(", 
     RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
    RowBox[{"CloseKernels", "[", "]"}], ";", 
    RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
    RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"functionMemory", "=", "False"}], ";", 
    RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"allbft1kasteleyns", "=", 
     RowBox[{"<<", 
      RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"annoyingsmallexamples", "=", 
     RowBox[{"(", 
      RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"threadJointheLists", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"numerator", ",", "denominator"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"list1", ",", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "numerator", "]"}], "\[GreaterEqual]", 
             RowBox[{"Length", "[", "denominator", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list1", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{"numerator", ",", "numerator"}], "}"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"list2", "=", "denominator"}], ";"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{
             RowBox[{"list1", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{"denominator", ",", "denominator"}], "}"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"list2", "=", "numerator"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Interweave", " ", "the", " ", "two", " ", "lists"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"list1", "[", 
            RowBox[{"[", 
             RowBox[{"Range", "[", 
              RowBox[{"2", ",", 
               RowBox[{"2", 
                RowBox[{"Length", "[", "list2", "]"}]}], ",", "2"}], "]"}], 
             "]"}], "]"}], "=", "list2"}], ";", "\[IndentingNewLine]", 
          RowBox[{"list1", "=", 
           RowBox[{"PadRight", "[", 
            RowBox[{"list1", ",", 
             RowBox[{
              RowBox[{"Length", "[", "numerator", "]"}], "+", 
              RowBox[{"Length", "[", "denominator", "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
            "If", " ", "the", " ", "numerator", " ", "and", " ", "the", " ", 
             "denominator", " ", "had", " ", "the", " ", "same", " ", 
             "numnber", " ", "of", " ", "edges"}], ",", " ", 
            RowBox[{"we", " ", 
             RowBox[{"don", "'"}], "t", " ", "know", " ", "which", " ", 
             "edge", " ", "should", " ", "come", " ", "first"}], ",", " ", 
            RowBox[{"so", " ", 
             RowBox[{"we", "'"}], "ll", " ", "need", " ", "to", " ", "check", 
             " ", "that", " ", "the", " ", "index", " ", "structure", " ", 
             "is", " ", "all", " ", "correct"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "numerator", "]"}], "\[Equal]", 
             RowBox[{"Length", "[", "denominator", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"And", "@@", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Equal", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], "&"}], ",", "list1"}], "]"}],
                     "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", "2"}], "]"}]}], "]"}]}],
                  ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"The", " ", "index", " ", "structure", " ", 
                  RowBox[{"wasn", "'"}], "t", " ", "correct"}], ",", " ", 
                 RowBox[{
                 "and", " ", "we", " ", "should", " ", "have", " ", "started",
                   " ", "with", " ", "the", " ", "first", " ", "edge", " ", 
                  "in", " ", "the", " ", "denominator"}]}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Print", "[", "\"\<had to do it the opposite way!\>\"", 
                  "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"list1", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Transpose", "[", 
                   RowBox[{"{", 
                    RowBox[{"numerator", ",", "numerator"}], "}"}], "]"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"list2", "=", "denominator"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"list1", "[", 
                  RowBox[{"[", 
                   RowBox[{"Range", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"2", 
                    RowBox[{"Length", "[", "list2", "]"}]}], ",", "2"}], 
                    "]"}], "]"}], "]"}], "=", "list2"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"list1", "=", 
                 RowBox[{"PadRight", "[", 
                  RowBox[{"list1", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "numerator", "]"}], "+", 
                    RowBox[{"Length", "[", "list2", "]"}]}]}], "]"}]}], 
                ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"And", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Equal", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Partition", "[", 
                  RowBox[{
                   RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], "&"}], ",", "list1"}], "]"}],
                     "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", "2"}], "]"}]}], "]"}]}],
               ")"}], "\[Equal]", "False"}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<We somehow still messed up!\>\"", "]"}], 
             ";"}]}], "]"}], ";", "\[IndentingNewLine]", "list1"}]}], "]"}]}],
       "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"independentCyclicEdgeOrderings", "[", 
      RowBox[{"edges_", ",", "currentedge_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "listSubtraction", ",", "orderings", ",", "remainingedges", ",", "ii",
          ",", "removedduplicates"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "Make", " ", "a", " ", "function", " ", "that", " ", "takes", " ", 
         "a", " ", "list", " ", "and", " ", "subtracts", " ", "away", " ", 
         "the", " ", "elements", " ", "from", " ", "a", " ", "second", " ", 
         "list"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"listSubtraction", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"listtoremovefrom", ",", "listofremoveditems"}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"newlist", ",", "newremovelist", ",", "jj"}], "}"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"newlist", "=", "listtoremovefrom"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newremovelist", "=", "listofremoveditems"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"For", "[", 
               RowBox[{
                RowBox[{"jj", "=", "1"}], ",", 
                RowBox[{"jj", "\[LessEqual]", 
                 RowBox[{"Length", "[", "listofremoveditems", "]"}]}], ",", 
                RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"newlist", "=", 
                  RowBox[{"Delete", "[", 
                   RowBox[{"newlist", ",", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"newlist", ",", 
                    RowBox[{"newremovelist", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"newremovelist", "=", 
                  RowBox[{"Delete", "[", 
                   RowBox[{"newremovelist", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "newlist"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Start", " ", "with", " ", "our", " ", "current", " ", 
          RowBox[{"edge", "."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"orderings", "=", 
         RowBox[{"{", 
          RowBox[{"{", "currentedge", "}"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"In", " ", "each", " ", "ordering"}], ",", " ", 
          RowBox[{
          "we", " ", "have", " ", "used", " ", "up", " ", "a", " ", "certain",
            " ", "set", " ", "of", " ", "edges"}], ",", " ", 
          RowBox[{"so", " ", 
           RowBox[{"we", "'"}], "ll", " ", "also", " ", "keep", " ", "track", 
           " ", "of", " ", "which", " ", "edges", " ", "remain", " ", 
           "available", " ", "to", " ", "us"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"remainingedges", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"listSubtraction", "[", 
             RowBox[{"edges", ",", "#"}], "]"}], "&"}], ",", "orderings"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "The", " ", "next", " ", "edge", " ", "should", " ", "have", " ", 
           "the", " ", "structure", " ", 
           RowBox[{
            RowBox[{"_", "[", 
             RowBox[{
              RowBox[{"currentedge", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}], ".", " ", 
            "There"}], " ", "may", " ", "however", " ", "be", " ", "multiple",
            " ", "alternatives", " ", "of", " ", "this", " ", "type"}], ",", 
          " ", 
          RowBox[{
          "and", " ", "not", " ", "all", " ", "of", " ", "them", " ", "are", 
           " ", "viable", " ", "edge", " ", "orderings", " ", "that", " ", 
           "all", " ", "match", " ", 
           RowBox[{"up", ".", " ", "For"}], " ", "for", " ", "each", " ", 
           "alternative"}], ",", " ", 
          RowBox[{
          "try", " ", "it", " ", "out", " ", "by", " ", "adding", " ", "this",
            " ", "alternative", " ", "onto", " ", 
           RowBox[{
            RowBox[{"{", "currentedge", "}"}], ".", " ", "Ultimately"}], " ", 
           "we", " ", "only", " ", "want", " ", "to", " ", "keep", " ", 
           "those", " ", "alternatives", " ", "that", " ", "match", " ", 
           RowBox[{"up", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"ii", "=", "1"}], ",", 
          RowBox[{"ii", "<", 
           RowBox[{"Length", "[", "edges", "]"}]}], ",", 
          RowBox[{"ii", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"orderings", "=", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sequence", "@@", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"input1", ",", "input2"}], "}"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"input1", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "input2"}], 
                    "]"}]}], "]"}], "[", 
                 RowBox[{"#1", ",", 
                  RowBox[{"Cases", "[", 
                   RowBox[{"#2", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#1", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "_"}], "]"}]}], 
                   "]"}]}], "]"}]}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{"orderings", ",", "remainingedges"}], "}"}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"remainingedges", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"listSubtraction", "[", 
                RowBox[{"edges", ",", "#"}], "]"}], "&"}], ",", "orderings"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"removedduplicates", "=", 
            RowBox[{
             RowBox[{"GatherBy", "[", 
              RowBox[{
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"orderings", ",", "remainingedges"}], "}"}]}], 
                "]"}], ",", 
               RowBox[{
                RowBox[{"Product", "[", 
                 RowBox[{
                  SuperscriptBox[
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], 
                   RowBox[{
                    RowBox[{"2", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"iii", ",", "2"}], "]"}]}], "-", "1"}]], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
                "&"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"orderings", "=", 
            RowBox[{"removedduplicates", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"remainingedges", "=", 
            RowBox[{"removedduplicates", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "orderings"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"bft1TestZigZags", "[", 
      RowBox[{"{", 
       RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "zigzagnumdenom", ",", "zigzags", ",", "consistentIndexStructure", 
         ",", "allzigs", ",", "useless", ",", "zigzagaspm", ",", 
         "numpmsperpair", ",", "yieldedzigzags"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"zigzagnumdenom", "=", 
         RowBox[{"zigZagNumeratorsDenominators", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"zigzags", "=", 
         RowBox[{"zigZags", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"Power", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", 
                  RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}], ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Times", "@@", "#"}], "&"}], ",", "zigzagnumdenom", 
               ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "=!=", "zigzags"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem! The zig-zags from \
zigZagNumeratorsDenominators and zigZags don't match each other!\>\""}], 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"consistentIndexStructure", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"list1", ",", "list2"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", "consistent", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"consistent", "=", 
               RowBox[{"And", "@@", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[Equal]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                  RowBox[{"Partition", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], "&"}], ",", 
                    RowBox[{"threadJointheLists", "[", 
                    RowBox[{"list1", ",", "list2"}], "]"}]}], "]"}], ",", "2",
                     ",", "1"}], "]"}]}], "]"}]}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"consistent", "=!=", "True"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"consistent", "=", 
                  RowBox[{
                   RowBox[{"(", "consistent", ")"}], "||", 
                   RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[Equal]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], "&"}], ",", 
                    RowBox[{"threadJointheLists", "[", 
                    RowBox[{"list2", ",", "list1"}], "]"}]}], "]"}], ",", "2",
                     ",", "1"}], "]"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "consistent"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"consistentIndexStructure", "@@", "#"}], "&"}], ",", 
               "zigzagnumdenom"}], "]"}]}], ")"}], "=!=", "True"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagNumeratorsDenominators! The \
index structure of the zig-zags is not consistent\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"try1", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Product", "[", 
               RowBox[{
                SuperscriptBox[
                 RowBox[{"#", "[", 
                  RowBox[{"[", "iii", "]"}], "]"}], 
                 RowBox[{
                  RowBox[{"2", 
                   RowBox[{"Mod", "[", 
                    RowBox[{"iii", ",", "2"}], "]"}]}], "-", "1"}]], ",", 
                RowBox[{"{", 
                 RowBox[{"iii", ",", 
                  RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], "&"}], 
             ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"independentCyclicEdgeOrderings", "[", 
                 RowBox[{
                  RowBox[{"Join", "@@", "#"}], ",", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], 
               ",", "zigzagnumdenom"}], "]"}], ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"zigzagstoflip", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"try1", ",", "zigzags"}], "}"}]}], "]"}], ",", 
              "False"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"try2", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Product", "[", 
               RowBox[{
                SuperscriptBox[
                 RowBox[{"#", "[", 
                  RowBox[{"[", "iii", "]"}], "]"}], 
                 RowBox[{
                  RowBox[{"2", 
                   RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"iii", "+", "1"}], ",", "2"}], "]"}]}], "-", 
                  "1"}]], ",", 
                RowBox[{"{", 
                 RowBox[{"iii", ",", 
                  RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], "&"}], 
             ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"independentCyclicEdgeOrderings", "[", 
                 RowBox[{
                  RowBox[{"Join", "@@", "#"}], ",", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], 
               ",", 
               RowBox[{"zigzagnumdenom", "[", 
                RowBox[{"[", "zigzagstoflip", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"And", "@@", 
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"try2", ",", 
                   RowBox[{"zigzags", "[", 
                    RowBox[{"[", "zigzagstoflip", "]"}], "]"}]}], "}"}]}], 
                "]"}]}], ")"}], "\[Equal]", "False"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<kast=\>\"", ",", 
               RowBox[{"{", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
               "\"\< : There's a problem with zigZagNumeratorsDenominators! \
The index structure of the zig-zags is not consistent\>\""}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{"Join", "@@", 
               RowBox[{"zigzagnumdenom", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], "===", 
             RowBox[{"Sort", "[", 
              RowBox[{"Join", "@@", 
               RowBox[{"zigzagnumdenom", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "]"}], "===", 
             RowBox[{"Variables", "[", 
              RowBox[{"joinupKasteleyn", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
            ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagNumeratorsDenominators! \
Some edges are missing from the numerator or the denominator\>\""}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Times", "@@", "zigzags"}], ")"}], "=!=", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<kast=\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
            "\"\< : There's a problem with zigZags! The product of all \
zig-zags does not equal one\>\""}], "]"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"selfIntersectingZigZagsQ", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Intersection", "@@", "#"}], "]"}], "&"}], ",", 
               "zigzagnumdenom"}], "]"}], ",", 
             RowBox[{"zz_", "/;", 
              RowBox[{"zz", ">", "0"}]}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with selfIntersectingZigZagsQ! It \
claims that there are self-intersecting zig-zags even though no zig-zags run \
over the same edge twice (in opposite directions)\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", "input", "}"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "&"}], ",", "input"}], 
                    "]"}]}], "]"}], ">", "0"}]}], "]"}], "[", "#", "]"}], 
                "&"}], ",", 
               RowBox[{"badDoubleCrossingZigZagPairs", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}]}],
             ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with badDoubleCrossingZigZagPairs! It \
returns a pair of zig-zags that do not have a bad double crossing\>\""}], 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allzigs", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"threadJointheLists", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
           "zigzagnumdenom"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"And", "@@", "#"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[Equal]", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Partition", "[", 
                    RowBox[{"#", ",", "2", ",", "1"}], "]"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"threadJointheLists", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    "zigzagnumdenom"}], "]"}]}], "]"}], ",", 
                 RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ")"}], 
           "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with threadJointheLists! It's making \
zig-zags with a bad cyclic index structure!\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"allzigs", "=", 
         RowBox[{"allzigs", "/.", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", 
              RowBox[{"Join", "[", 
               RowBox[{"#", ",", "#"}], "]"}]}], "&"}], ",", 
            RowBox[{"Cases", "[", 
             RowBox[{"allzigs", ",", 
              RowBox[{"zz_", "/;", 
               RowBox[{
                RowBox[{"Intersection", "[", 
                 RowBox[{"zz", ",", 
                  RowBox[{"Variables", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "===", 
                RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Subsets", "[", 
              RowBox[{"allzigs", ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], ",", 
             RowBox[{"zz_", "/;", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Intersection", "[", 
                 RowBox[{
                  RowBox[{"Subsets", "[", 
                   RowBox[{
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                  RowBox[{"Subsets", "[", 
                   RowBox[{
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], ">", 
               "0"}]}]}], "]"}], "=!=", 
           RowBox[{"badDoubleCrossingZigZagPairs", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with badDoubleCrossingZigZagPairs! It \
doesn't find all possible bad-double-crossing pairs\>\""}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"badDoubleCrossingZigZagPairs", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ">", 
           "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"badDoubleCrossingZigZagQ", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "\[Equal]",
               "False"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with badDoubleCrossingZigZagQ! We \
have double-crossing pairs from badDoubleCrossingZigZagPairs, though \
badDoubleCrossingZigZagQ returns False\>\""}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"badDoubleCrossingZigZagQ", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<kast=\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                "\"\< : There's a problem with badDoubleCrossingZigZagQ! We \
do not have double-crossing pairs from badDoubleCrossingZigZagPairs, though \
badDoubleCrossingZigZagQ returns True\>\""}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"zigzagaspm", "=", 
         RowBox[{"zigZagsAsPerfectMatchings", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numpmsperpair", "=", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Map", "[", 
            RowBox[{"Length", ",", "zigzagaspm", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"numpmsperpair", "=!=", 
            RowBox[{"{", "2", "}"}]}], "&&", 
           RowBox[{"numpmsperpair", "=!=", 
            RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagsAsPerfectMatchings! It \
should return two perfect matchings for each zig-zag, but here it doesn't \
always do this\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"yieldedzigzags", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"DeleteDuplicates", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "/", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", "zigzagaspm", 
             ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "\[Equal]", "1"}], "||", 
                  RowBox[{"#", "\[Equal]", "0"}]}], ")"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{"Length", ",", "yieldedzigzags"}], "]"}]}], "]"}]}], 
            ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagsAsPerfectMatchings! The \
prefect matchings, when taken their ratio, do not always give the same \
expression for the zig-zag\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"And", "@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "===", "#2"}], "||", 
                 RowBox[{"#1", "===", 
                  RowBox[{"{", "}"}]}]}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"yieldedzigzags", ",", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", "zigzags", "}"}], "]"}]}], "}"}]}], "]"}]}], 
            ")"}], "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<kast=\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
             "\"\< : There's a problem with zigZagsAsPerfectMatchings! The \
prefect matchings, when taken their ratio, do not equal the expression for \
the zig-zag\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DistributeDefinitions", "[", "bft1TestZigZags", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{"bft1TestZigZags", ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"allbft1kasteleyns", ",", 
        RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{"bft1TestZigZags", ",", 
      RowBox[{"Cases", "[", 
       RowBox[{"annoyingsmallexamples", ",", 
        RowBox[{"zz_", "/;", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
          RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Quit", "[", "]"}]}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483432782288`*^9, {3.684654633672823*^9, 
   3.684654672925157*^9}, {3.684655157103376*^9, 3.6846551704875364`*^9}, {
   3.6846552228968625`*^9, 3.68465523897254*^9}, {3.6846580020771008`*^9, 
   3.6846580069642897`*^9}, {3.684658374492115*^9, 3.6846583892233295`*^9}, {
   3.684658433155861*^9, 3.6846584745248547`*^9}, {3.684658542837716*^9, 
   3.6846585432369785`*^9}, {3.684658594790456*^9, 3.6846586955828676`*^9}, {
   3.6846587549148717`*^9, 3.684658804862692*^9}, {3.684658912706405*^9, 
   3.6846589821353827`*^9}, {3.68465911877691*^9, 3.684659144223372*^9}, {
   3.684659174674801*^9, 3.684659244684067*^9}, {3.684659276722431*^9, 
   3.684659287713646*^9}, {3.6846596370655484`*^9, 3.6846596457096324`*^9}, {
   3.6846597050609016`*^9, 3.684659731023937*^9}, {3.684659774465824*^9, 
   3.6846598435294776`*^9}, {3.68466159444948*^9, 3.684661616097929*^9}, {
   3.684661663939406*^9, 3.684661721868502*^9}, {3.6846622020801086`*^9, 
   3.68466223410397*^9}, {3.6846624572909994`*^9, 3.6846624587221894`*^9}, {
   3.6846625114316893`*^9, 3.6846625148561735`*^9}, {3.6846625620622435`*^9, 
   3.6846626116371765`*^9}, {3.684662647348699*^9, 3.6846627440222816`*^9}, {
   3.6846627789205823`*^9, 3.6846628060922585`*^9}, 3.6856843831571007`*^9, {
   3.685684742108481*^9, 3.6856847738803167`*^9}, 3.687504113293584*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6875048345917892`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6809580560906982`*^9, 3.6809580561376004`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "loopVariablesBasis"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6846630298783827`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bftTestLoopVariablesBasis", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "pmatrix", ",", "traditionalmodulispace", ",", "basis", 
       ",", "indepinternalfaces", ",", "pmatdim", ",", "modulispacedim"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"perfs", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pmatrix", "=", 
          RowBox[{"matchingPolytope", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pmatdim", "=", 
          RowBox[{"dimensionPolytope", "[", "pmatrix", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"traditionalmodulispace", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"modulispacedim", "=", 
          RowBox[{"dimensionPolytope", "[", "traditionalmodulispace", "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"basis", "=", 
          RowBox[{"loopVariablesBasis", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Flatten", "[", "basis", "]"}], "]"}], "=!=", 
               "pmatdim"}], "&&", 
              RowBox[{
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{
                 RowBox[{"moduliLoopVariablesBFT", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                  "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", "pmatdim"}]}], 
             ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"basis", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               "modulispacedim"}], "&&", 
              RowBox[{
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{
                 RowBox[{"moduliLoopVariablesBFT", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                  "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
               "modulispacedim"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the loop variable basis! \
loopVariablesBasis doesn't give the right number of basis variables for \
gauging 2!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"traditionalmodulispace", "=", 
             RowBox[{"moduliSpaceBFT", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
               "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"basis", "=", 
             RowBox[{"loopVariablesBasis", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"indepinternalfaces", "=", 
             RowBox[{"getNumberInternalFaces", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getNumberExternalFaces", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
               "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"indepinternalfaces", "=", 
                RowBox[{"indepinternalfaces", "-", "1"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"modulispacedim", "=", 
             RowBox[{
             "dimensionPolytope", "[", "traditionalmodulispace", "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Flatten", "[", "basis", "]"}], "]"}], "=!=", 
                  "pmatdim"}], "&&", 
                 RowBox[{
                  RowBox[{"dimensionPolytope", "[", 
                   RowBox[{
                    RowBox[{"moduliLoopVariablesBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], 
                    "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", 
                  "pmatdim"}]}], ")"}], "||", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"basis", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", 
                "indepinternalfaces"}], "||", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"basis", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
                  "modulispacedim"}], "&&", 
                 RowBox[{
                  RowBox[{"dimensionPolytope", "[", 
                   RowBox[{
                    RowBox[{"moduliLoopVariablesBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "=!=", 
                  "modulispacedim"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the loop variable basis! \
loopVariablesBasis doesn't give the right number of basis variables for \
gauging 1!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bftTestLoopVariablesBasis", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestLoopVariablesBasis", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestLoopVariablesBasis", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestLoopVariablesBasis", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6846630427550173`*^9, 
   3.684663050037406*^9}, {3.684663089793779*^9, 3.684663261116503*^9}, {
   3.6846641768723793`*^9, 3.6846642154105864`*^9}, {3.684664266264132*^9, 
   3.684664335176717*^9}, {3.684664477164043*^9, 3.6846645134847364`*^9}, {
   3.684664552817524*^9, 3.6846645736040554`*^9}, {3.684664684162232*^9, 
   3.6846647112075806`*^9}, 3.685684388913218*^9, {3.6856848113051233`*^9, 
   3.685684837327673*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6875227138454943`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.680958056496975*^9, 3.680958056512599*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "moduliLoopVariablesBFT"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.684665345384*^9, 3.684665345774664*^9}, 3.6847526289869757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
       "loopvarbasis", ",", "traditionalmodulispace", ",", "loopperfs", ",", 
       "realperfs", ",", "pmatrix", ",", "toremove"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"perfs", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
            "loopvarbasis"}], "}"}], "=", 
          RowBox[{"moduliLoopVariablesBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"loopvarmodulispace", "=", 
          RowBox[{"loopvarmodulispace", "-", 
           RowBox[{"loopvarmodulispace", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"traditionalmodulispace", "=", 
          RowBox[{"moduliSpaceBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"traditionalmodulispace", "=", 
          RowBox[{"traditionalmodulispace", "-", 
           RowBox[{"traditionalmodulispace", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"loopvarbasis", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"loopperfs", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Times", "@@", 
                 RowBox[{"Power", "[", 
                  RowBox[{"loopvarbasis", ",", "#"}], "]"}]}], "&"}], ",", 
               RowBox[{"Transpose", "[", "loopvarmasterspace", "]"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"realperfs", "=", "perfs"}], ";", "\[IndentingNewLine]", 
            RowBox[{"realperfs", "=", 
             RowBox[{"realperfs", "/", 
              RowBox[{"realperfs", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{"loopperfs", ",", "1"}], "]"}], ",", 
                   RowBox[{"{", "_", "}"}]}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"loopperfs", "=!=", "realperfs"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with moduliLoopVariablesBFT! The \
loop variable basis, when matched with the master space, doesn't give the \
correct (ratios of) perfect matchings!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"toremove", "=", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"Dimensions", "[", "loopvarmasterspace", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"loopvarmasterspace", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"RowReduce", "[", 
             RowBox[{"loopvarmasterspace", "-", 
              RowBox[{"loopvarmasterspace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
            "toremove"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"pmatrix", "=", 
          RowBox[{"matchingPolytope", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"toremove", "=", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"Dimensions", "[", "pmatrix", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pmatrix", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"RowReduce", "[", 
             RowBox[{"pmatrix", "-", 
              RowBox[{"pmatrix", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
            "toremove"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"pmatrix", "=!=", "loopvarmasterspace"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with moduliLoopVariablesBFT! The \
resulting master space is different from the one given by the P \
matrix!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"RowReduce", "[", "traditionalmodulispace", "]"}], ",", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"0", ",", 
                RowBox[{
                 RowBox[{"Dimensions", "[", "traditionalmodulispace", "]"}], 
                 "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "=!=", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"RowReduce", "[", "loopvarmodulispace", "]"}], ",", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"0", ",", 
                RowBox[{
                 RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli spaces! \
moduliSpaceBFT and moduliLoopVariablesBFT give different results under \
gauging 2!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
               "loopvarbasis"}], "}"}], "=", 
             RowBox[{"moduliLoopVariablesBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"loopvarmodulispace", "=", 
             RowBox[{"loopvarmodulispace", "-", 
              RowBox[{"loopvarmodulispace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"traditionalmodulispace", "=", 
             RowBox[{"moduliSpaceBFT", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
               "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"traditionalmodulispace", "=", 
             RowBox[{"traditionalmodulispace", "-", 
              RowBox[{"traditionalmodulispace", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"RowReduce", "[", "traditionalmodulispace", "]"}], 
                 ",", 
                 RowBox[{"ConstantArray", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{
                    RowBox[{
                    "Dimensions", "[", "traditionalmodulispace", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "=!=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"RowReduce", "[", "loopvarmodulispace", "]"}], ",", 
                 RowBox[{"ConstantArray", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli spaces! \
moduliSpaceBFT and moduliLoopVariablesBFT give different results under \
gauging 1!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
            "loopvarbasis"}], "}"}], "=", 
          RowBox[{"moduliLoopVariablesBFT", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Dimensions", "[", "loopvarmasterspace", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}], "||", 
            RowBox[{
             RowBox[{
              RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with the moduli spaces under gauging \
2! moduliLoopVariablesBFT should have 0 columns when there are no perfect \
matchings\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "loopvarmasterspace", ",", "loopvarmodulispace", ",", 
               "loopvarbasis"}], "}"}], "=", 
             RowBox[{"moduliLoopVariablesBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "1"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Dimensions", "[", "loopvarmasterspace", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}], "||", 
               RowBox[{
                RowBox[{
                 RowBox[{"Dimensions", "[", "loopvarmodulispace", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "=!=", "0"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the moduli spaces under \
gauging 1! moduliLoopVariablesBFT should have 0 columns when there are no \
perfect matchings\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "bftTestModuliLoopVariablesBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bftTestModuliLoopVariablesBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.684752635295762*^9, 
   3.684752646788473*^9}, {3.684752690206507*^9, 3.6847527554263043`*^9}, {
   3.684752785913771*^9, 3.6847528046608377`*^9}, {3.6847528369363184`*^9, 
   3.6847528624766173`*^9}, {3.684752980222526*^9, 3.684753021548809*^9}, {
   3.6847548762967157`*^9, 3.6847548916389437`*^9}, {3.684755256100696*^9, 
   3.6847553082260094`*^9}, {3.6847553623283606`*^9, 
   3.6847554336010294`*^9}, {3.6847556335428853`*^9, 
   3.6847556691079006`*^9}, {3.684755769259431*^9, 3.684755819885806*^9}, {
   3.684755912076268*^9, 3.6847560161296897`*^9}, {3.6847586069820337`*^9, 
   3.684758671759245*^9}, {3.6847587549931345`*^9, 3.6847587567478228`*^9}, 
   3.685684393370181*^9, {3.685684853946143*^9, 3.685684872183784*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.687533986955555*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6846488430023017`*^9, 3.684648843073349*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", 
   RowBox[{"planarityQ", ".", " ", "SOMETIMES"}], " ", "THE", " ", "TEST", 
   " ", "GIVES", " ", "AN", " ", "ERROR", " ", "EVEN", " ", "THOUGH", " ", 
   RowBox[{"IT", "'"}], "S", " ", "NOT", " ", "AN", " ", 
   RowBox[{"ERROR", "!"}], " ", "CHECK", " ", "THE", " ", "PLANARITY", " ", 
   "OF", " ", "THE", " ", "ERRORS", " ", "BY", " ", "HAND"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6847587331924*^9, {3.684760430800808*^9, 3.684760462916053*^9}, {
   3.684763860056888*^9, 3.6847638611692953`*^9}, {3.687671183908784*^9, 
   3.68767121886664*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "is", " ", "code", " ", "from", " ", "stackexchange", " ", 
     RowBox[{"http", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
        "questions"}], "/", "18514"}], "/", "finding"}], "-", "face", "-", 
     "vertices", "-", "from", "-", "the", "-", "face", "-", "adjacency", "-", 
     RowBox[{
     "graph", " ", "for", " ", "counting", " ", "the", " ", "number", " ", 
      "of", " ", "faces"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
      "===", "===", "===", "==="}], "=", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "==="}], "=", 
     RowBox[{"===", "===", "===", "===", "===", "===", "===", "=="}]}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nextCandidate", "[", 
     RowBox[{"s_", ",", "t_", ",", "adj_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"length", ",", "pos"}], "}"}], ",", 
      RowBox[{
       RowBox[{"length", "=", 
        RowBox[{"Length", "[", "adj", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"pos", "=", 
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"adj", ",", "s"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", "1"}], ",", "length",
           ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"t", ",", 
         RowBox[{"adj", "[", 
          RowBox[{"[", "pos", "]"}], "]"}]}], "}"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FindFace", "[", 
     RowBox[{"g_", "?", "PlanarGraphQ"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "emb", "}"}], ",", 
      RowBox[{
       RowBox[{"emb", "=", 
        RowBox[{"GraphEmbedding", "[", 
         RowBox[{"g", ",", "\"\<PlanarEmbedding\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"FindFace", "[", 
        RowBox[{"g", ",", "emb"}], "]"}]}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FindFace", "[", 
    RowBox[{
     RowBox[{"g_", "?", "PlanarGraphQ"}], ",", "emb_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "m", ",", "realvertexlist", ",", "fakevertexlist", ",", "tofakenums", 
       ",", "torealnums", ",", "orderings", ",", "pAdj", ",", "rightF", ",", 
       "s", ",", "t", ",", "initial", ",", "face", ",", "answers", ",", 
       "outputfaces"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", "=", 
       RowBox[{"AdjacencyMatrix", "[", "g", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"realvertexlist", "=", 
       RowBox[{"VertexList", "[", "g", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"fakevertexlist", "=", 
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "realvertexlist", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tofakenums", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{"realvertexlist", ",", "fakevertexlist"}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"torealnums", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"Reverse", ",", "tofakenums"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"pAdj", "[", "v", "]"}], "=", 
         RowBox[{"SortBy", "[", 
          RowBox[{
           RowBox[{"Pick", "[", 
            RowBox[{"fakevertexlist", ",", 
             RowBox[{"m", "[", 
              RowBox[{"[", "v", "]"}], "]"}], ",", "1"}], "]"}], ",", 
           RowBox[{
            RowBox[{"ArcTan", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"emb", "[", 
                RowBox[{"[", "v", "]"}], "]"}], "-", 
               RowBox[{"emb", "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], ")"}]}], "&"}]}], "]"}]}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"v", ",", "fakevertexlist"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rightF", "[", "_", "]"}], ":=", "False"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"answers", "=", 
       RowBox[{
        RowBox[{"Reap", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"rightF", "[", "e", "]"}]}], ",", 
             RowBox[{
              RowBox[{"s", "=", 
               RowBox[{"e", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"t", "=", 
               RowBox[{"e", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"initial", "=", "s"}], ";", "\[IndentingNewLine]", 
              RowBox[{"face", "=", 
               RowBox[{"{", "s", "}"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{"t", "=!=", "initial"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"rightF", "[", 
                   RowBox[{"UndirectedEdge", "[", 
                    RowBox[{"s", ",", "t"}], "]"}], "]"}], "=", "True"}], ";",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s", ",", "t"}], "}"}], "=", 
                  RowBox[{"nextCandidate", "[", 
                   RowBox[{"s", ",", "t", ",", 
                    RowBox[{"pAdj", "[", "t", "]"}]}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"face", "=", 
                  RowBox[{"Join", "[", 
                   RowBox[{"face", ",", 
                    RowBox[{"{", "s", "}"}]}], "]"}]}], ";"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Sow", "[", "face", "]"}], ";"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"e", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"EdgeList", "[", "g", "]"}], "/.", "tofakenums"}], 
              ")"}]}], "}"}]}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"answers", "\[Equal]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"outputfaces", "=", 
          RowBox[{"answers", "/.", "torealnums"}]}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"outputfaces", "=", 
          RowBox[{
           RowBox[{"answers", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "torealnums"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "outputfaces"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"makeLoopsIndependent", "[", "internalfacenodes_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "indeploops", ",", "oppositeloops", ",", "tempindeploops", ",", 
        "outputinternalfacenodes"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"indeploops", "=", 
        RowBox[{"Gather", "[", 
         RowBox[{"internalfacenodes", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Sort", "[", "#1", "]"}], "\[Equal]", 
            RowBox[{"Sort", "[", "#2", "]"}]}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"oppositeloops", "=", 
        RowBox[{"Sequence", "@@@", 
         RowBox[{"indeploops", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"2", ";;"}]}], "]"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tempindeploops", "=", 
        RowBox[{"Gather", "[", 
         RowBox[{
          RowBox[{"indeploops", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"SubsetQ", "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], "||", 
            RowBox[{"SubsetQ", "[", 
             RowBox[{"#2", ",", "#1"}], "]"}]}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"indeploops", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{"#", ",", 
              RowBox[{"zz_", "/;", 
               RowBox[{
                RowBox[{"Length", "[", "zz", "]"}], "\[Equal]", 
                RowBox[{"Min", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{"Length", ",", "#"}], "]"}], "]"}]}]}]}], "]"}], 
            "[", 
            RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", "tempindeploops"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"outputinternalfacenodes", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{"indeploops", ",", 
            RowBox[{"Union", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"oppositeloops", ",", 
                RowBox[{"Sequence", "@@@", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"tempindeploops", ",", "indeploops"}], "}"}]}], 
                  "]"}]}]}], "}"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "outputinternalfacenodes"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
      "===", "===", "===", "==="}], "=", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "==="}], "=", 
     RowBox[{"===", "===", "===", "===", "===", "===", "===", "=="}]}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "is", " ", "code", " ", "from", " ", "stackexchange", " ", 
     RowBox[{"http", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
        "questions"}], "/", "52056"}], "/", "dual"}], "-", "graph", "-", "of",
      "-", "an", "-", "arbitrary", "-", "planar", "-", 
     RowBox[{
      RowBox[{"graph", "/", "52092"}], " ", "for", " ", "counting", " ", 
      "the", " ", "number", " ", "of", " ", "faces"}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
      "===", "===", "===", "==="}], "=", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "==="}], "=", 
     RowBox[{"===", "===", "===", "===", "===", "===", "===", "=="}]}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"simple", " ", 
    RowBox[{"Kruskal", "'"}], "s", " ", "algorithm", " ", "without", " ", 
    "sorting"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SpanningTree", "[", "graph_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"label", ",", 
       RowBox[{"edges", "=", 
        RowBox[{"EdgeList", "[", "graph", "]"}]}]}], "}"}], ",", 
     RowBox[{"Pick", "[", 
      RowBox[{"edges", ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"UnsameQ", "[", 
              RowBox[{"#1", ",", "#2"}], "]"}], ",", 
             RowBox[{
              RowBox[{"#2", "=", "#1"}], ";", "True"}], ",", "False"}], "]"}],
            "&"}], "@@", 
          RowBox[{"Sort", "[", 
           RowBox[{"label", "/@", "edge"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"edge", ",", "edges"}], "}"}]}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeEges", "[", "list_", "]"}], ":=", 
   RowBox[{"Sort", "/@", 
    RowBox[{"UndirectedEdge", "@@@", 
     RowBox[{"Partition", "[", 
      RowBox[{"list", ",", "2", ",", "1"}], "]"}]}]}]}], "\n", 
  RowBox[{"(*", 
   RowBox[{"FindFace2", ":", 
    RowBox[{
     RowBox[{"finds", " ", "the", " ", "smallest", " ", 
      RowBox[{"cycle", ".", "This"}], " ", "cycle", " ", "is", " ", "a", " ", 
      "pseudo"}], "-", 
     RowBox[{"face", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FindFace2", "[", 
    RowBox[{"graph_", ",", "edges_"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{"makeEges", ",", 
     RowBox[{"First", "@", 
      RowBox[{"SortBy", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"FindShortestPath", "[", 
              RowBox[{"graph", ",", 
               RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}], "/@", 
            "edges"}], ",", "edges"}], "}"}], "]"}], ",", 
        RowBox[{"Composition", "[", 
         RowBox[{"Length", ",", "First"}], "]"}]}], "]"}]}], ",", "1"}], 
    "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Append", " ", "analyzed", " ", "edge", " ", "to", " ", "a", " ", 
    "graph"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"appendEge", "[", 
   RowBox[{"graph_", ",", "edge_"}], "]"}], ":=", 
  RowBox[{"Graph", "@", 
   RowBox[{"Append", "[", 
    RowBox[{
     RowBox[{"EdgeList", "[", "graph", "]"}], ",", "edge"}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iteration", "[", 
    RowBox[{"graph_", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "$faces"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"iteration", "[", 
    RowBox[{"graph_", ",", "edges_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"iteration", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"$faces", ",", 
          RowBox[{"Flatten", "[", "#", "]"}]}], "]"}], ";", 
        RowBox[{"appendEge", "[", 
         RowBox[{"graph", ",", 
          RowBox[{"Last", "@", "#"}]}], "]"}]}], ",", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"edges", ",", 
         RowBox[{"Last", "@", "#"}]}], "]"}]}], "]"}], "&"}], "[", 
    RowBox[{"FindFace2", "[", 
     RowBox[{"graph", ",", "edges"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Faces", ":", 
    RowBox[{
     RowBox[{"returns", " ", "all", " ", "pseudo"}], "-", 
     RowBox[{"faces", " ", "of", " ", "a", " ", "graph"}]}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Faces", "[", "graph_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"$faces", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"tree", "=", 
        RowBox[{"SpanningTree", "[", "graph", "]"}]}]}], "}"}], ",", 
     RowBox[{"iteration", "[", 
      RowBox[{
       RowBox[{"Graph", "[", "tree", "]"}], ",", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"EdgeList", "[", "graph", "]"}], ",", "tree"}], "]"}]}], 
      "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
      "===", "===", "===", "==="}], "=", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "==="}], "=", 
     RowBox[{"===", "===", "===", "===", "===", "===", "===", "=="}]}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPlanarityQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"aa_", ",", "bb_", ",", "cc_", ",", "dd_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "a", ",", "b", ",", "c", ",", "d", ",", "planaritycollapsed", ",", 
       "graph", ",", "externalnodes", ",", "choppedgraph", ",", 
       "connectedcomponents", ",", "internalfaces", ",", "internalfacenodes", 
       ",", "externaledges", ",", "whichfacescouldyoubein", ",", 
       "howmanyfacescanyoubein", ",", "numcommonfaces"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"aa", ",", "bb", ",", "cc", ",", "dd"}], "}"}], "//.", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "firstmat_", ",", "secondmat_", ",", "thirdmat_", ",", 
           "fourthmat_"}], "}"}], "\[RuleDelayed]", 
         RowBox[{"simplifyGraph", "[", 
          RowBox[{"firstmat", ",", 
           RowBox[{"(", 
            RowBox[{"secondmat", "/.", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "secondmat"}], "]"}], ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", "zz", "]"}], ">", "1"}]}]}], 
                   "]"}]}], "]"}], "]"}]}], "]"}]}], ")"}], ",", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "thebottomleft", "}"}], ",", 
              RowBox[{"Block", "[", 
               RowBox[{
                RowBox[{"{", "output", "}"}], ",", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "thebottomleft", "]"}], ">", "0"}],
                    ",", 
                   RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"thebottomleft", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", "thebottomleft", "]"}]}], "]"}],
                     ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", "zz", "]"}], ">", "1"}]}]}], 
                    "]"}]}], "]"}], "]"}]}], "]"}]}]}], ";"}], ",", 
                   RowBox[{
                    RowBox[{"output", "=", "thebottomleft"}], ";"}]}], "]"}], 
                 ";", "output"}]}], "]"}]}], "]"}], "[", "thirdmat", "]"}], 
           ",", "fourthmat"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"planaritycollapsed", "=", 
       RowBox[{"planarityQ", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graph", "=", 
       RowBox[{"turnIntoGraph", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "False"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PlanarGraphQ", "[", "graph", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"externalnodes", "=", 
          RowBox[{"getOrderingExternalNodesDefault", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"choppedgraph", "=", 
          RowBox[{"Graph", "[", 
           RowBox[{
            RowBox[{"turnIntoGraph", "[", 
             RowBox[{
              RowBox[{"Sequence", "@@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Variables", "[", 
                    RowBox[{"{", 
                    RowBox[{"b", ",", "c"}], "}"}], "]"}]}], "]"}]}], ")"}]}],
               ",", "False"}], "]"}], ",", 
            RowBox[{"GraphLayout", "\[Rule]", "\"\<PlanarEmbedding\>\""}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectedcomponents", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Subgraph", "[", 
              RowBox[{"choppedgraph", ",", "#"}], "]"}], "&"}], ",", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"ConnectedComponents", "[", "choppedgraph", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Alternatives", "@@", "externalnodes"}], "}"}]}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"internalfacenodes", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"FindFace", ",", "connectedcomponents"}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"Length", "[", "zz", "]"}], "\[LessEqual]", "1"}]}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"internalfacenodes", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Join", "@@", 
               RowBox[{"internalfacenodes", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", 
                  RowBox[{";;", 
                   RowBox[{"-", "2"}]}]}], "]"}], "]"}]}], ",", 
              RowBox[{"Join", "@@", 
               RowBox[{"internalfacenodes", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", 
                  RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"internalfacenodes", "=", 
          RowBox[{"makeLoopsIndependent", "[", "internalfacenodes", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"externaledges", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"EdgeList", "[", "graph", "]"}], ",", 
            RowBox[{
             RowBox[{"UndirectedEdge", "[", 
              RowBox[{
               RowBox[{"Alternatives", "@@", "externalnodes"}], ",", "_"}], 
              "]"}], "|", 
             RowBox[{"UndirectedEdge", "[", 
              RowBox[{"_", ",", 
               RowBox[{"Alternatives", "@@", "externalnodes"}]}], "]"}]}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"whichfacescouldyoubein", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"DeleteDuplicates", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "/.", 
                 RowBox[{
                  RowBox[{"{", "}"}], "\[Rule]", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ii", ",", "ii"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ii", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "internalfacenodes", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"0", "\[Rule]", "1"}], "}"}]}], ")"}]}], "}"}]}], 
                   "]"}]}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"internalfacenodes", ",", 
                 RowBox[{"Alternatives", "@@", "#"}]}], "]"}], "&"}], ",", 
              "externaledges"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"whichfacescouldyoubein", "\[Equal]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"numcommonfaces", "=", "1"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"numcommonfaces", "=", 
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "@@", "whichfacescouldyoubein"}], 
              "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"planaritycollapsed", "===", "True"}], "&&", 
              RowBox[{"numcommonfaces", "\[Equal]", "0"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"planaritycollapsed", "=!=", "True"}], "&&", 
              RowBox[{"numcommonfaces", "\[GreaterEqual]", "1"}]}], ")"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{"\"\<Warning: first algorithm failed. kast=\>\"", ",", 
                 RowBox[{"RGBColor", "[", 
                  RowBox[{"0", ",", "0.90", ",", "0"}], "]"}]}], "]"}], ",", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 RowBox[{"RGBColor", "[", 
                  RowBox[{"0", ",", "0.90", ",", "0"}], "]"}]}], "]"}]}], 
              "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "Recompute", " ", "the", " ", "faces", " ", "using", " ", "the", 
             " ", "alternative", " ", 
             RowBox[{"method", "!"}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"externalnodes", "=", 
             RowBox[{"getOrderingExternalNodesDefault", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"internalfaces", "=", 
             RowBox[{"Faces", "[", 
              RowBox[{"Graph", "[", 
               RowBox[{"graph", ",", 
                RowBox[{
                "GraphLayout", "\[Rule]", "\"\<PlanarEmbedding\>\""}]}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"internalfacenodes", "=", 
             RowBox[{"Map", "[", 
              RowBox[{"Union", ",", 
               RowBox[{"internalfaces", "/.", 
                RowBox[{"UndirectedEdge", "\[Rule]", "Sequence"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"externaledges", "=", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"EdgeList", "[", "graph", "]"}], ",", 
               RowBox[{
                RowBox[{"UndirectedEdge", "[", 
                 RowBox[{
                  RowBox[{"Alternatives", "@@", "externalnodes"}], ",", "_"}],
                  "]"}], "|", 
                RowBox[{"UndirectedEdge", "[", 
                 RowBox[{"_", ",", 
                  RowBox[{"Alternatives", "@@", "externalnodes"}]}], 
                 "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"whichfacescouldyoubein", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"#", "/.", 
                    RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ii", ",", "ii"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ii", ",", 
                    RowBox[{"Length", "[", "internalfaces", "]"}]}], "}"}]}], 
                    "]"}]}]}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Position", "[", 
                   RowBox[{"internalfacenodes", ",", 
                    RowBox[{"Alternatives", "@@", "#"}]}], "]"}], "&"}], ",", 
                 "externaledges"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"howmanyfacescanyoubein", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"VertexDegree", "[", "graph", "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"externaledges", "/.", 
                  RowBox[{
                   RowBox[{"UndirectedEdge", "[", 
                    RowBox[{"v1_Integer", ",", "v2_Integer"}], "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"v1", ",", "v2"}], "}"}], ",", 
                    RowBox[{"Alternatives", "@@", "externalnodes"}]}], 
                    "]"}]}]}], "]"}], "]"}], "]"}], "-", "1"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"whichfacescouldyoubein", "=", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"PadRight", "[", 
                   RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "whichfacescouldyoubein", ",", "howmanyfacescanyoubein"}], 
                  "}"}]}], "]"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"whichfacescouldyoubein", "\[Equal]", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"numcommonfaces", "=", "1"}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"numcommonfaces", "=", 
                RowBox[{"Length", "[", 
                 RowBox[{"Intersection", "@@", "whichfacescouldyoubein"}], 
                 "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"planaritycollapsed", "===", "True"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"numcommonfaces", "\[Equal]", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with planarityQ! We are on genus \
zero on a graph declared planar, and yet we don't have that B=1.\>\""}], 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"numcommonfaces", "\[GreaterEqual]", "1"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with planarityQ! We are on genus \
zero on a graph declared nonplanar, and yet we have that B=1.\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"planaritycollapsed", "=!=", "False"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with planarityQ! When we don't \
collapse bivalent nodes, it gives that this example is planar even though it \
can't even be embedded on genus zero.\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestPlanarityQ", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPlanarityQ", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPlanarityQ", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPlanarityQ", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPlanarityQ", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.684758740765997*^9, 
   3.6847587486757727`*^9}, 3.6847589668246293`*^9, {3.684759072087677*^9, 
   3.684759076976714*^9}, {3.6847598533847303`*^9, 3.684759862502415*^9}, {
   3.6847604105457573`*^9, 3.684760426176469*^9}, {3.6847615341998477`*^9, 
   3.684761647955044*^9}, {3.684761711202359*^9, 3.684761732113801*^9}, {
   3.68476195005608*^9, 3.684761964276211*^9}, {3.6847623007053823`*^9, 
   3.684762387136321*^9}, {3.684762500621395*^9, 3.6847625752463145`*^9}, {
   3.6847627958635535`*^9, 3.684762808272461*^9}, {3.684763201499195*^9, 
   3.6847632065296397`*^9}, {3.6847634031348734`*^9, 
   3.6847634159043713`*^9}, {3.684763477922958*^9, 3.6847634936633058`*^9}, {
   3.684763557871423*^9, 3.684763631819785*^9}, {3.6847636994284062`*^9, 
   3.684763764461209*^9}, {3.6847638102387953`*^9, 3.68476381304633*^9}, {
   3.684763914083949*^9, 3.6847639209600916`*^9}, 3.684817576662812*^9, {
   3.684817815492402*^9, 3.6848178201404157`*^9}, {3.6848178833076987`*^9, 
   3.6848178927697372`*^9}, {3.684818828295362*^9, 3.684818922808974*^9}, {
   3.6848222944585433`*^9, 3.684822453678132*^9}, {3.6848225487369156`*^9, 
   3.6848225780963264`*^9}, {3.684822626638132*^9, 3.6848226292762594`*^9}, {
   3.6848235564367766`*^9, 3.6848235710374928`*^9}, {3.684823691921395*^9, 
   3.684823754499069*^9}, {3.684823819041852*^9, 3.684823858392539*^9}, {
   3.684824998305909*^9, 3.684825003882391*^9}, {3.6848250434792066`*^9, 
   3.6848251432168674`*^9}, {3.6848254548005943`*^9, 3.684825460848869*^9}, 
   3.6856844017625504`*^9, {3.685684887543734*^9, 3.685684894768347*^9}, {
   3.685684927644257*^9, 3.685684929465448*^9}, 3.687593063915797*^9, 
   3.68762922132269*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.687670876633003*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6847633005667562`*^9, 3.6847633259467363`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "getOrderingExternalEdgesDefault"}], 
   ",", " ", "getSourceEdges", ",", " ", "getSinkEdges", ",", " ", 
   "getExternalEdgeNodeNumbers"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684763960849737*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "sources", ",", "sourcetally", ",", "sinks", ",", 
       "sinktally", ",", "matroidtally", ",", "kasteleyn"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
           RowBox[{"getOrderingExternalEdgesDefault", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], "=!=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"DeleteCases", "[", 
             RowBox[{"c", ",", "0", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "mat", "}"}], ",", 
                 RowBox[{"Block", "[", 
                  RowBox[{
                   RowBox[{"{", "transposemat", "}"}], ",", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"mat", "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"transposemat", "=", 
                    RowBox[{"{", "}"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"transposemat", "=", 
                    RowBox[{"Transpose", "[", "mat", "]"}]}], ";"}]}], "]"}], 
                    ";", "transposemat"}]}], "]"}]}], "]"}], "[", "b", "]"}], 
              ",", "0", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           
           "\"\< : There's a problem with getOrderingExternalEdgesDefault! It \
doesn't give the right edges in the right order\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sources", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceEdges", "[", 
           RowBox[{"b", ",", "c", ",", "#"}], "]"}], "&"}], ",", "perfs"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sourcetally", "=", 
       RowBox[{"Tally", "[", "sources", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sinks", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSinkEdges", "[", 
           RowBox[{"b", ",", "c", ",", "#"}], "]"}], "&"}], ",", "perfs"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sinktally", "=", 
       RowBox[{"Tally", "[", "sinks", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matroidtally", "=", 
       RowBox[{"Tally", "[", 
        RowBox[{"Transpose", "[", 
         RowBox[{"matroidPolytope", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sourcetally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", "sources"}], 
          "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSourceEdges! It doesn't \
correspond with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sinktally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", "sinks"}], 
          "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSinkEdges! It doesn't correspond \
with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Variables", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"kasteleyn", ",", 
             RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"getExternalEdgeNodeNumbers", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
              RowBox[{"Variables", "[", 
               RowBox[{"Join", "[", 
                RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
          "]"}], "=!=", 
         RowBox[{"Variables", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"b", ",", "c"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getExternalEdgeNodeNumbers! It \
doesn't give the correct node numbers\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestSourceSinkEdgesOrdering", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkEdgesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6847639944818907`*^9, 
   3.6847640333081274`*^9}, {3.684764065055216*^9, 3.6847640674277997`*^9}, {
   3.684764600196615*^9, 3.6847646658909426`*^9}, {3.6847647178194*^9, 
   3.684764724408382*^9}, 3.6848263191632957`*^9, {3.6848263557611585`*^9, 
   3.6848264263658457`*^9}, {3.6848264619370103`*^9, 
   3.6848264656495256`*^9}, {3.6848266357703853`*^9, 3.6848266988693943`*^9}, 
   3.685684408905438*^9, {3.685684906943823*^9, 3.685684918330276*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.687551894745566*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6846488466756153`*^9, 3.684648846722494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "getOrderingExternalNodesDefault"}], 
   ",", " ", "getSourceNodes", ",", " ", "getSinkNodes"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684764704719036*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestSourceSinkNodesOrdering", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "sourcenodes", ",", "sourcetally", ",", "sinknodes", ",", 
       "sinktally", ",", "matroidtally"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getOrderingExternalNodesDefault", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "a", "]"}], "+", "1"}], ",", 
             RowBox[{"Length", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"a", ",", "c"}], "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", "1"}], 
             ",", 
             RowBox[{
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", 
              RowBox[{
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getOrderingExternalNodesDefault! It \
doesn't give the right nodes in the right order!\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sourcenodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sourcetally", "=", 
       RowBox[{"Tally", "[", "sourcenodes", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sinknodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSinkNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sinktally", "=", 
       RowBox[{"Tally", "[", "sinknodes", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matroidtally", "=", 
       RowBox[{"Tally", "[", 
        RowBox[{"Transpose", "[", 
         RowBox[{"matroidPolytope", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sourcetally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           "sourcenodes"}], "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with getSourceEdges! It doesn't \
correspond with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sinktally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           "sinknodes"}], "]"}], "=!=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"matroidtally", ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"matroidPolytope", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           
           "\"\< : There's a problem with getSinkEdges! It doesn't correspond \
with the perfect -matching multiplicities given by the matroid \
polytope\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestSourceSinkNodesOrdering", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSourceSinkNodesOrdering", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.684764725497431*^9, 
   3.6847648249711018`*^9}, 3.684826388203803*^9, 3.6848267779542274`*^9, {
   3.68482692446859*^9, 3.6848269512322865`*^9}, {3.68482708103259*^9, 
   3.6848270845503798`*^9}, 3.685684413025481*^9, {3.685684962528379*^9, 
   3.685684966240343*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.687564533934326*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Here", " ", "we", " ", "check", " ", "traditionalConnectivityMatrix"}], 
   ",", " ", "connectivityMatrix"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684830264914666*^9, {3.6875902883672667`*^9, 3.687590290063242*^9}, {
   3.687687115406363*^9, 3.687687126831542*^9}, {3.6876910268490477`*^9, 
   3.6876910269131413`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"alternativeConnectivityMat", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", 
     RowBox[{"referencematching_:", "Null"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfmatchings", ",", "theperf", ",", "adjacencymat", ",", "kasteleyn", 
       ",", "perfpositions", ",", "jj", ",", "graph", ",", "cyclenodes", ",", 
       "turnIntoContributionNothingAdded", ",", "cycles", ",", "loopnodes", 
       ",", "extraloopnodes", ",", "toadd", ",", "loopcontributions", ",", 
       "turnIntoContribution", ",", "size", ",", "connectivitymat"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"referencematching", "===", "Null"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfmatchings", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfmatchings", "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theperf", "=", 
             RowBox[{"perfmatchings", "[", 
              RowBox[{"[", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
              "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"theperf", "=", "0"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"theperf", "=", "referencematching"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theperf", "=!=", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"adjacencymat", "=", 
          RowBox[{"UpperTriangularize", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"kasteleyn", "=", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perfpositions", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], 
               "}"}]}], "&"}], ",", 
            RowBox[{"Position", "[", 
             RowBox[{"kasteleyn", ",", 
              RowBox[{"Alternatives", "@@", 
               RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"adjacencymat", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"perfpositions", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"adjacencymat", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"Reverse", "[", 
                 RowBox[{"perfpositions", "[", 
                  RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"adjacencymat", "[", 
               RowBox[{"[", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"Reverse", "[", 
                  RowBox[{"perfpositions", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
              "-", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"graph", "=", 
          RowBox[{"DirectedGraph", "[", 
           RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"turnIntoContributionNothingAdded", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
                "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"bigmatrix", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Join", "[", 
                   RowBox[{"kasteleyn", ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"edges", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"bigmatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"pathnodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"edgedirections", "=", 
                RowBox[{
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Ordering", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"pathnodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"2", "\[Rule]", 
                   RowBox[{"-", "1"}]}], "}"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"giveContribution", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"edges", ",", "sign"}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Block", "[", 
                   RowBox[{
                    RowBox[{"{", "contribution", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"Times", "@@", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"giveContribution", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"edges", ",", "edgedirections"}], "}"}]}], 
                  "]"}]}]}], ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"cycles", "=", 
          RowBox[{
           RowBox[{"FindCycle", "[", 
            RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"loopnodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", 
               RowBox[{"Append", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
                 RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], 
             "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "2"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"toadd", "=", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Subsets", "[", 
                RowBox[{"loopnodes", ",", 
                 RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
               RowBox[{"zz_", "/;", 
                RowBox[{
                 RowBox[{"Join", "@@", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{"zz", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
                 RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"toadd", "===", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"extraloopnodes", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"loopcontributions", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Power", "[", 
               RowBox[{
                RowBox[{"-", "1"}], ",", 
                RowBox[{
                 RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
              RowBox[{"(", 
               RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
             "turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cyclenodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Union", "@@", "#"}], "&"}], ",", "loopnodes"}], "]"}]}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"turnIntoContribution", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "totalcontrib", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"totalcontrib", "=", 
                RowBox[{
                "turnIntoContributionNothingAdded", "[", "pathnodes", "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"totalcontrib", "/", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"Total", "[", "loopcontributions", "]"}]}], 
                  ")"}]}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"totalcontrib", "=", 
                RowBox[{"totalcontrib", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"Total", "[", 
                    RowBox[{"loopcontributions", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "pathnodes"}], "]"}], "]"}], ">", "0"}],
                     "&"}], ",", "cyclenodes"}], "]"}], ",", "False"}], "]"}],
                     "]"}], "]"}], "]"}], "]"}]}], ")"}]}]}], ";", 
               "\[IndentingNewLine]", "totalcontrib"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"FindPath", "[", 
             RowBox[{
             "graph", ",", "iii", ",", "jjj", ",", "Infinity", ",", "All"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"iii", ",", 
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"jjj", ",", 
              RowBox[{"Total", "[", 
               RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], 
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"Join", ",", 
            RowBox[{"{", 
             RowBox[{"connectivitymat", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"DiagonalMatrix", "[", 
                  RowBox[{"Range", "[", 
                   RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}], 
                   "]"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"0", "\[Rule]", 
                   RowBox[{"{", "}"}]}], "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"zz_Integer", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"{", "zz", "}"}], "}"}]}], "}"}]}]}], "}"}], ",", 
            "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Total", ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"turnIntoContribution", "[", "#", "]"}], "&"}], ",", 
              "connectivitymat", ",", 
              RowBox[{"{", "3", "}"}]}], "]"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
        ",", 
        RowBox[{
         RowBox[{"size", "=", 
          RowBox[{"Total", "[", 
           RowBox[{"Dimensions", "[", 
            RowBox[{"joinupKasteleyn", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"connectivitymat", "=", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", 
             RowBox[{"{", 
              RowBox[{"iii", ",", "size"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"jjj", ",", "size"}], "}"}]}], "]"}], "+", 
           RowBox[{"IdentityMatrix", "[", "size", "]"}]}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "connectivitymat"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestConnectivityMatrix", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "multiplic", ",", "equals", ",", "jj", ",", 
       "alternative", ",", "normal", ",", "traditional"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"equals", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"multiplic", "[", 
              RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "10"}], "&&", 
            RowBox[{
             RowBox[{"Count", "[", 
              RowBox[{
               RowBox[{"multiplic", "[", 
                RowBox[{"[", 
                 RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
               RowBox[{"multiplic", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
             "1"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"alternative", "=", 
             RowBox[{"alternativeConnectivityMat", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"normal", "=", 
             RowBox[{"connectivityMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
               RowBox[{"perfs", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"equals", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"equals", ",", 
               RowBox[{
                RowBox[{"Simplify", "[", 
                 RowBox[{"alternative", "\[Equal]", "normal"}], "]"}], "===", 
                "True"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"multiplic", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"traditional", "=", 
                RowBox[{"traditionalConnectivityMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"equals", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"equals", ",", 
                  RowBox[{
                   RowBox[{"Simplify", "[", 
                    RowBox[{"traditional", "\[Equal]", "normal"}], "]"}], "===",
                    "True"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"And", "@@", "equals"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with connectivityMatrix! It doesn't seem \
to be equal to either the alternative method, or the traditional method \
involving the inverse (one of the two equalities was violated)\>\""}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestConnectivityMatrix", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestConnectivityMatrix", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848304023152523`*^9, 
   3.684830423874124*^9}, {3.6848304930750675`*^9, 3.684830496496272*^9}, {
   3.6848306034338064`*^9, 3.684830635219882*^9}, {3.6848306719112625`*^9, 
   3.684830696069599*^9}, 3.684831184007085*^9, 3.6848340210081034`*^9, {
   3.684834325735805*^9, 3.6848343432444744`*^9}, {3.6848347208974967`*^9, 
   3.684834724306249*^9}, 3.6856844224351597`*^9, {3.68568500560781*^9, 
   3.685685021481099*^9}, 3.6875903234320183`*^9, {3.687687109701536*^9, 
   3.687687148775095*^9}, {3.6876913157681513`*^9, 3.6876913290526*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.687691249173678*^9, 3.687691344012335*^9, 
  3.688107627666823*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.688111878735447*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "loopDenominator"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.684831221560369*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestLoopDenominator", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "multiplic", ",", "equals", ",", "jj", ",", 
       "traditionalmethod", ",", "newmethod"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"equals", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"multiplic", "[", 
              RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "10"}], "&&", 
            RowBox[{
             RowBox[{"Count", "[", 
              RowBox[{
               RowBox[{"multiplic", "[", 
                RowBox[{"[", 
                 RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
               RowBox[{"multiplic", "[", 
                RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
             "1"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"TimeConstrained", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"traditionalmethod", "=", 
                RowBox[{"Expand", "[", 
                 RowBox[{"1", "/", 
                  RowBox[{"Expand", "[", 
                   RowBox[{"Simplify", "[", 
                    RowBox[{"Det", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"connectivityMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "]"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"newmethod", "=", 
                RowBox[{"loopDenominator", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"equals", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"equals", ",", 
                  RowBox[{
                   RowBox[{"Simplify", "[", 
                    RowBox[{"newmethod", "\[Equal]", "traditionalmethod"}], 
                    "]"}], "===", "True"}]}], "]"}]}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"multiplic", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "*", "3"}]}], "]"}], ";"}]}],
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"And", "@@", "equals"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : There's a problem with loopDenominator! It doesn't equal \
the result obtained from the determinant of the connectivity matrix\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestLoopDenominator", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestLoopDenominator", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848312681994314`*^9, 
   3.684831300914626*^9}, {3.6848313467683363`*^9, 3.684831373236657*^9}, 
   3.6848343959195337`*^9, {3.6848344770354767`*^9, 3.684834499579558*^9}, {
   3.6848345369121*^9, 3.6848345388743496`*^9}, {3.684835189552026*^9, 
   3.684835194940216*^9}, 3.685684426960864*^9, {3.685685040257551*^9, 
   3.685685047383893*^9}, 3.6875939043156233`*^9, {3.6876058356286163`*^9, 
   3.6876058685567617`*^9}, {3.6876912712025547`*^9, 3.687691274562639*^9}, {
   3.687691357163971*^9, 3.687691365787781*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.688385190520355*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.688391284264544*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "pathMatrix"}], ",", " ", 
   "traditionalPathMatrix", ",", " ", "minorsAsPerfectMatchings"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.6848347452726264`*^9, 3.68483474701765*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"giveMeLoopDenominator", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", "theperf_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "adjacencymat", ",", "kasteleyn", ",", "perfpositions", ",", "jj", ",", 
       "graph", ",", "turnIntoContributionNothingAdded", ",", "cycles", ",", 
       "loopnodes", ",", "extraloopnodes", ",", "toadd", ",", 
       "loopcontributions"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"adjacencymat", "=", 
       RowBox[{"UpperTriangularize", "[", 
        RowBox[{"turnIntoAdjacencyMatrix", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfpositions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], "}"}]}], 
          "&"}], ",", 
         RowBox[{"Position", "[", 
          RowBox[{"kasteleyn", ",", 
           RowBox[{"Alternatives", "@@", 
            RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"perfpositions", "[", 
              RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"Reverse", "[", 
              RowBox[{"perfpositions", "[", 
               RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{"adjacencymat", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"Reverse", "[", 
               RowBox[{"perfpositions", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "-", 
           "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"graph", "=", 
       RowBox[{"DirectedGraph", "[", 
        RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"turnIntoContributionNothingAdded", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
             "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"bigmatrix", "=", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                  "]"}], ",", 
                 RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{"kasteleyn", ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edges", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"bigmatrix", "[", 
                 RowBox[{"[", 
                  RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"pathnodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"iii", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                  "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edgedirections", "=", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Ordering", "[", "#", "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"pathnodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                   "}"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"2", "\[Rule]", 
                RowBox[{"-", "1"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"giveContribution", "=", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"edges", ",", "sign"}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Block", "[", 
                RowBox[{
                 RowBox[{"{", "contribution", "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                  ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"Times", "@@", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"giveContribution", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"edges", ",", "edgedirections"}], "}"}]}], "]"}]}]}],
             ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"cycles", "=", 
       RowBox[{
        RowBox[{"FindCycle", "[", 
         RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"1", ",", 
                RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
              RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], "&"}],
          ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extraloopnodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "2"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"toadd", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Subsets", "[", 
             RowBox[{"loopnodes", ",", 
              RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"Join", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"zz", ",", 
                   RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
              RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"toadd", "===", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopcontributions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Power", "[", 
            RowBox[{
             RowBox[{"-", "1"}], ",", 
             RowBox[{
              RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
           RowBox[{"(", 
            RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{"turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"Total", "[", "loopcontributions", "]"}]}], ")"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"alternativeConnectivityMat", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_", ",", 
     RowBox[{"referencematching_:", "Null"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "theperf", ",", "adjacencymat", ",", "kasteleyn", ",", "perfpositions", 
       ",", "jj", ",", "graph", ",", "cyclenodes", ",", 
       "turnIntoContributionNothingAdded", ",", "cycles", ",", "loopnodes", 
       ",", "extraloopnodes", ",", "toadd", ",", "loopcontributions", ",", 
       "turnIntoContribution", ",", "connectivitymat"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"referencematching", "===", "Null"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theperf", "=", 
          RowBox[{
           RowBox[{"perfectMatchings", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"lowNumberLoopsPMpos", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
           "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{
         RowBox[{"theperf", "=", "referencematching"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"adjacencymat", "=", 
       RowBox[{"UpperTriangularize", "[", 
        RowBox[{"turnIntoAdjacencyMatrix", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kasteleyn", "=", 
       RowBox[{"joinupKasteleyn", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"perfpositions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}], "+", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Length", "[", "kasteleyn", "]"}], ",", "0"}], "}"}]}], 
          "&"}], ",", 
         RowBox[{"Position", "[", 
          RowBox[{"kasteleyn", ",", 
           RowBox[{"Alternatives", "@@", 
            RowBox[{"Variables", "[", "theperf", "]"}]}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "perfpositions", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"perfpositions", "[", 
              RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "1"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"adjacencymat", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"Reverse", "[", 
              RowBox[{"perfpositions", "[", 
               RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{"adjacencymat", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"Reverse", "[", 
               RowBox[{"perfpositions", "[", 
                RowBox[{"[", "jj", "]"}], "]"}], "]"}]}], "]"}], "]"}], "-", 
           "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"graph", "=", 
       RowBox[{"DirectedGraph", "[", 
        RowBox[{"AdjacencyGraph", "[", "adjacencymat", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"turnIntoContributionNothingAdded", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "bigmatrix", ",", "edges", ",", "edgedirections", ",", 
             "giveContribution", ",", "totalcontrib"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"bigmatrix", "=", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "kasteleyn", "]"}]}], "}"}]}], 
                  "]"}], ",", 
                 RowBox[{"Transpose", "[", "kasteleyn", "]"}]}], "]"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{"kasteleyn", ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edges", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"bigmatrix", "[", 
                 RowBox[{"[", 
                  RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"pathnodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"iii", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                  "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edgedirections", "=", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Ordering", "[", "#", "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"pathnodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"iii", "+", "1"}]}], "}"}], "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathnodes", "]"}], "-", "1"}]}], 
                   "}"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"2", "\[Rule]", 
                RowBox[{"-", "1"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"giveContribution", "=", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"edges", ",", "sign"}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Block", "[", 
                RowBox[{
                 RowBox[{"{", "contribution", "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"sign", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "kasteleyn", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"contribution", "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", "#"}], "&"}], ",", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "edges", "]"}], ",", 
                    RowBox[{"Variables", "[", "theperf", "]"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                  ";", "\[IndentingNewLine]", "contribution"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"Times", "@@", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"giveContribution", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"edges", ",", "edgedirections"}], "}"}]}], "]"}]}]}],
             ";", "\[IndentingNewLine]", "totalcontrib"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cycles", "=", 
       RowBox[{
        RowBox[{"FindCycle", "[", 
         RowBox[{"graph", ",", "Infinity", ",", "All"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"DirectedEdge", "\[Rule]", "List"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"1", ",", 
                RowBox[{"Length", "[", "#", "]"}], ",", "2"}], "]"}], ",", 
              RowBox[{"Length", "[", "#", "]"}]}], "]"}], "]"}], "]"}], "&"}],
          ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "@@", "#"}], "&"}], ",", "cycles"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extraloopnodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "2"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "loopnodes", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"toadd", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Subsets", "[", 
             RowBox[{"loopnodes", ",", 
              RowBox[{"{", "jj", "}"}]}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{
              RowBox[{"Join", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"zz", ",", 
                   RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "===", 
              RowBox[{"{", "}"}]}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"toadd", "===", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"extraloopnodes", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"extraloopnodes", ",", "toadd"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopnodes", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", "loopnodes", "}"}], "]"}], ",", "extraloopnodes"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"loopcontributions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Power", "[", 
            RowBox[{
             RowBox[{"-", "1"}], ",", 
             RowBox[{
              RowBox[{"Length", "[", "#", "]"}], "-", "1"}]}], "]"}], 
           RowBox[{"(", 
            RowBox[{"Times", "@@", "#"}], ")"}]}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{"turnIntoContributionNothingAdded", ",", "loopnodes", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cyclenodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "@@", "#"}], "&"}], ",", "loopnodes"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"turnIntoContribution", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "pathnodes", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "totalcontrib", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"totalcontrib", "=", 
             RowBox[{
             "turnIntoContributionNothingAdded", "[", "pathnodes", "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"totalcontrib", "/", 
              RowBox[{"(", 
               RowBox[{"1", "-", 
                RowBox[{"Total", "[", "loopcontributions", "]"}]}], ")"}]}]}],
             ";", "\[IndentingNewLine]", 
            RowBox[{"totalcontrib", "=", 
             RowBox[{"totalcontrib", 
              RowBox[{"(", 
               RowBox[{"1", "-", 
                RowBox[{"Total", "[", 
                 RowBox[{"loopcontributions", "[", 
                  RowBox[{"[", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "pathnodes"}], "]"}], "]"}], ">", "0"}],
                     "&"}], ",", "cyclenodes"}], "]"}], ",", "False"}], "]"}],
                     "]"}], "]"}], "]"}], "]"}]}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "totalcontrib"}]}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"connectivitymat", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"FindPath", "[", 
          RowBox[{
          "graph", ",", "iii", ",", "jjj", ",", "Infinity", ",", "All"}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"iii", ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"jjj", ",", 
           RowBox[{"Total", "[", 
            RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"connectivitymat", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Join", ",", 
         RowBox[{"{", 
          RowBox[{"connectivitymat", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DiagonalMatrix", "[", 
               RowBox[{"Range", "[", 
                RowBox[{"Total", "[", 
                 RowBox[{"Dimensions", "[", "kasteleyn", "]"}], "]"}], "]"}], 
               "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"0", "\[Rule]", 
                RowBox[{"{", "}"}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"zz_Integer", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", "zz", "}"}], "}"}]}], "}"}]}]}], "}"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"connectivitymat", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"Total", ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"turnIntoContribution", "[", "#", "]"}], "&"}], ",", 
           "connectivitymat", ",", 
           RowBox[{"{", "3", "}"}]}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "connectivitymat"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPathMatricesAndMinors", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "snks", ",", "multiplic", ",", 
       "externalnodes", ",", "jj", ",", "pathmat", ",", "sources", ",", 
       "sinks", ",", "numberofdenomintaorterms", ",", "loopdenom", ",", 
       "variablesmatrix", ",", "sourceedges", ",", "sinkedges", ",", 
       "usefulloopvariables", ",", "minors", ",", "matroidpoly", ",", 
       "niceminors", ",", "pp", ",", "theperfsinminors", ",", "bigpathmatrix",
        ",", "externalrows", ",", "externalcolumns", ",", "finalpathmatrix", 
       ",", "traditionalpathmat", ",", "loopdenominator", ",", 
       "truemapminortoperfmatch", ",", "expecteddenominatorloops"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"perfs", "=", 
       RowBox[{"perfectMatchings", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"srcs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSourceNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"snks", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getSinkNodes", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
          "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"multiplic", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Tally", "[", "srcs", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Tally", "[", "srcs", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"externalnodes", "=", 
       RowBox[{"getOrderingExternalNodesDefault", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "externalnodes", "]"}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"We", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"multiplic", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "9"}], "&&", 
               RowBox[{
                RowBox[{"Count", "[", 
                 RowBox[{
                  RowBox[{"multiplic", "[", 
                   RowBox[{"[", 
                    RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"multiplic", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
                "1"}]}], 
              RowBox[{"(*", 
               RowBox[{"10", "-", 
                RowBox[{"multiplic", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}]}], "*)"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pathmat", "=", 
                RowBox[{"pathMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"pathmat", "=!=", "Null"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"sources", "=", 
                   RowBox[{"srcs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sinks", "=", 
                   RowBox[{"snks", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pathmat", "\[Equal]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Length", "[", "sources", "]"}], "\[NotEqual]", 
                    "0"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pathmat", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "pathmat", "]"}], "=!=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "[", "sources", "]"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"sources", ",", "sinks"}], "]"}], "]"}]}], 
                    "}"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! Its size \
is not correct!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"loopdenom", "=", 
                   RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"loopdenom", "===", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "=", "1"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "=", 
                    RowBox[{"Length", "[", "loopdenom", "]"}]}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"numberofdenomintaorterms", "\[NotEqual]", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! The \
denominators do not all have the right number of terms\>\""}], "]"}], ";"}]}],
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"variablesmatrix", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "#", "]"}], ",", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "&"}], 
                    ",", "pathmat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sourceedges", "=", 
                   RowBox[{"getSourceEdges", "[", 
                    RowBox[{"b", ",", "c", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sinkedges", "=", 
                   RowBox[{"getSinkEdges", "[", 
                    RowBox[{"b", ",", "c", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"usefulloopvariables", "=", 
                   RowBox[{"Variables", "[", 
                    RowBox[{
                    RowBox[{"loopVariablesBasis", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Variables", "[", "pathmat", "]"}], "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "sourceedges"}], "]"}], "&"}], ",", 
                    "variablesmatrix", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"usefulloopvariables", ",", "sourceedges"}], 
                    "]"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "sinkedges"}], "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "variablesmatrix", "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"usefulloopvariables", ",", "sinkedges"}], "]"}], 
                    "]"}]}], ")"}]}], ")"}], "=!=", "True"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! It \
doesn't seem to be going from sources to sinks\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"pathmat", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"minors", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"pathmat", ",", 
                    RowBox[{"Length", "[", "pathmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Power", "[", 
                    RowBox[{"___", ",", "num1_"}], "]"}], "/;", 
                    RowBox[{"num1", ">", "1"}]}], ")"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"num2_", ",", "___"}], "]"}], "/;", 
                    RowBox[{"num2", ">", "1"}]}], ")"}]}]}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! Its \
minors do not simplify\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "NB", " ", "expecteddenominatorloops", " ", "SOMETIMES", 
                    " ", "HAS", " ", "POSITIVE", " ", "TERMS", " ", "AS", " ", 
                    RowBox[{"WELL", "!"}], " ", "This", " ", "only", " ", 
                    "works", " ", "for", " ", "small", " ", "numbers", " ", 
                    "of", " ", "loops", " ", "and", " ", 
                    RowBox[{"won", "'"}], "t", " ", "work", " ", "in", " ", 
                    RowBox[{
                    RowBox[{"general", "!!"}], "!"}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"matroidpoly", "=", 
                    RowBox[{"matroidPolytope", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"expecteddenominatorloops", "=", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "+", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "matroidpoly", "]"}], ",", 
                    "#"}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "matroidpoly", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "jj", ",", "___"}], "}"}]}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "jj"}], "]"}]}], 
                    "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"expecteddenominatorloops", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], 
                    RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], "]"}], "]"}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"niceminors", "=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minors", " ", "expecteddenominatorloops"}], 
                    "]"}], "]"}], "]"}], "]"}], "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"pp", "[", "iii", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], "]"}]}],
                     ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"theperfsinminors", "=", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "mino", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "mino", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"List", "@@", "mino"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "mino", "}"}]}], ";"}]}], "]"}], ";", 
                    "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",",
                     "niceminors"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"pp", "[", "zz_", "]"}]}], "\[Rule]", 
                    RowBox[{"pp", "[", "zz", "]"}]}], "}"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "===", "pp"}], "&"}], 
                    ",", 
                    RowBox[{"Flatten", "[", "theperfsinminors", "]"}]}], 
                    "]"}]}], ")"}], "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! Its \
minors are not equal to sums of perfect matchings\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"DeleteDuplicates", ",", 
                    RowBox[{"theperfsinminors", "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pp", "[", "iii", "]"}], "\[Rule]", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"srcs", "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], "\[Rule]", "jjj"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                    "]"}]}], "}"}]}], "]"}]}]}], "]"}], "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], "=!=", 
                    RowBox[{"Delete", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "pathmat", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "pathmat", "]"}], "}"}]}], "]"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", "0"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the path matrix! The \
perfect matchings contributing to each minor do not have the correct source \
sets\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"theperfsinminors", "=!=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "mino", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "mino", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"List", "@@", "mino"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "mino", "}"}]}], ";"}]}], "]"}], ";", 
                    "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     "]"}], ",", "0"}], "]"}], "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"pp", "[", "iii", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"pp", "[", "zz_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"pp", "[", "zz", "]"}]}], "}"}]}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with minorsAsPerfectMatchings! \
The perfect matchings contributing to each minor do not correspond to the \
calculation done directly by the path matrix\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{"Now", " ", 
                    RowBox[{"we", "'"}], "ll", " ", "check", " ", "whether", 
                    " ", "minorsAsPerfectMatchings", " ", "is", " ", 
                    "completely", " ", "correct"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"bigpathmatrix", "=", 
                   RowBox[{"connectivityMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"externalrows", "=", 
                   RowBox[{"getSourceNodes", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"externalcolumns", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "a", "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "a", "]"}], "+", 
                    RowBox[{"Length", "[", "c", "]"}]}]}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", "1"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Total", "[", 
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "c"}], "]"}], "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"finalpathmatrix", "=", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"bigpathmatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"externalrows", ",", "externalcolumns"}], "]"}], 
                    "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"finalpathmatrix", "\[Equal]", "pathmat"}], "]"}],
                     "=!=", "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< and jj=\>\"", ",", "jj", ",", 
                    "\"\< : There's a problem with the path matrix! It \
doesn't give the same result as what is found using the alternative method!\>\
\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"traditionalpathmat", "=", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"traditionalPathMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"finalpathmatrix", "\[Equal]", "pathmat"}], "]"}],
                     "=!=", "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< and jj=\>\"", ",", "jj", ",", 
                    "\"\< : There's a problem with the path matrix! It \
doesn't give the same result as what is found using the traditional method!\>\
\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"finalpathmatrix", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"minors", "=", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"finalpathmatrix", ",", 
                    RowBox[{"Length", "[", "finalpathmatrix", "]"}]}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"loopdenominator", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], " ", 
                    RowBox[{"giveMeLoopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"truemapminortoperfmatch", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minors", " ", "loopdenominator"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "]"}], "=!=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", "truemapminortoperfmatch", "]"}],
                     "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< and jj=\>\"", ",", "jj", ",", 
                    
                    "\"\< : There's a problem with minorsAsPerfectMatchings! \
It doesn't give the same result as what is found using the alternative \
method!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestPathMatricesAndMinors", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPathMatricesAndMinors", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6848347894936*^9, 
   3.684834809153864*^9}, {3.684835207776204*^9, 3.684835234505227*^9}, {
   3.6848354057346563`*^9, 3.6848355857899737`*^9}, {3.684835773309247*^9, 
   3.684835814243683*^9}, {3.6848359279518533`*^9, 3.684836014110338*^9}, {
   3.684836426772529*^9, 3.684836442754021*^9}, {3.6848375343054214`*^9, 
   3.6848375467218227`*^9}, {3.6848392852717233`*^9, 
   3.6848393157355256`*^9}, {3.68483935130013*^9, 3.6848394194085107`*^9}, {
   3.684839591334359*^9, 3.684839591553114*^9}, {3.6848396222529087`*^9, 
   3.684839667619683*^9}, {3.684840133929549*^9, 3.6848401390649247`*^9}, {
   3.684840400424701*^9, 3.6848404352795105`*^9}, {3.684840549677243*^9, 
   3.6848406270943775`*^9}, {3.6848407687755923`*^9, 
   3.6848407797046127`*^9}, {3.6848409033487096`*^9, 3.68484094586121*^9}, {
   3.6848409805510206`*^9, 3.6848410661838007`*^9}, {3.684841096427416*^9, 
   3.684841138431076*^9}, {3.684841198328536*^9, 3.684841239550929*^9}, {
   3.6848413748165674`*^9, 3.6848414141851764`*^9}, {3.684841462374319*^9, 
   3.684841514971063*^9}, {3.6848415868703575`*^9, 3.684841606945702*^9}, {
   3.684841640103861*^9, 3.6848416415810204`*^9}, {3.6849919246201367`*^9, 
   3.6849919297166805`*^9}, {3.6851147776727247`*^9, 
   3.6851147777977285`*^9}, {3.6851606430898285`*^9, 3.685160643308591*^9}, {
   3.6851681854261937`*^9, 3.6851681858480988`*^9}, {3.6851771418855376`*^9, 
   3.6851771676801505`*^9}, 3.685684431791121*^9, {3.6856850892180643`*^9, 
   3.685685099771006*^9}, {3.687593951115068*^9, 3.68759395196211*^9}, 
   3.687613260550353*^9, {3.6881084959266663`*^9, 3.688108502519506*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.688794237381403*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.688796680850112*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6848347417400913`*^9, 3.684834741916008*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "dimensionGrassmannian"}], 
   ",", " ", "reducibilityQ"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.685006513827117*^9, 3.685006587109598*^9, {3.6852049821925707`*^9, 
   3.685204982556488*^9}, 3.6876125180549517`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NEWindependentPluckerRelations", "[", 
    RowBox[{"k_Integer", ",", "n_Integer", ",", 
     RowBox[{"indexlistminorstozero_:", 
      RowBox[{"{", "}"}]}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "pluckerrel", ",", "numindeppluckerrelations", ",", "solutions", ",", 
       "independentrelations", ",", "possibleindependentrelations", ",", 
       "newsolution", ",", "ii", ",", "kk", ",", "possiblenewsolutions"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pluckerrel", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"pluckerRelations", "[", 
           RowBox[{"k", ",", "n"}], "]"}], "/.", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"HoldForm", "[", "bipartiteSUSY`minor", "]"}], "[", 
               RowBox[{"Sequence", "@@", "#"}], "]"}], "\[Rule]", "0"}], 
             "&"}], ",", "indexlistminorstozero"}], "]"}]}], ",", "True"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "The", " ", "max", " ", "number", " ", "of", " ", "independent", " ", 
        "plucker", " ", "relations"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"numindeppluckerrelations", "=", 
       RowBox[{
        RowBox[{"Binomial", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "-", "1", "-", 
        RowBox[{"k", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"solutions", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "If", " ", "we", " ", "have", " ", "any", " ", "plukcer", " ", 
         "relations"}], ",", " ", 
        RowBox[{"start", " ", "solving", " ", "them"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pluckerrel", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"independentrelations", "=", 
          RowBox[{"pluckerrel", "[", 
           RowBox[{"[", 
            RowBox[{"{", "1", "}"}], "]"}], "]"}]}], ";", 
         RowBox[{"(*", 
          RowBox[{
          "this", " ", "variable", " ", "will", " ", "contain", " ", "all", 
           " ", "independent", " ", "relations"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"newsolution", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Solve", "[", 
             RowBox[{"And", "@@", "independentrelations"}], "]"}], ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"zz", ",", 
               RowBox[{"_", "\[Rule]", "0"}]}], "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"solutions", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"solutions", ",", 
            RowBox[{"newsolution", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
         RowBox[{"(*", 
          RowBox[{
          "this", " ", "variable", " ", "will", " ", "contain", " ", "all", 
           " ", "independent", " ", "solutions"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "Go", " ", "through", " ", "the", " ", "remaining", " ", "plucker",
             " ", 
            RowBox[{"relations", ".", " ", "If"}], " ", "the", " ", "next", 
            " ", "Plucker", " ", "relations", " ", "is", " ", "not", " ", 
            "triviliazied", " ", "by", " ", "the", " ", "solutions", " ", 
            "we", " ", "already", " ", "found", " ", "to", " ", "the", " ", 
            "previous", " ", "relations"}], ",", " ", 
           RowBox[{
           "add", " ", "it", " ", "to", " ", "the", " ", "list", " ", "of", 
            " ", "independent", " ", "relations"}], ",", " ", 
           RowBox[{"and", " ", "solve", " ", 
            RowBox[{"it", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"ii", "=", "2"}], ",", 
           RowBox[{"ii", "\[LessEqual]", 
            RowBox[{"Length", "[", "pluckerrel", "]"}]}], ",", 
           RowBox[{"ii", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Simplify", "[", 
                RowBox[{
                 RowBox[{"pluckerrel", "[", 
                  RowBox[{"[", "ii", "]"}], "]"}], "//.", "solutions"}], 
                "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"possibleindependentrelations", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"independentrelations", ",", 
                  RowBox[{"pluckerrel", "[", 
                   RowBox[{"[", "ii", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"newsolution", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Solve", "[", 
                   RowBox[{"And", "@@", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "possibleindependentrelations", "//.", "solutions"}], 
                    "]"}]}], "]"}], ",", 
                  RowBox[{"zz_", "/;", 
                   RowBox[{"MemberQ", "[", 
                    RowBox[{"zz", ",", 
                    RowBox[{"_", "\[Rule]", "0"}]}], "]"}]}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"For", "[", 
                RowBox[{
                 RowBox[{"kk", "=", "1"}], ",", 
                 RowBox[{"kk", "\[LessEqual]", 
                  RowBox[{"Length", "[", "newsolution", "]"}]}], ",", 
                 RowBox[{"kk", "++"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"possiblenewsolutions", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{"solutions", ",", 
                    RowBox[{"newsolution", "[", 
                    RowBox[{"[", "kk", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "Tidy", " ", "up", " ", "the", " ", "solutions", " ", "so",
                     " ", "that", " ", "they", " ", "all", " ", "depend", " ",
                     "on", " ", "the", " ", "same", " ", "set", " ", "of", 
                    " ", "variables"}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"possiblenewsolutions", "=", 
                   RowBox[{"MapThread", "[", 
                    RowBox[{"Rule", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                    "possiblenewsolutions"}], "]"}], ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
                    "possiblenewsolutions"}], "]"}], "//.", 
                    "possiblenewsolutions"}], "]"}], "]"}], "]"}]}], "}"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"possiblenewsolutions", ",", 
                    RowBox[{"_", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "independentrelations", "=", 
                    "possibleindependentrelations"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"solutions", "=", "possiblenewsolutions"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Break", "[", "]"}]}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "If", " ", "we", " ", "have", " ", "found", " ", "as", " ", 
                  "many", " ", "solutions", " ", "as", " ", "there", " ", 
                  "are", " ", "independent", " ", "relations", " ", "in", " ",
                   "total"}], ",", " ", 
                 RowBox[{"stop", " ", "here"}], ",", " ", 
                 RowBox[{
                 "since", " ", "the", " ", "remaining", " ", "Plucker", " ", 
                  "relations", " ", "cannot", " ", "be", " ", 
                  "independent"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "solutions", "]"}], "\[Equal]", 
                  "numindeppluckerrelations"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Break", "[", "]"}], ";"}]}], "\[IndentingNewLine]",
                 "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "if", " ", "there", " ", "are", " ", "no", " ", "Plucker", " ", 
           "relations"}], ",", " ", 
          RowBox[{"return", " ", "empty", " ", "sets"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"independentrelations", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"independentrelations", ",", "solutions"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestGrassmannianAndReducibility", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "fullreduction", ",", "newa", ",", "newb", ",", "newc", ",", "newd", 
       ",", "perfs", ",", "minloopnumber", ",", "Cmat", ",", "planar", ",", 
       "entries", ",", "minors", ",", "positionzeros", ",", "srcK", ",", 
       "endN", ",", "indiceszerominors", ",", "indeppluckrels", ",", "dimC", 
       ",", "edges", ",", "redgauging1", ",", "moduligauging1", ",", 
       "redgauging2", ",", "pmatrix", ",", "redscattering", ",", 
       "numberofzerominors", ",", "didyoukillpluckers", ",", 
       "originalorder3relations", ",", "didyoukillDOF", ",", 
       "returnModuliSpace", ",", "pluckerindices", ",", "minorlist", ",", 
       "posdidnotkillpluckers", ",", "areThereMoreRelations"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "+", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"reducibilityBFTedges", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "\[LessEqual]", "10"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"fullreduction", "=", 
             RowBox[{"reductionGraphBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"fullreduction", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "}"}], "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Last", "[", 
                    RowBox[{"reductionGraphBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                    "]"}], "]"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
              ",", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"dimensionPolytope", "[", 
                RowBox[{"matchingPolytope", "[", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "]"}], "]"}], "=!=", 
               RowBox[{"dimensionGrassmannian", "[", 
                RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 
                 "\"\< : There's a problem with dimensionGrassmannian! When a \
graph is reduced by looking at the moduli space, the master space should have \
the same dimension as the Grassmannian!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pmatrix", "=", 
          RowBox[{"matchingPolytope", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"minloopnumber", "=", 
             RowBox[{"Length", "[", 
              RowBox[{"Position", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", 
                 RowBox[{"matroidPolytope", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                ",", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"matroidPolytope", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                 "[", 
                 RowBox[{"[", 
                  RowBox[{"lowNumberLoopsPMpos", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                 "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"minloopnumber", "\[LessEqual]", "3"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"redscattering", "=", 
                RowBox[{"reducibilityQ", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                  "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Cmat", "=", 
                RowBox[{"pathMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dimC", "=", 
                RowBox[{"dimensionGrassmannian", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"Cmat", "===", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"dimC", "=!=", "0"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : The dimension of the Grassmannian should zero \
when the path matrix is C={} .\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}], "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"planar", "=", 
                   RowBox[{"planarityQ", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"entries", "=", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "Cmat", "]"}], ",", 
                    RowBox[{"0", "|", "1"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "we", " ", "are", " ", "not", " ", "on", " ", "a", " ", 
                    "secret", " ", 
                    RowBox[{"pole", ".", " ", "We"}], " ", "can", " ", "then",
                     " ", "use", " ", "the", " ", "independent", " ", 
                    "plucker", " ", "relations", " ", "to", " ", "determine", 
                    " ", "the", " ", "dimension"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"srcK", "=", 
                   RowBox[{"getK", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"endN", "=", 
                   RowBox[{"getN", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"minors", "=", 
                   RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"Cmat", ",", 
                    RowBox[{"Length", "[", "Cmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"positionzeros", "=", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", "0", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"indiceszerominors", "=", 
                   RowBox[{
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "endN", "]"}], ",", 
                    RowBox[{"{", "srcK", "}"}]}], "]"}], "[", 
                    RowBox[{"[", "positionzeros", "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"indeppluckrels", "=", 
                   RowBox[{
                    RowBox[{"NEWindependentPluckerRelations", "[", 
                    RowBox[{"srcK", ",", "endN", ",", "indiceszerominors"}], 
                    "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"planar", "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "entries", "]"}], "\[LessEqual]", 
                    "dimC"}], ")"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "we", " ", "are", " ", "not", " ", "on", " ", "a", " ", 
                    "secret", " ", 
                    RowBox[{"pole", ".", " ", "We"}], " ", "can", " ", "then",
                     " ", "use", " ", "the", " ", "independent", " ", 
                    "plucker", " ", "relations", " ", "to", " ", "determine", 
                    " ", "the", " ", "dimension"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "minors", "]"}], "-", 
                    RowBox[{"Length", "[", "positionzeros", "]"}], "-", 
                    RowBox[{"Length", "[", "indeppluckrels", "]"}], "-", 
                    "1"}], "=!=", "dimC"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : The dimension of the Grassmannian should be equal \
to (# of Pluckers - # of indep Plucker relations - 1), when we are not on \
secret poles!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"(*", 
                    RowBox[{
                    "we", " ", "may", " ", "have", " ", "secret", " ", 
                    "relations", " ", "among", " ", "the", " ", "pluckers"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"dimensionPolytope", "[", "pmatrix", "]"}], 
                    "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "minors", "]"}], "-", 
                    RowBox[{"Length", "[", "positionzeros", "]"}], "-", 
                    RowBox[{"Length", "[", "indeppluckrels", "]"}], "-", 
                    "1"}], ")"}]}], "&&", "redscattering"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "the", " ", "graph", " ", "is", " ", "reducible"}], ",", 
                    " ", 
                    RowBox[{
                    "so", " ", "the", " ", "naive", " ", "dimension", " ", 
                    "counting", " ", "is", " ", 
                    RowBox[{"overshooting", ".", " ", "Hence"}]}], ",", " ", 
                    RowBox[{"we", " ", "have", " ", "secret", " ", 
                    RowBox[{"relations", "."}]}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "minors", "]"}], "-", 
                    RowBox[{"Length", "[", "positionzeros", "]"}], "-", 
                    RowBox[{"Length", "[", "indeppluckrels", "]"}], "-", 
                    "1"}], "\[LessEqual]", "dimC"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    
                    "\"\< : There's a problem with dimensionGrassmannian! The \
dimension of the Grassmannian should be less than the number of non-trivial \
entries, when we are on secret poles!\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"edges", "=", 
          RowBox[{"Variables", "[", 
           RowBox[{"joinupKasteleyn", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"redgauging2", "=", 
          RowBox[{"reducibilityQ", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True", ",", 
            "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"redgauging1", "=", 
             RowBox[{"reducibilityQ", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True", 
               ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"moduligauging1", "=", 
             RowBox[{"moduliSpaceBFT", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False", ",", 
               "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"perfs", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{"redgauging1", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                    "pmatrix"}], "]"}]}], ",", "False"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is reducible but there are no edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduligauging1", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", "moduligauging1", "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
                    "pmatrix"}], "]"}]}], ",", "False"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is not reducible but there are edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "edges", "]"}], "&&", 
                  RowBox[{"redgauging1", "=!=", "True"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    
                    "\"\< : There's a problem with reducibilityQ! This \
example should be reducible, though reducibilityQ does not return True\>\""}],
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"returnModuliSpace", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "theedge", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Block", "[", 
             RowBox[{
              RowBox[{"{", "return", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"perfectMatchings", "[", 
                   RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"theedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"theedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"theedge", "\[Rule]", "0"}], "}"}]}], ",", "d"}], 
                   "]"}], "\[NotEqual]", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"return", "=", 
                   RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"theedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"theedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"theedge", "\[Rule]", "0"}], "}"}]}], ",", "d", 
                    ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"return", "=", 
                   RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "return"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{"redgauging2", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"edges", ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"returnModuliSpace", "[", "zz", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}]}], "]"}], "===", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is reducible but there are no edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}], ",", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"edges", ",", 
                    RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"returnModuliSpace", "[", "zz", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"turnIntoPolytope", "[", 
                    RowBox[{"moduliSpaceBFT", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "2"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}]}], "]"}], "=!=", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The BFT \
graph is not reducible but there are edges I can remove without removing \
points in the moduli space!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"redgauging2", "=!=", "True"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with reducibilityQ! This example \
should be reducible, though reducibilityQ does not return True\>\""}], "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"perfs", "\[NotEqual]", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{"minloopnumber", "\[LessEqual]", "3"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Cmat", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"numberofzerominors", "=", 
                RowBox[{"Length", "[", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"Cmat", ",", 
                    RowBox[{"Length", "[", "Cmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", "0"}], 
                  "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"didyoukillpluckers", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "edgeinput", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "smallgrass", ",", "numzerominors", ",", "thenewkast"}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"thenewkast", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"edgeinput", "\[Rule]", "0"}], "}"}]}], ",", 
                    "d"}], "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"perfectMatchings", "@@", "thenewkast"}], ")"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"smallgrass", "=", 
                    RowBox[{"pathMatrix", "@@", "thenewkast"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"smallgrass", "===", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", 
                    RowBox[{"numberofzerominors", "+", "1"}]}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"smallgrass", ",", 
                    RowBox[{"Length", "[", "smallgrass", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", "0"}], 
                    "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"numzerominors", "=", 
                    RowBox[{"numberofzerominors", "+", "1"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"numzerominors", ">", "numberofzerominors"}]}]}], 
                    "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",", "edges"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"planar", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"pluckerindices", "=", 
                   RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "endN", "]"}], ",", 
                    RowBox[{"{", "srcK", "}"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"minorlist", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"HoldForm", "[", "minor", "]"}], "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "&"}], ",", 
                    "pluckerindices"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"originalorder3relations", "=", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{"minorlist", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "/.", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Rule", ",", 
                    RowBox[{"{", 
                    RowBox[{"minorlist", ",", 
                    RowBox[{"(", 
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                    ")"}]}], "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"areThereMoreRelations", "=", 
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "inputedge", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "order3relations", ",", "outputTrueFalse", ",", 
                    "minorsaspms"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfectMatchings", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    "d"}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"pathMatrix", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ",", 
                    "d"}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"minorsaspms", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"inputedge", "\[Rule]", "0"}], "}"}]}], ")"}]}], 
                    ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"minorsaspms", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"Length", "[", "pluckerindices", "]"}]}], "]"}]}],
                     ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"order3relations", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{"minorlist", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "/.", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Rule", ",", 
                    RowBox[{"{", 
                    RowBox[{"minorlist", ",", "minorsaspms"}], "}"}]}], 
                    "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"outputTrueFalse", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "order3relations", "]"}], "-", 
                    RowBox[{"Length", "[", 
                    RowBox[{"DeleteDuplicates", "[", "order3relations", "]"}],
                     "]"}]}], ")"}], ">", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "originalorder3relations", "]"}], 
                    "-", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "DeleteDuplicates", "[", "originalorder3relations", "]"}],
                     "]"}]}], ")"}]}]}], ";", "\[IndentingNewLine]", 
                    "outputTrueFalse"}]}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"posdidnotkillpluckers", "=", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"didyoukillpluckers", ",", "False"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"didyoukillpluckers", "[", 
                    RowBox[{"[", "posdidnotkillpluckers", "]"}], "]"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"areThereMoreRelations", "[", "#", "]"}], "&"}], 
                    ",", 
                    RowBox[{"edges", "[", 
                    RowBox[{"[", "posdidnotkillpluckers", "]"}], "]"}]}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"didyoukillDOF", "=", "didyoukillpluckers"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"redscattering", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"didyoukillDOF", ",", "False"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The \
scattering graph is reducible, even though there are no edges which I can \
remove that keep the same number of elements in the Grassmannian \
matrix!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"didyoukillDOF", ",", "False"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityQ! The \
scattering graph is not reducible, even though there are edges which I can \
remove that keep the same number of elements in the Grassmannian \
matrix!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestGrassmannianAndReducibility", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianAndReducibility", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685006572250659*^9, 
   3.6850065944345016`*^9}, {3.685006798938786*^9, 3.6850068052850275`*^9}, {
   3.6850071983404217`*^9, 3.6850072268690195`*^9}, {3.685007291921028*^9, 
   3.6850073405765553`*^9}, {3.685007428081041*^9, 3.6850074454001245`*^9}, {
   3.6850075249606423`*^9, 3.6850075417343884`*^9}, {3.685010106456232*^9, 
   3.6850101813943276`*^9}, {3.685010229563541*^9, 3.685010240557389*^9}, 
   3.6850102990145082`*^9, {3.6850103914748693`*^9, 3.6850103919932165`*^9}, {
   3.6850156409682584`*^9, 3.685015641505153*^9}, 3.685015731695116*^9, {
   3.6850160285011168`*^9, 3.6850160711364155`*^9}, {3.685016166553125*^9, 
   3.685016176609563*^9}, {3.685016274387309*^9, 3.6850163879943933`*^9}, {
   3.685017876908708*^9, 3.685017906366027*^9}, 3.6850179483022366`*^9, {
   3.685018066695913*^9, 3.685018093538677*^9}, {3.6850181428652983`*^9, 
   3.685018187521451*^9}, {3.685018296411391*^9, 3.6850182965494833`*^9}, {
   3.685018523462476*^9, 3.6850186036008615`*^9}, {3.6850194838921223`*^9, 
   3.685019544613428*^9}, 3.6850195831524343`*^9, {3.6850200296641884`*^9, 
   3.685020053611603*^9}, {3.685020154515847*^9, 3.6850201560103593`*^9}, {
   3.6850202236421127`*^9, 3.6850202546797295`*^9}, {3.685020312835369*^9, 
   3.6850203227652187`*^9}, {3.685020355495496*^9, 3.6850203848967*^9}, {
   3.685022777252514*^9, 3.685022806765155*^9}, {3.685024382446768*^9, 
   3.685024399996913*^9}, {3.6850244448118043`*^9, 3.685024471633343*^9}, {
   3.6850245043464518`*^9, 3.6850245172607684`*^9}, {3.6850245670148087`*^9, 
   3.685024581039236*^9}, 3.6850246538377743`*^9, {3.6850246979740534`*^9, 
   3.685024726561909*^9}, {3.685024759534542*^9, 3.685024915243692*^9}, {
   3.685025018862587*^9, 3.685025021740408*^9}, 3.6850339529092207`*^9, 
   3.6850340161261716`*^9, {3.685034065225586*^9, 3.6850341569049673`*^9}, {
   3.6850343037925587`*^9, 3.6850343038081846`*^9}, {3.68507904832572*^9, 
   3.685079150013035*^9}, {3.685079181961814*^9, 3.6850791820132074`*^9}, {
   3.6850801326118546`*^9, 3.685080148142502*^9}, 3.6850802763935366`*^9, {
   3.6850803360785227`*^9, 3.6850804107446384`*^9}, {3.685080460100362*^9, 
   3.685080473647889*^9}, {3.6850805143786*^9, 3.6850805599318595`*^9}, {
   3.685080598198636*^9, 3.685080621980982*^9}, {3.6850807505035286`*^9, 
   3.6850808151063037`*^9}, {3.6850808715670815`*^9, 
   3.6850809332101183`*^9}, {3.6850810075578313`*^9, 
   3.6850810282443714`*^9}, {3.68508107602518*^9, 3.68508129125138*^9}, {
   3.6850813327948465`*^9, 3.6850813430905704`*^9}, {3.6850820221873426`*^9, 
   3.6850820272454185`*^9}, {3.6850834633340483`*^9, 
   3.6850834633809185`*^9}, {3.6851022167906113`*^9, 
   3.6851022419997616`*^9}, {3.6851028996022053`*^9, 3.685102918139331*^9}, {
   3.6851029654292603`*^9, 3.6851030325310345`*^9}, {3.6851040280347404`*^9, 
   3.685104034611422*^9}, {3.6851040658380694`*^9, 3.6851041728220673`*^9}, {
   3.685104271242422*^9, 3.6851042720640845`*^9}, {3.685104309766074*^9, 
   3.685104313769066*^9}, {3.6851043442000117`*^9, 3.6851043818701334`*^9}, {
   3.685104682885183*^9, 3.685104686262794*^9}, 3.685105366554883*^9, {
   3.685105704850353*^9, 3.68510570972126*^9}, {3.6852053257632165`*^9, 
   3.685205351408187*^9}, {3.6852053841571193`*^9, 3.6852054073130283`*^9}, 
   3.685684437838966*^9, {3.685685111952415*^9, 3.6856851214505873`*^9}, {
   3.688108512365345*^9, 3.68810851975109*^9}, 3.6889803130039463`*^9, 
   3.6894203105944557`*^9, 3.68942050497086*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.689422114563327*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.689428460653754*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "reducibilityEdges"}], ",", 
   " ", "reductionGraph"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6850835625157413`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestReductions", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "minloopnumber", ",", "reducibilitygauging1", ",", 
       "rededgesgauging1", ",", "fullreductiongauging1", ",", 
       "reducibilitygauging2", ",", "reducibilityscattering", ",", 
       "rededgesgauging2", ",", "rededgesscattering", ",", 
       "fullreductiongauging2", ",", "fullreductionscattering"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "+", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"minloopnumber", "=", 
             RowBox[{"Length", "[", 
              RowBox[{"Position", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", 
                 RowBox[{"matroidPolytope", "[", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                ",", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"matroidPolytope", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                 "[", 
                 RowBox[{"[", 
                  RowBox[{"lowNumberLoopsPMpos", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
                 "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"minloopnumber", "\[LessEqual]", "3"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"reducibilitygauging1", "=", 
                   RowBox[{"reducibilityQ", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                    "True", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"rededgesgauging1", "=", 
                   RowBox[{"reducibilityEdges", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                    "True", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{"reducibilitygauging1", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"rededgesgauging1", "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityEdges under \
gauging 1! The graph is reducible and yet we may not remove any edges\>\""}], 
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"rededgesgauging1", "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityEdges under \
gauging 1! The graph is not reducible and yet we may remove some edges\>\""}],
                     "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "rededgesgauging1", "]"}], 
                    "\[LessEqual]", "10"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"fullreductiongauging1", "=", 
                    RowBox[{"reductionGraph", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                    "True", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"fullreductiongauging1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"consistentEdgeRemoval", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", "rededgesgauging1", "}"}], "]"}]}], "]"}], 
                    "]"}]}], "]"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reductionGraph under \
gauging 1! It doesn't even contain the edges in reducibilityEdges\>\""}], 
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"fullreductiongauging1", "=!=", 
                    RowBox[{"reductionGraphBFT", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "1", ",", "False",
                     ",", "True"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reductionGraph under \
gauging 1! It does not correspond to reductionGraphBFT\>\""}], "]"}], ";"}]}],
                     "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"reducibilitygauging2", "=", 
                RowBox[{"reducibilityQ", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"reducibilityscattering", "=", 
                RowBox[{"reducibilityQ", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                  "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"rededgesgauging2", "=", 
                RowBox[{"reducibilityEdges", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", "True",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"rededgesscattering", "=", 
                RowBox[{"reducibilityEdges", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                  "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"reducibilitygauging2", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"rededgesgauging2", "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityEdges under \
gauging 2! The graph is reducible and yet we may not remove any edges\>\""}], 
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"rededgesgauging2", "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityEdges under \
gauging 2! The graph is not reducible and yet we may remove some edges\>\""}],
                     "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"reducibilityscattering", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"rededgesscattering", "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityEdges for \
scattering! The graph is reducible and yet we may not remove any edges\>\""}],
                     "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"rededgesscattering", "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reducibilityEdges for \
scattering! The graph is not reducible and yet we may remove some \
edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "rededgesgauging2", "]"}], 
                  "\[LessEqual]", "10"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"fullreductiongauging2", "=", 
                   RowBox[{"reductionGraph", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                    "True", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"fullreductiongauging2", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"consistentEdgeRemoval", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", "rededgesgauging2", "}"}], "]"}]}], "]"}], 
                    "]"}]}], "]"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reductionGraph under \
gauging 2! It doesn't even contain the edges in reducibilityEdges\>\""}], 
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"fullreductiongauging2", "=!=", 
                    RowBox[{"reductionGraphBFT", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "2", ",", "False",
                     ",", "False"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reductionGraph under \
gauging 2! It does not correspond to reductionGraphBFT\>\""}], "]"}], ";"}]}],
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "rededgesscattering", "]"}], 
                  "\[LessEqual]", "10"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"fullreductionscattering", "=", 
                   RowBox[{"reductionGraph", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "False", ",", 
                    "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"fullreductionscattering", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"consistentEdgeRemoval", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", "rededgesscattering", "}"}], "]"}]}], "]"}], 
                    "]"}]}], "]"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reductionGraph for \
scattering! It doesn't even contain the edges in reducibilityEdges\>\""}], 
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "fullreductionscattering", "]"}], 
                    "\[LessEqual]", "100"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", "#"}], ",", 
                    RowBox[{"b", "/.", "#"}], ",", 
                    RowBox[{"c", "/.", "#"}], ",", "d"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    "fullreductionscattering", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "=!=", 
                    RowBox[{"{", 
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
                    "}"}]}], "|", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with reductionGraph for \
scattering! Not all reductions end up with a Grassmannian of the same \
dimension\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestReductions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductions", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductions", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductions", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestReductions", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6850835804542437`*^9, 
   3.685083591227392*^9}, {3.685083682702523*^9, 3.685083685766851*^9}, {
   3.685083725783495*^9, 3.685083777232043*^9}, {3.6850838638380756`*^9, 
   3.685084020076578*^9}, {3.685084055403469*^9, 3.6850841260210123`*^9}, 
   3.6850842744728346`*^9, {3.685084636877079*^9, 3.685084640653119*^9}, {
   3.6850847483053355`*^9, 3.68508475200091*^9}, {3.6850850174505744`*^9, 
   3.685085018563446*^9}, {3.6850854231581745`*^9, 3.6850854264198303`*^9}, {
   3.685105814470922*^9, 3.685105867676779*^9}, {3.6851118687053175`*^9, 
   3.6851121046602125`*^9}, {3.68511221533849*^9, 3.685112219825635*^9}, 
   3.685684443227189*^9, {3.6856851333602037`*^9, 3.685685140296575*^9}, {
   3.688108528667926*^9, 3.688108545909349*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.690611374651786*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.690618673380289*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "nonPluckerPolesQ"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6850862236869335`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestNonPluckerPolesQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "thereduction", ",", "anew", ",", "bnew", ",", "cnew", 
       ",", "dnew", ",", "edges", ",", "minorsaspms", ",", "zerominors"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "+", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"perfs", "\[NotEqual]", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"reducibilityBFTedges", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
             "\[LessEqual]", "8"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reducibilityQ", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"thereduction", "=", 
                RowBox[{"reductionGraph", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                 "}"}], "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Last", "[", "thereduction", "]"}]}], "]"}]}]}], 
               ";"}], "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                 "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"edges", "=", 
             RowBox[{"Variables", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], "]"}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"minorsaspms", "=", 
             RowBox[{"minorsAsPerfectMatchings", "[", 
              RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"zerominors", "=", 
             RowBox[{"Count", "[", 
              RowBox[{"minorsaspms", ",", "0"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"nonPluckerPolesQ", "[", 
               RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], "]"}],
               ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"planarityQ", "[", 
                  RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    
                    "\"\< : There's a problem with nonPluckerPolesQ! It says \
there are nonstandard poles on a planar diagram\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"minorsaspms", "\[NotEqual]", 
                   RowBox[{"{", "}"}]}], "&&", 
                  RowBox[{
                   RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                    "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"#", "\[Rule]", "0"}], "}"}]}], ",", "0"}], "]"}],
                     "\[Equal]", "zerominors"}], "&"}], ",", "edges"}], "]"}],
                     ",", "True"}], "]"}], "\[Equal]", "False"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with nonPluckerPolesQ! It says \
there are nonstandard poles but any edge we remove ends up killing a Plucker \
coordinate\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"minorsaspms", "\[NotEqual]", 
                   RowBox[{"{", "}"}]}], "&&", 
                  RowBox[{"MemberQ", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                    "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"#", "\[Rule]", "0"}], "}"}]}], ",", "0"}], "]"}],
                     "\[Equal]", "zerominors"}], "&"}], ",", "edges"}], "]"}],
                     ",", "True"}], "]"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with nonPluckerPolesQ! It says \
there are no nonstandard poles, but there are edges which when removed don't \
kill any Pluckers\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestNonPluckerPolesQ", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestNonPluckerPolesQ", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestNonPluckerPolesQ", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestNonPluckerPolesQ", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestNonPluckerPolesQ", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6850862326067343`*^9, 
   3.6850863389781704`*^9}, 3.6850864097752976`*^9, {3.6850864537096367`*^9, 
   3.68508645987395*^9}, 3.685086619130787*^9, {3.6850866533054066`*^9, 
   3.68508672732211*^9}, {3.685086771321303*^9, 3.6850868090288153`*^9}, 
   3.6850896034922028`*^9, {3.685089984043668*^9, 3.685089988040824*^9}, 
   3.685684451081044*^9, {3.685685158279798*^9, 3.6856851669603252`*^9}, 
   3.6876257583521757`*^9, {3.688108536763752*^9, 3.688108542133143*^9}, {
   3.6889831820996313`*^9, 3.688983189049399*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.691016071879331*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.691017616375062*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "removableEdges"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.6850876921426344`*^9, 3.6850877003211613`*^9}, {3.685095451911832*^9, 
   3.6850954525782843`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestRemovableEdges", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "thereduction", ",", "anew", ",", "bnew", ",", "cnew", 
       ",", "dnew", ",", "hadtoreduce", ",", "removablesscattering", ",", 
       "removablesgauging1", ",", "removablesgauging2", ",", "numsources", 
       ",", "numexternalnodes", ",", "maxpossibledimension", ",", 
       "matchingpoly", ",", "currentdim", ",", "edges", ",", 
       "dimscattering"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "+", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"perfs", "\[NotEqual]", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"reducibilityBFTedges", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
             "\[LessEqual]", "6"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"reducibilityQ", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"thereduction", "=", 
                RowBox[{"reductionGraph", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                 "}"}], "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Last", "[", "thereduction", "]"}]}], "]"}]}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"hadtoreduce", "=", "True"}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                 "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"hadtoreduce", "=", "False"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"removablesscattering", "=", 
             RowBox[{"removableEdges", "[", 
              RowBox[{
              "anew", ",", "bnew", ",", "cnew", ",", "dnew", ",", "False", 
               ",", "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"bftlabeling", "&&", 
               RowBox[{"hadtoreduce", "\[Equal]", "False"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"removablesgauging1", "=", 
                RowBox[{"removableEdges", "[", 
                 RowBox[{
                 "anew", ",", "bnew", ",", "cnew", ",", "dnew", ",", "False", 
                  ",", "True", ",", "1"}], "]"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"removablesgauging2", "=", 
             RowBox[{"removableEdges", "[", 
              RowBox[{
              "anew", ",", "bnew", ",", "cnew", ",", "dnew", ",", "False", 
               ",", "True", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"numsources", "=", 
             RowBox[{"getK", "[", 
              RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"numexternalnodes", "=", 
             RowBox[{"getN", "[", 
              RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"maxpossibledimension", "=", 
             RowBox[{"numsources", 
              RowBox[{"(", 
               RowBox[{"numexternalnodes", "-", "numsources"}], ")"}]}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"matchingpoly", "=", 
             RowBox[{"matchingPolytope", "[", 
              RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"currentdim", "=", 
             RowBox[{"dimensionPolytope", "[", "matchingpoly", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"maxpossibledimension", "\[NotEqual]", "0"}], "&&", 
               RowBox[{"currentdim", "\[Equal]", "maxpossibledimension"}], "&&", 
               RowBox[{"planarityQ", "[", 
                RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
                "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "removablesscattering", "]"}], "=!=",
                   "numexternalnodes"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with removableEdges! For a \
planar diagram there should be as many edges as external nodes\>\""}], "]"}], 
                  ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"edges", "=", 
             RowBox[{"Variables", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], "]"}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sort", "[", 
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"consistentEdgeRemoval", "[", 
                    RowBox[{
                    "anew", ",", "bnew", ",", "cnew", ",", "dnew", ",", 
                    RowBox[{"{", "#", "}"}], ",", "False", ",", "True"}], 
                    "]"}], "&"}], ",", "edges"}], "]"}], "]"}], ",", 
                    "edges"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                   RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"reducibilityBFTQ", "[", 
                    RowBox[{
                    RowBox[{"anew", "/.", "zz"}], ",", 
                    RowBox[{"bnew", "/.", "zz"}], ",", 
                    RowBox[{"cnew", "/.", "zz"}], ",", "dnew"}], "]"}], 
                    "\[Equal]", "False"}], "&&", 
                    RowBox[{
                    RowBox[{"dimensionPolytope", "[", 
                    RowBox[{"matchingPolytope", "[", 
                    RowBox[{
                    RowBox[{"anew", "/.", "zz"}], ",", 
                    RowBox[{"bnew", "/.", "zz"}], ",", 
                    RowBox[{"cnew", "/.", "zz"}], ",", "dnew"}], "]"}], "]"}],
                     "\[Equal]", 
                    RowBox[{"currentdim", "-", "1"}]}]}]}]}], "]"}], "/.", 
                 RowBox[{"Rule", "\[Rule]", "Plus"}]}], "]"}], "=!=", 
               RowBox[{"Sort", "[", "removablesgauging2", "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with removableEdges under gauging \
2! For a BFT it should be possible to simply use reducibilityBFTQ\>\""}], 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"dimscattering", "=", 
             RowBox[{"dimensionGrassmannian", "[", 
              RowBox[{"anew", ",", "bnew", ",", "cnew", ",", "dnew"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sort", "[", 
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"consistentEdgeRemoval", "[", 
                    RowBox[{
                    "anew", ",", "bnew", ",", "cnew", ",", "dnew", ",", 
                    RowBox[{"{", "#", "}"}], ",", "False", ",", "True"}], 
                    "]"}], "&"}], ",", "edges"}], "]"}], "]"}], ",", 
                    "edges"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                   RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{
                    RowBox[{"anew", "/.", "zz"}], ",", 
                    RowBox[{"bnew", "/.", "zz"}], ",", 
                    RowBox[{"cnew", "/.", "zz"}], ",", "dnew"}], "]"}], "===", 
                    RowBox[{"dimscattering", "-", "1"}]}]}]}], "]"}], "/.", 
                 RowBox[{"Rule", "\[Rule]", "Plus"}]}], "]"}], "=!=", 
               RowBox[{"Sort", "[", "removablesscattering", "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with removableEdges for \
scattering! The edges don't correspond to those edges which, when removed, \
reduce the dimension of the Grassmannian by one!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestRemovableEdges", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestRemovableEdges", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestRemovableEdges", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestRemovableEdges", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestRemovableEdges", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685087710373455*^9, 
   3.6850877180346365`*^9}, {3.685087751518736*^9, 3.685087759028824*^9}, {
   3.6850877981185102`*^9, 3.6850878244558125`*^9}, {3.6850909611426077`*^9, 
   3.685091011747899*^9}, {3.685091105356612*^9, 3.685091308258115*^9}, {
   3.6850913565400715`*^9, 3.6850913970058827`*^9}, {3.6850914634190073`*^9, 
   3.685091483729704*^9}, {3.6850949830499973`*^9, 3.6850949868615804`*^9}, {
   3.6851705374912953`*^9, 3.685170537957991*^9}, 3.6856844550422363`*^9, {
   3.685685177320071*^9, 3.685685188352601*^9}, 3.68762891105212*^9, {
   3.6889832027392673`*^9, 3.688983210955278*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.691110701763329*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.691112795785714*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.68508768831905*^9, 3.6850876889810085`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Here", " ", "we", " ", "check", " ", "matroidQ", " ", "and", " ", 
   "implicitely", " ", "matroidViolationCheck"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6851607274301624`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
   RowBox[{"(", 
    RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
   RowBox[{"CloseKernels", "[", "]"}], ";", 
   RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
   RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestMatroids", "[", 
    RowBox[{"kk_", ",", "nn_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "thematroid", ",", "pluckrels", ",", "todeleteminors", ",", "oks", ",", 
       "notoks"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"thematroid", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{
         RowBox[{"Range", "[", "nn", "]"}], ",", 
         RowBox[{"{", "kk", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"matroidQ", "[", 
          RowBox[{"thematroid", ",", "True"}], "]"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<PROBLEM\>\"", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"pluckrels", "=", 
       RowBox[{"pluckerRelations", "[", 
        RowBox[{"kk", ",", "nn"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"todeleteminors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"HoldForm", "[", "minor", "]"}], "@@", "#"}], "\[Rule]", 
           "0"}], "&"}], ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"Subsets", "[", "thematroid", "]"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"oks", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{
          RowBox[{"ParallelMap", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "inputequations", "}"}], ",", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", "compatible", "}"}], ",", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"inputequations", "===", "True"}], ",", 
                    RowBox[{
                    RowBox[{"compatible", "=", "True"}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"compatible", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Solve", "[", "inputequations", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"zz_", "\[Rule]", "0"}], ",", "___"}], "}"}]}], 
                    "]"}], "]"}], ">", "0"}], ")"}]}], ";"}]}], "]"}], ";", 
                   "compatible"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], 
            ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"And", "@@", "pluckrels"}], "/.", "#"}], "&"}], ",", 
              "todeleteminors"}], "]"}]}], "]"}], ",", "True"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"notoks", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "todeleteminors", "]"}], "]"}], ",", "oks"}],
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"matroidQ", "[", 
               RowBox[{
                RowBox[{"Complement", "[", 
                 RowBox[{"thematroid", ",", "#"}], "]"}], ",", "True"}], 
               "]"}], "&"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"todeleteminors", "[", 
                 RowBox[{"[", "oks", "]"}], "]"}], "/.", 
                RowBox[{"Rule", "\[Rule]", "Plus"}]}], ")"}], "/.", 
              RowBox[{
               RowBox[{"HoldForm", "[", "minor", "]"}], "\[Rule]", 
               "List"}]}]}], "]"}]}], ")"}], "=!=", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : matroidQ says that some of the examples that should be \
matroids are in fact not matroids\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Or", "@@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"matroidQ", "[", 
               RowBox[{
                RowBox[{"Complement", "[", 
                 RowBox[{"thematroid", ",", "#"}], "]"}], ",", "True"}], 
               "]"}], "&"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"todeleteminors", "[", 
                 RowBox[{"[", "notoks", "]"}], "]"}], "/.", 
                RowBox[{"Rule", "\[Rule]", "Plus"}]}], ")"}], "/.", 
              RowBox[{
               RowBox[{"HoldForm", "[", "minor", "]"}], "\[Rule]", 
               "List"}]}]}], "]"}]}], ")"}], "=!=", "False"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : matroidQ says that some of the examples that should not be \
matroids are in fact matroids\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestMatroids", "[", 
      RowBox[{"kk", ",", "nn"}], "]"}], ";"}], ",", 
    RowBox[{"{", 
     RowBox[{"nn", ",", "2", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"kk", ",", "1", ",", 
      RowBox[{"nn", "-", "1"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6851608252255974`*^9, 
   3.6851609573108535`*^9}, {3.685161210722114*^9, 3.6851612492408924`*^9}, {
   3.685161312369671*^9, 3.6851613239715743`*^9}, 3.6851618251101437`*^9, 
   3.685684459049268*^9, {3.685685209360669*^9, 3.6856852307209682`*^9}, {
   3.688983233153343*^9, 3.688983235824933*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.688983326225726*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "pluckerRelations"}], ",", 
   " ", "independentPluckerRelations"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.68516185111992*^9, {3.685167474291627*^9, 3.6851674744791374`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
   RowBox[{"(", 
    RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
   RowBox[{"CloseKernels", "[", "]"}], ";", 
   RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
   RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPluckerRelations", "[", 
    RowBox[{"kk_", ",", "nn_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "thematroid", ",", "pluckrels", ",", "indeppluckrels", ",", 
       "minorstomatrixelements", ",", "entry"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"thematroid", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{
         RowBox[{"Range", "[", "nn", "]"}], ",", 
         RowBox[{"{", "kk", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pluckrels", "=", 
       RowBox[{"pluckerRelations", "[", 
        RowBox[{"kk", ",", "nn"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"indeppluckrels", "=", 
       RowBox[{"independentPluckerRelations", "[", 
        RowBox[{"kk", ",", "nn"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"indeppluckrels", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{"nn", ",", "kk"}], "]"}], "-", 
          RowBox[{"kk", 
           RowBox[{"(", 
            RowBox[{"nn", "-", "kk"}], ")"}]}], "-", "1"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           
           "\"\< : There is the wrong number of independent Plucker \
relations!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Head", "[", "#", "]"}], "===", 
               RowBox[{"HoldForm", "[", "minor", "]"}]}], "&"}], ",", 
             RowBox[{"Variables", "[", 
              RowBox[{"pluckrels", "/.", 
               RowBox[{"Equal", "\[Rule]", "List"}]}], "]"}]}], "]"}]}], 
          ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : Some variables do not seem to be of the type \
HoldForm[minor]\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{"List", "@@", "#"}], "]"}], "]"}], "===", "kk"}], 
              "&"}], ",", 
             RowBox[{"Variables", "[", 
              RowBox[{"pluckrels", "/.", 
               RowBox[{"Equal", "\[Rule]", "List"}]}], "]"}]}], "]"}]}], 
          ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : Some minors do not have kk independent indices!\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"Simplify", "[", 
            RowBox[{
             RowBox[{"indeppluckrels", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "/.", 
             RowBox[{"indeppluckrels", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}], "=!=", 
         "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : The solution to independentPluckerRelations does not \
trivialize its plucker relations!\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"Simplify", "[", 
            RowBox[{"pluckrels", "/.", 
             RowBox[{"indeppluckrels", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}], "=!=", 
         "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : The solution to independentPluckerRelations does not \
trivialize ALL plucker relations!\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"minorstomatrixelements", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"HoldForm", "[", "minor", "]"}], "@@", "#"}], "&"}], 
             ",", "thematroid"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Minors", "[", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                SubscriptBox["entry", 
                 RowBox[{"iii", ",", "jjj"}]], ",", 
                RowBox[{"{", 
                 RowBox[{"iii", ",", "kk"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"jjj", ",", "nn"}], "}"}]}], "]"}], ",", "kk"}], 
             "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"Simplify", "[", 
            RowBox[{"pluckrels", "/.", "minorstomatrixelements"}], "]"}]}], 
          ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<kk=\>\"", ",", "kk", ",", "\"\< and nn=\>\"", ",", "nn", ",", 
           "\"\< : Some plucker relations are not right! They do not \
trivialize when applied to minors of an arbitrary kk by nn matrix\>\""}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPluckerRelations", "[", 
      RowBox[{"kk", ",", "nn"}], "]"}], ";"}], ",", 
    RowBox[{"{", 
     RowBox[{"nn", ",", "2", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"kk", ",", "1", ",", 
      RowBox[{"nn", "-", "1"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685166542285326*^9, 
   3.6851665563315835`*^9}, {3.685166701459219*^9, 3.6851667960429864`*^9}, 
   3.685684469177644*^9, {3.685685274505714*^9, 3.685685275672542*^9}, {
   3.687629007203438*^9, 3.687629011257071*^9}, 3.689421478029011*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.689421489720112*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", 
   RowBox[{"rotateExternalVertices", ".", " ", "GET"}], " ", "THE", " ", 
   "FUNCTION", " ", "DEFINITIONS", " ", "FOR", " ", "rotateExternalVertices", 
   " ", "AND", " ", "spiralInList", " ", "FROM", " ", "THE", " ", 
   RowBox[{"PACKAGE", "!"}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665315733970289*^9, 3.6653157470007343`*^9}, 
   3.665315981081725*^9, {3.6666337161716323`*^9, 3.6666337171716833`*^9}, {
   3.6851671418914194`*^9, 3.685167150747267*^9}, {3.6851673829719152`*^9, 
   3.685167401182169*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
   RowBox[{"(", 
    RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
   RowBox[{"CloseKernels", "[", "]"}], ";", 
   RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
   RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"rotateExternalVertices", "[", 
    RowBox[{"verticespos_", ",", "edgepos_", ",", "externalnodenumbers_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "externaledges", ",", "tocriticalnode", ",", "externalvertices", ",", 
       "cutcoordinates", ",", "freestandingexternalvertices", ",", 
       "doesitavoidmycriticalnode", ",", "corrections", ",", "jj", ",", 
       "badexternalnodes", ",", "rotateExternalEdge", ",", "segmentCrossQ", 
       ",", "newverticespos", ",", "newedgepos", ",", "iterationvector", ",", 
       "accidentallycrossededges", ",", "newexternaledgecoords", ",", 
       "edgeswemightcrossnow", ",", "newexternalnodesrule"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "We", " ", "need", " ", "to", " ", "see", " ", "if", " ", "any", " ", 
        "of", " ", "the", " ", "cuts", " ", "end", " ", "up", " ", "going", 
        " ", "through", " ", "nodes", " ", "attached", " ", "to", " ", 
        "external", " ", 
        RowBox[{"nodes", ".", " ", "If"}], " ", "they", " ", "do"}], ",", " ", 
       RowBox[{"things", " ", "get", " ", "complicated", " ", "so", " ", 
        RowBox[{"it", "'"}], "s", " ", "better", " ", "to", " ", "rotate", 
        " ", "the", " ", "external", " ", "node", " ", "to", " ", "make", " ",
         "sure", " ", "the", " ", "cut", " ", 
        RowBox[{"doesn", "'"}], "t", " ", "do", " ", "this"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"externaledges", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"edgepos", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"___", ",", 
            RowBox[{"UndirectedEdge", "[", 
             RowBox[{
              RowBox[{"Alternatives", "@@", "externalnodenumbers"}], ",", 
              "_"}], "]"}]}], "}"}], "|", 
          RowBox[{"{", 
           RowBox[{"___", ",", 
            RowBox[{"UndirectedEdge", "[", 
             RowBox[{"_", ",", 
              RowBox[{"Alternatives", "@@", "externalnodenumbers"}]}], 
             "]"}]}], "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Our", " ", "cuts", " ", "may", " ", "never", " ", "go", " ", 
         "through", " ", "the", " ", "\"\<critical nodes\>\""}], ",", " ", 
        RowBox[{
         RowBox[{"i", ".", "e", ".", " ", "those"}], " ", "nodes", " ", 
         "attached", " ", "to", " ", "external", " ", "nodes"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"tocriticalnode", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"#1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "#2"}], "]"}], "]"}], "\[Rule]", 
           RowBox[{"#1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", 
              RowBox[{"(", 
               RowBox[{"#2", "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"1", "\[Rule]", "2"}], ",", 
                  RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], ")"}]}], "]"}], 
            "]"}]}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"externaledges", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", 
                 RowBox[{"Alternatives", "@@", "externalnodenumbers"}]}], 
                "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", 
             "externaledges"}], "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Now", " ", 
         RowBox[{"we", "'"}], "ll", " ", "construct", " ", "the", " ", 
         RowBox[{"cuts", ":", " ", 
          RowBox[{
          "they", " ", "will", " ", "run", " ", "directly", " ", "between", 
           " ", "the", " ", "external", " ", "vertices"}]}]}], ",", " ", 
        RowBox[{
        "since", " ", "the", " ", "boundaries", " ", "are", " ", "so", " ", 
         "tiny"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"We", "'"}], "ll", " ", "make", " ", "a", " ", "sequence", 
          " ", "of", " ", "boundaries", " ", "connected", " ", "by", " ", 
          RowBox[{"cuts", ".", " ", 
           RowBox[{"We", "'"}]}], "ll", " ", "start", " ", "with", " ", "the",
           " ", "external", " ", "node", " ", "with", " ", "the", " ", 
          "highest", " ", "y"}], "-", "coordinate"}], ",", " ", 
        RowBox[{
        "and", " ", "proceed", " ", "along", " ", "external", " ", "nodes", 
         " ", "as", " ", "we", " ", "spiral", " ", "in", " ", "to", " ", 
         "the", " ", 
         RowBox[{"middle", ".", " ", "This"}], " ", "ensures", " ", "that", 
         " ", "the", " ", "cuts", " ", "never", " ", "cross", " ", "each", 
         " ", "other"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"externalvertices", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Cases", "[", 
          RowBox[{"verticespos", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Alternatives", "@@", "externalnodenumbers"}], ",", 
             "___"}], "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"externalvertices", "=", 
       RowBox[{"spiralInList", "[", "externalvertices", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"We", " ", "may", " ", "now", " ", "form", " ", "the", " ", 
        RowBox[{"cuts", ":", " ", 
         RowBox[{"they", " ", "are", " ", 
          RowBox[{"(", 
           RowBox[{"n", "-", "1"}], ")"}], " ", "sequential", " ", "pairs", 
          " ", "of", " ", "externalvertices"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cutcoordinates", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"externalvertices", "[", 
            RowBox[{"[", "iii", "]"}], "]"}], ",", 
           RowBox[{"externalvertices", "[", 
            RowBox[{"[", 
             RowBox[{"iii", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"iii", ",", 
           RowBox[{
            RowBox[{"Length", "[", "externalvertices", "]"}], "-", "1"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "If", " ", "we", " ", "go", " ", "through", " ", "a", " ", "critical", 
        " ", "node", " ", "we", " ", "need", " ", "to", " ", "take", " ", 
        "the", " ", "external", " ", "edges", " ", "and", " ", "rotate", " ", 
        RowBox[{"them", ".", " ", "We"}], " ", "must", " ", "stay", " ", 
        "within", " ", "the", " ", "same", " ", "face", " ", "and", " ", 
        "also", " ", "not", " ", "cross", " ", "any", " ", "other", " ", 
        RowBox[{"edges", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Let", "'"}], "s", " ", "find", " ", "the", " ", 
        "coordinates", " ", "of", " ", "those", " ", "external", " ", "nodes",
         " ", "whose", " ", "position", " ", "forces", " ", "a", " ", "cut", 
        " ", "to", " ", "run", " ", "parallel", " ", "over", " ", "the", " ", 
        "external", " ", "edge"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Sometimes", " ", "an", " ", "external", " ", "node", " ", "is", " ", 
         "not", " ", "connected", " ", "to", " ", "an", " ", "external", " ", 
         "edge"}], ",", " ", 
        RowBox[{
         RowBox[{"i", ".", "e", ".", " ", "it"}], " ", "is", " ", 
         "freestanding"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"freestandingexternalvertices", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"externalvertices", ",", 
         RowBox[{"Except", "[", 
          RowBox[{"Alternatives", "@@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Sequence", "@@", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "&"}], ",", 
             "externaledges"}], "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"doesitavoidmycriticalnode", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"SetPrecision", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{"param", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "/.", 
                    "tocriticalnode"}], ")"}]}], "&&", 
                  RowBox[{"param", "\[LessEqual]", "1."}]}], ",", "10"}], 
                "]"}], ",", "param"}], "]"}], "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"iii", ",", "2"}], "}"}]}], "]"}], "&"}], ",", 
         "cutcoordinates"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"corrections", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", 
         RowBox[{"Position", "[", 
          RowBox[{"cutcoordinates", ",", 
           RowBox[{"Alternatives", "@@", "freestandingexternalvertices"}]}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "corrections", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"doesitavoidmycriticalnode", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"corrections", "[", 
              RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", "True"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"badexternalnodes", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"cutcoordinates", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"doesitavoidmycriticalnode", ",", "False"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"First", "[", "#1", "]"}], "\[Equal]", 
             RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "This", " ", "function", " ", "takes", " ", "an", " ", "external", 
         " ", "edge"}], ",", " ", 
        RowBox[{
        "finds", " ", "the", " ", "two", " ", "nearest", " ", "edges", " ", 
         "to", " ", "it", " ", 
         RowBox[{"(", 
          RowBox[{
          "coming", " ", "from", " ", "the", " ", "same", " ", "critical", 
           " ", "node"}], ")"}]}], ",", " ", 
        RowBox[{
        "determines", " ", "which", " ", "ones", " ", "has", " ", "the", " ", 
         "smallest", " ", "angle", " ", "to", " ", "our", " ", "external", 
         " ", "edge"}], ",", " ", 
        RowBox[{
        "and", " ", "rotates", " ", "the", " ", "external", " ", "edge", " ", 
         "95", "%", " ", 
         RowBox[{"(", 
          RowBox[{"to", " ", "the", " ", "power", " ", "\"\<iteration\>\""}], 
          ")"}], " ", "of", " ", "the", " ", "way", " ", 
         RowBox[{"there", ".", " ", "If"}], " ", "the", " ", "critical", " ", 
         "node", " ", "is", " ", "bivalent", " ", "this", " ", "will", " ", 
         "work", " ", 
         RowBox[{"anyway", ":", " ", 
          RowBox[{
          "it", " ", "will", " ", "just", " ", "select", " ", "the", " ", 
           RowBox[{"(", "smallest", ")"}], " ", "angle", " ", "to", " ", 
           "the", " ", "other", " ", "edge", " ", "of", " ", "the", " ", 
           "bivalent", " ", 
           RowBox[{"node", ".", " ", "There"}], " ", "is", " ", "a", " ", 
           "higher", " ", "risk", " ", "that", " ", "we", " ", "end", " ", 
           "up", " ", "crossing", " ", "other", " ", "edges", " ", "if", " ", 
           "we", " ", "rotate", " ", "around", " ", "a", " ", "bivalent", " ",
            "critical", " ", "node", " ", "but", " ", "this", " ", "is", " ", 
           "irrelevant"}]}]}], ",", " ", 
        RowBox[{
         RowBox[{
         "since", " ", "we", " ", "will", " ", "iterate", " ", "the", " ", 
          "rotation"}], "-", 
         RowBox[{"procedure", " ", 
          RowBox[{"(", 
           RowBox[{
           "selecting", " ", "smaller", " ", "and", " ", "smaller", " ", 
            "angles", " ", "of", " ", "rotation"}], ")"}], " ", "until", " ", 
          RowBox[{"we", "'"}], "re", " ", "sure", " ", "that", " ", "we", " ", 
          RowBox[{"haven", "'"}], "t", " ", "crossed", " ", "any", " ", 
          "edges"}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"newverticespos", "=", "verticespos"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newedgepos", "=", "edgepos"}], ";", "\[IndentingNewLine]", 
      RowBox[{"rotateExternalEdge", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"inputexternaledge", ",", "iteration"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "This", " ", "function", " ", "needs", " ", "tocriticalnode"}], 
           ",", " ", "newedgepos"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "criticalnode", ",", "externaledgenewcoordinates", ",", 
             "otheredgesnewcoordinates", ",", 
             "rotatedotheredgesnewcoordinates", ",", "anglesotheredges", ",", 
             "smallestangle", ",", "newexternaledgeposition"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"criticalnode", "=", 
             RowBox[{"inputexternaledge", "/.", "tocriticalnode"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"externaledgenewcoordinates", "=", 
             RowBox[{"ToPolarCoordinates", "[", 
              RowBox[{"inputexternaledge", "-", "criticalnode"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"otheredgesnewcoordinates", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0.", "|", "0"}], ",", 
                    RowBox[{"0.", "|", "0"}]}], "}"}]}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "-", "criticalnode"}], "&"}], ",", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"newedgepos", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"___", ",", "criticalnode"}], "}"}], ",", "___"}],
                     "}"}], "|", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"criticalnode", ",", "___"}], "}"}], ",", "___"}],
                     "}"}]}]}], "]"}]}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"___", ",", "inputexternaledge"}], "}"}], "|", 
                    RowBox[{"{", 
                    RowBox[{"inputexternaledge", ",", "___"}], "}"}]}]}], 
                  "]"}], ",", 
                 RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"rotatedotheredgesnewcoordinates", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"ToPolarCoordinates", "[", 
                 RowBox[{
                  RowBox[{"RotationMatrix", "[", 
                   RowBox[{"-", 
                    RowBox[{"externaledgenewcoordinates", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ".", "#"}], 
                 "]"}], "&"}], ",", "otheredgesnewcoordinates"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"anglesotheredges", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", 
                  RowBox[{"2", "Pi"}]}], "]"}], "&"}], ",", 
               "rotatedotheredgesnewcoordinates"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"anglesotheredges", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"anglesotheredges", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Min", "[", "anglesotheredges", "]"}], ",", 
                  RowBox[{
                   RowBox[{"Max", "[", "anglesotheredges", "]"}], "-", 
                   RowBox[{"2", "Pi"}]}]}], "}"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"smallestangle", "=", 
                RowBox[{"anglesotheredges", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"Ordering", "[", 
                    RowBox[{"Abs", "[", "anglesotheredges", "]"}], "]"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"smallestangle", "=", 
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"externaledgenewcoordinates", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "Pi"}], ",", 
                  RowBox[{"2", "Pi"}]}], "]"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"newexternaledgeposition", "=", 
             RowBox[{"criticalnode", "+", 
              RowBox[{
               RowBox[{"RotationMatrix", "[", 
                RowBox[{
                 RowBox[{"Power", "[", 
                  RowBox[{"0.95", ",", "iteration"}], "]"}], 
                 "smallestangle"}], "]"}], ".", 
               RowBox[{"(", 
                RowBox[{"inputexternaledge", "-", "criticalnode"}], 
                ")"}]}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
            "inputexternaledge", "\[Rule]", "newexternaledgeposition"}]}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "This", " ", "function", " ", "tells", " ", "you", " ", "whether", " ",
         "two", " ", "generic", " ", "segments", " ", "cross"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"segmentCrossQ", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"edge1coords", ",", "edge2coords"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"matrixtoinvert", ",", "crossdistance", ",", "crossq"}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"matrixtoinvert", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"edge1coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", 
                  RowBox[{"edge1coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"edge2coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "-", 
                  RowBox[{"edge2coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"edge1coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "-", 
                  RowBox[{"edge1coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"edge2coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}], "-", 
                  RowBox[{"edge2coords", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}]}]}], "}"}]}], 
              "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"N", "[", 
                RowBox[{"Chop", "[", 
                 RowBox[{"Det", "[", "matrixtoinvert", "]"}], "]"}], "]"}], "=!=",
                "0."}], ",", 
              RowBox[{"(*", 
               RowBox[{
               "if", " ", "the", " ", "matrix", " ", "is", " ", 
                "invertible"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"crossdistance", "=", 
                RowBox[{
                 RowBox[{"Inverse", "[", "matrixtoinvert", "]"}], ".", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", 
                    RowBox[{"edge2coords", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ",", 
                   RowBox[{
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "-", 
                    RowBox[{"edge2coords", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}]}]}], "}"}]}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"crossq", "=", 
                RowBox[{"And", "@@", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", "\[GreaterEqual]", "0"}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"#", "\[LessEqual]", "1"}], ")"}]}], "&"}], ",", 
                   "crossdistance"}], "]"}]}]}], ";"}], "\[IndentingNewLine]",
               ",", 
              RowBox[{"(*", 
               RowBox[{"the", " ", "edges", " ", "are", " ", "parallel"}], 
               "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{"param", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                    RowBox[{"edge2coords", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&&", 
                    RowBox[{
                    "0", "\[LessEqual]", "param", "\[LessEqual]", "1"}]}], 
                    ",", "10"}], "]"}], ",", "param"}], "]"}], "=!=", 
                   RowBox[{"{", "}"}]}], "||", 
                  RowBox[{
                   RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{"param", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"edge1coords", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                    RowBox[{"edge2coords", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
                    RowBox[{
                    "0", "\[LessEqual]", "param", "\[LessEqual]", "1"}]}], 
                    ",", "10"}], "]"}], ",", "param"}], "]"}], "=!=", 
                   RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "the", " ", "edges", " ", "are", " ", "parallel", " ", 
                   "and", " ", "overlap"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"crossq", "=", "True"}], ";"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"crossq", "=", "False"}], ";"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            "crossq"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"badexternalnodes", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Now", " ", 
           RowBox[{"let", "'"}], "s", " ", "rotate", " ", "until", " ", "all",
            " ", "badexternalnodes", " ", "nodes", " ", "have", " ", "been", 
           " ", "rotated"}], ",", " ", 
          RowBox[{
          "without", " ", "crossing", " ", "any", " ", "other", " ", 
           "edges"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"iterationvector", "=", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"1", ",", 
            RowBox[{"Length", "[", "badexternalnodes", "]"}]}], "]"}]}], ";", 
         RowBox[{"(*", 
          RowBox[{
          "iterationvector", " ", "keeps", " ", "track", " ", "of", " ", 
           "how", " ", "many", " ", "times", " ", 
           RowBox[{"we", "'"}], "ve", " ", "tried", " ", "to", " ", "rotate", 
           " ", "a", " ", "node", " ", "without", " ", "accidentally", " ", 
           "crossing", " ", "already", " ", "existing", " ", 
           RowBox[{"edges", ".", " ", "Each"}], " ", "time", " ", "we", " ", 
           "iterate", " ", "we", " ", "rotate", " ", "it", " ", "slightly", 
           " ", "less"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"accidentallycrossededges", "=", "True"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{"Or", "@@", "accidentallycrossededges"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"newexternaledgecoords", "=", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"#1", "/.", "tocriticalnode"}], ",", 
                  RowBox[{
                   RowBox[{"rotateExternalEdge", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"badexternalnodes", ",", "iterationvector"}], "}"}]}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"edgeswemightcrossnow", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{"newedgepos", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "___"}], "}"}], ",", "___"}], "}"}], 
                    "|", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"___", ",", "#"}], "}"}], ",", "___"}], "}"}]}]}],
                    "]"}], "&"}], ",", 
                 RowBox[{"badexternalnodes", "/.", "tocriticalnode"}]}], 
                "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"accidentallycrossededges", "=", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Or", "@@", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"segmentCrossQ", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], ",", "#2"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "#1", "]"}]}], "}"}]}], "]"}]}], 
                "&"}], ",", 
               RowBox[{"{", 
                RowBox[{
                "edgeswemightcrossnow", ",", "newexternaledgecoords"}], 
                "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"iterationvector", "=", 
             RowBox[{
              RowBox[{"iterationvector", "+", "accidentallycrossededges"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"False", "\[Rule]", "0"}], ",", 
                RowBox[{"True", "\[Rule]", "1"}]}], "}"}]}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"newexternalnodesrule", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"rotateExternalEdge", "[", 
              RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"badexternalnodes", ",", "iterationvector"}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"newverticespos", "=", 
          RowBox[{"newverticespos", "/.", "newexternalnodesrule"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"newedgepos", "=", 
          RowBox[{"newedgepos", "/.", "newexternalnodesrule"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"externalvertices", "=", 
          RowBox[{"spiralInList", "[", 
           RowBox[{"externalvertices", "/.", "newexternalnodesrule"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cutcoordinates", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"externalvertices", "[", 
               RowBox[{"[", "iii", "]"}], "]"}], ",", 
              RowBox[{"externalvertices", "[", 
               RowBox[{"[", 
                RowBox[{"iii", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"iii", ",", 
              RowBox[{
               RowBox[{"Length", "[", "externalvertices", "]"}], "-", "1"}]}],
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tocriticalnode", "=", 
          RowBox[{"tocriticalnode", "/.", "newexternalnodesrule"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"doesitavoidmycriticalnode", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Solve", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{"param", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "/.", 
                    "tocriticalnode"}], ")"}]}], ",", "param"}], "]"}], "===", 
                RowBox[{"{", "}"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"iii", ",", "2"}], "}"}]}], "]"}], "&"}], ",", 
            "cutcoordinates"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"corrections", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"#", "&"}], ",", 
            RowBox[{"Position", "[", 
             RowBox[{"cutcoordinates", ",", 
              RowBox[{
              "Alternatives", "@@", "freestandingexternalvertices"}]}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "corrections", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"doesitavoidmycriticalnode", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"corrections", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}], "=", 
             "True"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"badexternalnodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"cutcoordinates", "[", 
              RowBox[{"[", 
               RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{"doesitavoidmycriticalnode", ",", "False"}], "]"}], 
              ",", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", "#1", "]"}], "\[Equal]", 
                RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"newverticespos", ",", "newedgepos"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spiralInList", "[", "vertexlist_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "remainingvertices", ",", "nextnode", ",", "finalvertexlist", ",", 
       "polardistances"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"remainingvertices", "=", "vertexlist"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "The", " ", "first", " ", "node", " ", "is", " ", "the", " ", "one", 
         " ", "with", " ", "the", " ", "largest", " ", "y"}], "-", 
        "coordinate"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"nextnode", "=", 
       RowBox[{
        RowBox[{"Cases", "[", 
         RowBox[{"remainingvertices", ",", 
          RowBox[{"{", 
           RowBox[{"_", ",", 
            RowBox[{"Max", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
               "remainingvertices"}], "]"}], "]"}]}], "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"finalvertexlist", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"nextnode", "+", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0.1"}], "}"}]}], ",", "nextnode"}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"remainingvertices", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"remainingvertices", ",", "nextnode"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"remainingvertices", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"polardistances", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "-", 
                  RowBox[{
                   RowBox[{"ToPolarCoordinates", "[", 
                    RowBox[{
                    RowBox[{"finalvertexlist", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "2"}], "]"}], "]"}], "-", "nextnode"}], 
                    "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                 RowBox[{"2", "Pi"}]}], "]"}]}], "}"}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ToPolarCoordinates", "[", 
                RowBox[{"#", "-", "nextnode"}], "]"}], "&"}], ",", 
              "remainingvertices"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "The", " ", "next", " ", "node", " ", "is", " ", "the", " ", 
           "first", " ", "one", " ", "reached", " ", "going", " ", "radially",
            " ", "and", " ", "clockwise", " ", "from", " ", "the", " ", 
           "current", " ", "node"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"nextnode", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"polardistances", ",", 
            RowBox[{"{", 
             RowBox[{"_", ",", 
              RowBox[{"Max", "[", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
                 "polardistances"}], "]"}], "]"}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "If", " ", "there", " ", "are", " ", "multiple", " ", "ones", " ", 
            "with", " ", "the", " ", "same", " ", "angle"}], ",", " ", 
           RowBox[{"pick", " ", "the", " ", "nearest", " ", "one"}]}], "*)"}],
          "\[IndentingNewLine]", 
         RowBox[{"nextnode", "=", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"nextnode", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "&"}], ",", "nextnode"}], 
                 "]"}], "]"}], ",", "_"}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"nextnode", "=", 
          RowBox[{"remainingvertices", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"polardistances", ",", "nextnode"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"finalvertexlist", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"finalvertexlist", ",", "nextnode"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"remainingvertices", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"remainingvertices", ",", "nextnode"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"finalvertexlist", "=", 
       RowBox[{"Delete", "[", 
        RowBox[{"finalvertexlist", ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "finalvertexlist"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "0."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"6.", ",", "4."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "5."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"{", 
        RowBox[{"0.4", ",", 
         RowBox[{"-", "0.25"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"6.", ",", "0."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"{", 
        RowBox[{"6.", ",", 
         RowBox[{"-", "0.5"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", 
       RowBox[{"{", 
        RowBox[{"1.114892969810759`", ",", "0.`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", 
         RowBox[{"-", "0.75"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", 
       RowBox[{"{", 
        RowBox[{"6.", ",", 
         RowBox[{"-", "0.75"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", 
         RowBox[{"-", "0.5"}]}], "}"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input2", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"input1", "[", 
         RowBox[{"[", 
          RowBox[{"#", ",", "2"}], "]"}], "]"}], ",", 
        RowBox[{"UndirectedEdge", "@@", "#"}]}], "}"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "10"}], "}"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input3", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4", ",", "8", ",", "9"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"rotateExternalVertices", "[", 
      RowBox[{"input1", ",", "input2", ",", "input3"}], "]"}], "=!=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", 
           RowBox[{"{", 
            RowBox[{"2.012330665067488`", ",", "0.3138363829113791`"}], 
            "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", "5.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", 
           RowBox[{"{", 
            RowBox[{"0.35765476859377754`", ",", 
             RowBox[{"-", "0.012738324164385306`"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", 
           RowBox[{"{", 
            RowBox[{"6.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", 
           RowBox[{"{", 
            RowBox[{"6.`", ",", 
             RowBox[{"-", "0.5`"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", 
           RowBox[{"{", 
            RowBox[{"1.114892969810759`", ",", "0.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"8", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", 
             RowBox[{"-", "0.75`"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"9", ",", 
           RowBox[{"{", 
            RowBox[{"6.`", ",", 
             RowBox[{"-", "0.75`"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", 
             RowBox[{"-", "0.5`"}]}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.`", ",", "5.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.114892969810759`", ",", "0.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "7"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.`", ",", 
               RowBox[{"-", "0.5`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "10"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2.012330665067488`", ",", "0.3138363829113791`"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"6.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"2", "\[UndirectedEdge]", "5"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.35765476859377754`", ",", 
               RowBox[{"-", "0.012738324164385306`"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.114892969810759`", ",", "0.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"4", "\[UndirectedEdge]", "7"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"6.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"6.`", ",", 
               RowBox[{"-", "0.5`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"5", "\[UndirectedEdge]", "6"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"6.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.114892969810759`", ",", "0.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"5", "\[UndirectedEdge]", "7"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"6.`", ",", 
               RowBox[{"-", "0.5`"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"6.`", ",", 
               RowBox[{"-", "0.75`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"6", "\[UndirectedEdge]", "9"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"6.`", ",", 
               RowBox[{"-", "0.5`"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.`", ",", 
               RowBox[{"-", "0.5`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"6", "\[UndirectedEdge]", "10"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", 
               RowBox[{"-", "0.75`"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.`", ",", 
               RowBox[{"-", "0.5`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"8", "\[UndirectedEdge]", "10"}]}], "}"}]}], "}"}]}], 
      "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "Print", "[", 
      "\"\<There is a problem with rotateExternalVertices! When it rotates a \
vertex it should recalculate the ordering and see if anything else needs \
rotating, then do it. Something went wrong in this process.\>\"", "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "0."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"1.", ",", "6."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", 
         RowBox[{"-", "1."}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"{", 
        RowBox[{"1.", ",", 
         RowBox[{"-", "2."}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "6."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"{", 
        RowBox[{"1.", ",", "0."}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", 
       RowBox[{"{", 
        RowBox[{"1.", ",", 
         RowBox[{"-", "1."}]}], "}"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input2", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"input1", "[", 
         RowBox[{"[", 
          RowBox[{"#", ",", "2"}], "]"}], "]"}], ",", 
        RowBox[{"UndirectedEdge", "@@", "#"}]}], "}"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "7"}], "}"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"input3", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"rotateExternalVertices", "[", 
      RowBox[{"input1", ",", "input2", ",", "input3"}], "]"}], "=!=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", 
           RowBox[{"{", 
            RowBox[{"0.01791025239610855`", ",", "5.919079297293738`"}], 
            "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", 
             RowBox[{"-", "1.`"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", 
           RowBox[{"{", 
            RowBox[{"1.`", ",", 
             RowBox[{"-", "2.`"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", 
           RowBox[{"{", 
            RowBox[{"0.`", ",", "6.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", 
           RowBox[{"{", 
            RowBox[{"1.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", 
           RowBox[{"{", 
            RowBox[{"1.`", ",", 
             RowBox[{"-", "1.`"}]}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.`", ",", 
               RowBox[{"-", "1.`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.`", ",", "6.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "5"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "6"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.01791025239610855`", ",", "5.919079297293738`"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
           RowBox[{"2", "\[UndirectedEdge]", "6"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.`", ",", 
               RowBox[{"-", "1.`"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.`", ",", 
               RowBox[{"-", "1.`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"3", "\[UndirectedEdge]", "7"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1.`", ",", 
               RowBox[{"-", "2.`"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.`", ",", 
               RowBox[{"-", "1.`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"4", "\[UndirectedEdge]", "7"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1.`", ",", "0.`"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1.`", ",", 
               RowBox[{"-", "1.`"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"6", "\[UndirectedEdge]", "7"}]}], "}"}]}], "}"}]}], 
      "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "Print", "[", 
      "\"\<There is a problem with rotateExternalVertices! A vertex should be \
rotated as much as posisble without crossing any edges. This iterative \
process or rotating less and less has failed.\>\"", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653157400435576`*^9, 3.665315825784913*^9}, {
   3.665315872814883*^9, 3.665315981081725*^9}, 3.6701285274302015`*^9, 
   3.6851671173169703`*^9, 3.68516715442124*^9, {3.685167217632343*^9, 
   3.6851672215711756`*^9}, {3.6851673557414904`*^9, 3.6851673589540515`*^9}, 
   3.685684476990451*^9, {3.68568530210087*^9, 3.6856853057398233`*^9}, 
   3.685879820744997*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.687622430181415*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6851607340875006`*^9, 3.6851607341857743`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Here", " ", "we", " ", "check", " ", "getK", " ", "and", " ", "getN"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.685167454231512*^9, 3.6851674543721447`*^9}, 3.6851704750832167`*^9, {
   3.6851705826492662`*^9, 3.6851705853304367`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestGetKandN", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"perfs", ",", "srcs", ",", "snks", ",", "numK", ",", "numN"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "+", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"srcs", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSourceNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"snks", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSinkNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Intersection", "[", 
                   RowBox[{"#1", ",", "#2"}], "]"}], "===", 
                  RowBox[{"{", "}"}]}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"srcs", ",", "snks"}], "}"}]}], "]"}]}], ")"}], "=!=",
             "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with getSourceNodes or getSinkNodes: \
there are some nodes that are both sources and sinks at the same time!\>\""}],
              "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"numK", "=", 
          RowBox[{"getK", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"numN", "=", 
          RowBox[{"getN", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "#", "]"}], "===", "numK"}], "&"}], 
                ",", "srcs"}], "]"}]}], ")"}], "=!=", "True"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with getK. It doesn't equal the \
length of getSourceNodes\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "===", "numN"}], "&"}], ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"Length", ",", "srcs"}], "]"}], "+", 
                  RowBox[{"Map", "[", 
                   RowBox[{"Length", ",", "snks"}], "]"}]}], ")"}]}], "]"}]}],
              ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : There's a problem with getN. It doesn't equal the \
length of (getSourceNodes + getSinkNodes)\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestGetKandN", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGetKandN", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGetKandN", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGetKandN", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGetKandN", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685170487064746*^9, 
   3.6851705558378315`*^9}, {3.685170588411274*^9, 3.685171024291237*^9}, {
   3.685171096964507*^9, 3.685171099583185*^9}, 3.685684482473452*^9, {
   3.685685319632015*^9, 3.685685331832284*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.68761870435413*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.6930290449452343`*^9, {3.6930290899792223`*^9, 3.693029091989068*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", 
   RowBox[{"grassmannianMatrix", ".", " ", "DOING"}], " ", "ONE", " ", "PART",
    " ", "AT", " ", "A", " ", 
   RowBox[{"TIME", "!"}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.685167454231512*^9, 3.6851674543721447`*^9}, 3.6851704750832167`*^9, {
   3.6920306125106*^9, 3.692030614478054*^9}, {3.6924527918037357`*^9, 
   3.692452793859614*^9}, {3.693208288521064*^9, 3.693208293592869*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], ";"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetDirectory", "[", 
     RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
    RowBox[{"(", 
     RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
    RowBox[{"CloseKernels", "[", "]"}], ";", 
    RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
    RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"functionMemory", "=", "False"}], ";", 
    RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"allbft1kasteleyns", "=", 
      RowBox[{"<<", 
       RowBox[{"(", "bft1filename", ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"allbft2kasteleyns", "=", 
      RowBox[{"<<", 
       RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"allscatteringkasteleyns", "=", 
     RowBox[{"<<", 
      RowBox[{"(", "scatteringfilename", ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"annoyingsmallexamples", "=", 
      RowBox[{"(", 
       RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestGrassmannianMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
       "bftlabeling_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "perfs", ",", "srcs", ",", "snks", ",", "multiplic", ",", "jj", ",", 
         "lowestloopPM", ",", "Cmatrix", ",", "sources", ",", "sinks", ",", 
         "variablesmatrix", ",", "sourceedges", ",", "sinkedges", ",", 
         "usefulloopvariables", ",", "minors", ",", "loopdenom", ",", 
         "numberofdenomintaorterms", ",", "matroidpoly", ",", 
         "expecteddenominatorloops", ",", "niceminors", ",", 
         "theperfsinminors", ",", "pp", ",", "orderingC", ",", 
         "orderingdefault", ",", "minorsaspms"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "c", "]"}], "+", 
             RowBox[{
              RowBox[{"Dimensions", "[", 
               RowBox[{"Join", "[", 
                RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], "&&", 
           RowBox[{"PlanarGraphQ", "[", 
            RowBox[{"AdjacencyGraph", "[", 
             RowBox[{"turnIntoAdjacencyMatrix", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
            "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"we", " ", 
            RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"perfs", "=", 
            RowBox[{"perfectMatchings", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"srcs", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getSourceNodes", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
               "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"snks", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getSinkNodes", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
               "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"multiplic", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Tally", "[", "srcs", "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Position", "[", 
                   RowBox[{
                    RowBox[{"Tally", "[", "srcs", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", 
                "srcs"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"perfs", "\[NotEqual]", 
              RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"lowestloopPM", "=", 
               RowBox[{"lowNumberLoopsPMpos", "[", 
                RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}]}],
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"For", "[", 
            RowBox[{
             RowBox[{"jj", "=", "1"}], ",", 
             RowBox[{"jj", "\[LessEqual]", 
              RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
             RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"jj", "\[Equal]", "lowestloopPM"}], "||", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], "&&", 
                   RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
                    RowBox[{"10", "-", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}]}]}], ")"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Cmatrix", "=", 
                  RowBox[{"grassmannianMatrix", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"Cmatrix", "===", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "sources", "]"}], "\[NotEqual]", 
                    "0"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
It is equal to {} even though we have perfect matchings and a nonzero set of \
sources.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Cmatrix", "=!=", "Null"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"sources", "=", 
                    RowBox[{"srcs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"sinks", "=", 
                    RowBox[{"snks", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmatrix", "]"}], "=!=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "[", "sources", "]"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"sources", ",", "sinks"}], "]"}], "]"}]}], 
                    "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
Its size is not correct!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
                     ";", "\[IndentingNewLine]", 
                    RowBox[{"variablesmatrix", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "#", "]"}], ",", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "&"}], 
                    ",", "Cmatrix", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"sourceedges", "=", 
                    RowBox[{"getSourceEdges", "[", 
                    RowBox[{"b", ",", "c", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"sinkedges", "=", 
                    RowBox[{"getSinkEdges", "[", 
                    RowBox[{"b", ",", "c", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"usefulloopvariables", "=", 
                    RowBox[{"Variables", "[", 
                    RowBox[{
                    RowBox[{"loopVariablesBasis", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Variables", "[", "Cmatrix", "]"}], "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "sourceedges"}], "]"}], "&"}], ",", 
                    "variablesmatrix", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"usefulloopvariables", ",", "sourceedges"}], 
                    "]"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{"#", ",", "sinkedges"}], "]"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "variablesmatrix", "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"usefulloopvariables", ",", "sinkedges"}], "]"}], 
                    "]"}]}], ")"}]}], ")"}], "=!=", "True"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
It doesn't seem to be going from sources to sinks\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"minors", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"Cmatrix", ",", 
                    RowBox[{"Length", "[", "Cmatrix", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Power", "[", 
                    RowBox[{"___", ",", "num1_"}], "]"}], "/;", 
                    RowBox[{"num1", ">", "1"}]}], ")"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"num2_", ",", "___"}], "]"}], "/;", 
                    RowBox[{"num2", ">", "1"}]}], ")"}]}]}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
Its minors do not simplify\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"loopdenom", "=", 
                    RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], ",", "True"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"loopdenom", "===", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "=", "1"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "=", 
                    RowBox[{"Length", "[", "loopdenom", "]"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"numberofdenomintaorterms", "\[NotEqual]", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
The denominators do not all have the right number of terms\>\""}], "]"}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"expecteddenominatorloops", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], 
                    RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], ",", "True"}], "]"}]}], 
                    "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"niceminors", "=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"minors", " ", "expecteddenominatorloops"}], 
                    "]"}], "]"}], "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"pp", "[", "iii", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], "]"}]}],
                     ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"theperfsinminors", "=", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "mino", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "mino", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"List", "@@", "mino"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "mino", "}"}]}], ";"}]}], "]"}], ";", 
                    "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",",
                     "niceminors"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"pp", "[", "zz_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"pp", "[", "zz", "]"}]}], "}"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "===", "pp"}], "&"}], 
                    ",", 
                    RowBox[{"Flatten", "[", "theperfsinminors", "]"}]}], 
                    "]"}]}], ")"}], "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
Its minors are not equal to sums of perfect matchings\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"orderingC", "=", 
                    RowBox[{"getOrderingExternalNodesGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"orderingdefault", "=", 
                    RowBox[{"getOrderingExternalNodesDefault", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{"DeleteDuplicates", ",", 
                    RowBox[{"theperfsinminors", "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pp", "[", "iii", "]"}], "\[Rule]", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"srcs", "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"orderingC", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], "\[Rule]", "jjj"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "orderingdefault", "]"}]}], 
                    "}"}]}], "]"}]}]}], "]"}], "[", 
                    RowBox[{"[", "iii", "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], "]"}], "=!=", 
                    RowBox[{"Delete", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmatrix", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "Cmatrix", "]"}], "}"}]}], "]"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{"minors", ",", "0"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Grassmannian matrix! \
The perfect matchings contributing to each minor do not have the correct \
source sets\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"minorsaspms", "=", 
                    RowBox[{"minorsAsPerfectMatchings", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", "theperfsinminors", "]"}], "=!=", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "mino", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "mino", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"List", "@@", "mino"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "mino", "}"}]}], ";"}]}], "]"}], ";", 
                    "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"minorsaspms", ",", "0"}], "]"}], "/.", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"pp", "[", "iii", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "perfs", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"pp", "[", "zz_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"pp", "[", "zz", "]"}]}], "}"}]}], ")"}], "]"}]}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with minorsAsPerfectMatchings! \
The perfect matchings contributing to each minor do not correspond to the \
calculation done directly by the path matrix\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                  "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DistributeDefinitions", "[", "allTestGrassmannianMatrix", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"ParallelMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"allTestGrassmannianMatrix", "[", 
         RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
       RowBox[{"Cases", "[", 
        RowBox[{"annoyingsmallexamples", ",", 
         RowBox[{"zz_", "/;", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
           RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ParallelMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"allTestGrassmannianMatrix", "[", 
         RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ParallelMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"allTestGrassmannianMatrix", "[", 
         RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
     ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"todoscatteringkasts", "=", 
     RowBox[{"allscatteringkasteleyns", "[", 
      RowBox[{"[", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Round", "[", 
           RowBox[{"0.9", 
            RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}], 
          "+", "1"}], ",", 
         RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}], 
       "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestGrassmannianMatrix", "[", 
        RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"todoscatteringkasts", ",", 
        RowBox[{"Length", "[", "todoscatteringkasts", "]"}]}], "]"}]}], "]"}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{"Quit", "[", "]"}]}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685170487064746*^9, 
   3.6851705558378315`*^9}, {3.6851711222208786`*^9, 3.685171124980148*^9}, {
   3.6851713866489167`*^9, 3.6851713867471867`*^9}, {3.6851714979184103`*^9, 
   3.6851715124163237`*^9}, {3.6851728762750626`*^9, 3.68517303707817*^9}, {
   3.685177421220875*^9, 3.68517747747904*^9}, {3.685177569362583*^9, 
   3.6851776617240515`*^9}, {3.685177695072519*^9, 3.6851777133745527`*^9}, {
   3.68517776405961*^9, 3.6851777926725545`*^9}, {3.685177872336666*^9, 
   3.6851779659976053`*^9}, {3.6851780942053957`*^9, 
   3.6851780947679253`*^9}, {3.685178140031438*^9, 3.685178284552908*^9}, {
   3.685178345933128*^9, 3.6851785158047285`*^9}, {3.685178645908834*^9, 
   3.6851786652351427`*^9}, {3.685178704445988*^9, 3.68517888705653*^9}, 
   3.6851797190822363`*^9, {3.6851800164428988`*^9, 3.685180023282978*^9}, {
   3.68518084034384*^9, 3.6851808411095047`*^9}, 3.685184487835971*^9, {
   3.6851868152000847`*^9, 3.685186829452794*^9}, {3.6852652584050493`*^9, 
   3.6852652675686965`*^9}, {3.685265336535299*^9, 3.685265359058519*^9}, {
   3.68544680511075*^9, 3.6854468123356733`*^9}, 3.685684488156166*^9, {
   3.685685371088421*^9, 3.685685383408634*^9}, {3.688987241280604*^9, 
   3.6889872639407454`*^9}, {3.688988511736075*^9, 3.688988516472192*^9}, {
   3.6920301066078043`*^9, 3.6920301175109262`*^9}, {3.692030529187016*^9, 
   3.692030536953525*^9}, {3.6920305743677883`*^9, 3.6920305753130913`*^9}, {
   3.692096521700877*^9, 3.692096567216729*^9}, 3.692096600251652*^9, {
   3.692096872545574*^9, 3.692096897428773*^9}, {3.6921128067067966`*^9, 
   3.692112810187008*^9}, {3.6921129121624393`*^9, 3.692112939374838*^9}, {
   3.692613445444829*^9, 3.6926134809498987`*^9}, {3.6926439309468184`*^9, 
   3.692643935142771*^9}, {3.6926877168338623`*^9, 3.6926877201854143`*^9}, {
   3.6927285848771343`*^9, 3.692728591943357*^9}, {3.692772793888708*^9, 
   3.6927727977681026`*^9}, {3.692865075128552*^9, 3.692865080080235*^9}, {
   3.6929465256526947`*^9, 3.692946530152081*^9}, {3.693028968565813*^9, 
   3.69302897662215*^9}, 3.693029230871365*^9, 3.693029291558303*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.693056260332889*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.693202135963874*^9, 3.693202136317938*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", 
   RowBox[{"pluckerCoordinates", ".", " ", "DOING"}], " ", "ONE", " ", "PART",
    " ", "AT", " ", "A", " ", 
   RowBox[{"TIME", "!"}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6851893731799994`*^9, {3.6932083031756983`*^9, 3.693208308489677*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestPluckerCoordinates", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "multiplic", ",", "lowestloopPM", ",", 
       "pluckers", ",", "pathmatpluckers", ",", "pathmatloopdenom", ",", 
       "loopdenom", ",", "truemappluckertoperfmatch", ",", "sourcesets", ",", 
       "correctsourcesets", ",", "everythingOK", ",", "pathmat", ",", "Cmat", 
       ",", "jj"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "c", "]"}], "+", 
           RowBox[{
            RowBox[{"Dimensions", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], "&&", 
         RowBox[{"PlanarGraphQ", "[", 
          RowBox[{"AdjacencyGraph", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"srcs", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSourceNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"multiplic", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Tally", "[", "srcs", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{"Tally", "[", "srcs", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"lowestloopPM", "=", 
             RowBox[{"lowNumberLoopsPMpos", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"jj", "\[Equal]", "lowestloopPM"}], "||", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"multiplic", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], "&&", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
                  "1"}]}], 
                RowBox[{"(*", 
                 RowBox[{"10", "-", 
                  RowBox[{"multiplic", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "*)"}], ")"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pathmat", "=", 
                RowBox[{"pathMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"pathmat", "\[NotEqual]", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"pluckers", "=", 
                   RowBox[{"pluckerCoordinates", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], ",", "True"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"pathmatpluckers", "=", 
                   RowBox[{"pluckerCoordinates", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], ",", "False"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"pluckers", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Power", "[", 
                    RowBox[{"___", ",", "num1_"}], "]"}], "/;", 
                    RowBox[{"num1", ">", "1"}]}], ")"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{"num2_", ",", "___"}], "]"}], "/;", 
                    RowBox[{"num2", ">", "1"}]}], ")"}]}]}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Pluckers! The minors \
did not simplify\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"pathmatloopdenom", "=", 
                   RowBox[{"loopDenominator", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"loopdenom", "=", 
                   RowBox[{"pathmatloopdenom", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Times", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "zz_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"Times", "[", 
                    RowBox[{"1", ",", "zz"}], "]"}]}], "}"}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"truemappluckertoperfmatch", "=", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"pluckers", " ", "loopdenom", " ", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"sourcesets", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"getSourceNodes", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "terms", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "return", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "terms", "]"}], "===", "Plus"}], ",", 
                    RowBox[{
                    RowBox[{"return", "=", 
                    RowBox[{"List", "@@", "terms"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"return", "=", 
                    RowBox[{"{", "terms", "}"}]}], ";"}]}], "]"}], ";", 
                    "return"}]}], "]"}]}], "]"}], "[", "#", "]"}], "&"}], ",",
                     "truemappluckertoperfmatch"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"correctsourcesets", "=", 
                   RowBox[{"Subsets", "[", 
                    RowBox[{
                    RowBox[{"getOrderingExternalNodesGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", 
                    RowBox[{"srcs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], "]"}], "}"}]}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"everythingOK", "=", 
                   RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", "#", "]"}], "===", 
                    RowBox[{"Sort", "[", "#1", "]"}]}], "&"}], ",", "#2"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"correctsourcesets", ",", "sourcesets"}], "}"}]}],
                     "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"everythingOK", "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Pluckers! Some perfect \
matchings don't have the set dictated by the Plucker coordinate in which \
they're in!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"pathmat", ",", 
                    RowBox[{"Length", "[", "pathmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", 
                    "pathmatpluckers"}], "]"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the Pluckers! When the \
final argument is set to False, its perfect matchings are not equal to those \
of pathMatrix\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Cmat", "=", 
                   RowBox[{"grassmannianMatrix", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"perfs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Minors", "[", 
                    RowBox[{"Cmat", ",", 
                    RowBox[{"Length", "[", "Cmat", "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", 
                    "pluckers"}], "]"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    "\"\<ii=\>\"", ",", "ii", ",", 
                    "\"\< : There's a problem with the Pluckers! Its perfect \
matchings are not equal to those of grassmannianMatrix\>\""}], "]"}], ";"}]}],
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestPluckerCoordinates", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPluckerCoordinates", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPluckerCoordinates", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"todoscatteringkasts", "=", 
   RowBox[{"allscatteringkasteleyns", "[", 
    RowBox[{"[", 
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{"0.66", 
          RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}], 
        "+", "1"}], ",", 
       RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ParallelMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"allTestPluckerCoordinates", "[", 
       RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"todoscatteringkasts", ",", 
       RowBox[{"Length", "[", "todoscatteringkasts", "]"}]}], "]"}]}], "]"}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestPluckerCoordinates", "[", 
        RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"allscatteringkasteleyns", ",", 
        RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
     "]"}], ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestPluckerCoordinates", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685189380498271*^9, 
   3.685189388238267*^9}, {3.6851894267573447`*^9, 3.685189699540902*^9}, {
   3.685189729992201*^9, 3.685189749913371*^9}, {3.6851898138806334`*^9, 
   3.6851898650646734`*^9}, {3.6852674785146723`*^9, 3.685267478655306*^9}, 
   3.6852676994767265`*^9, {3.6852677821333427`*^9, 3.6852677842681723`*^9}, {
   3.685268021259802*^9, 3.685268031241452*^9}, 3.685450135150688*^9, 
   3.6856844921466722`*^9, {3.6856854026643467`*^9, 3.685685402872469*^9}, {
   3.688987958881338*^9, 3.688987980419444*^9}, 3.688988435531723*^9, {
   3.688988469242261*^9, 3.688988472063888*^9}, {3.688988525057601*^9, 
   3.688988525218671*^9}, {3.693113397187491*^9, 3.69311346726836*^9}, {
   3.693135674603998*^9, 3.693135685141961*^9}, 3.693137613099514*^9, {
   3.693137943828776*^9, 3.693138012559101*^9}, {3.693143323127716*^9, 
   3.693143327566904*^9}, {3.693202147930863*^9, 3.6932021535769777`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6932049809823503`*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.693210588711165*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Here", " ", "we", " ", "check", " ", 
   "getOrderingExternalEdgesGrassmannian"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6852680915011263`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestOrderingEdgesGrassmannian", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "snks", ",", "multiplic", ",", 
       "lowestloopPM", ",", "jj", ",", "Cmatrix", ",", "variablesmatrix", ",",
        "orderingC"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "c", "]"}], "+", 
           RowBox[{
            RowBox[{"Dimensions", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], "&&", 
         RowBox[{"PlanarGraphQ", "[", 
          RowBox[{"AdjacencyGraph", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"srcs", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSourceNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"snks", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSinkNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"multiplic", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Tally", "[", "srcs", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{"Tally", "[", "srcs", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"lowestloopPM", "=", 
             RowBox[{"lowNumberLoopsPMpos", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"jj", "\[Equal]", "lowestloopPM"}], "||", 
               RowBox[{
                RowBox[{"multiplic", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}]}], 
              RowBox[{"(*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"multiplic", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], "&&", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
                  RowBox[{"10", "-", 
                   RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}]}]}], ")"}], "*)"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Cmatrix", "=", 
                RowBox[{"grassmannianMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"Cmatrix", "=!=", "Null"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"orderingC", "=", 
                   RowBox[{"getOrderingExternalEdgesGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "orderingC", "]"}], "=!=", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the \
getOrderingExternalEdgesGrassmannian! Its length is not equal to the number \
of external edges.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"Cmatrix", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"variablesmatrix", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "#", "]"}], ",", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], "]"}], "&"}], 
                    ",", "Cmatrix", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "===", 
                    RowBox[{"{", "}"}]}], "||", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}]}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "input", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"input", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "}"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"Intersection", "@@", "input"}]}], ";"}]}], "]"}],
                     ";", "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], 
                    "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "&"}], ",", 
                    "variablesmatrix"}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "Cmatrix", "]"}], ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", "Cmatrix", "]"}], "]"}]}]}], "]"}],
                     "]"}], "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&"}], ",", 
                    "orderingC"}], "]"}]}]}], "}"}]}], "]"}]}], ")"}], "=!=", 
                    "True"}], "||", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "===", 
                    RowBox[{"{", "}"}]}], "||", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}]}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "variablesmatrix", "]"}]}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "Cmatrix", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "\[Rule]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&"}], ",", 
                    "orderingC"}], "]"}]}]}], "}"}]}], "]"}]}], ")"}], "=!=", 
                    "True"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the \
getOrderingExternalEdgesGrassmannian! It doesn't correspond to what the \
Grassmannian matrix has\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestOrderingEdgesGrassmannian", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingEdgesGrassmannian", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingEdgesGrassmannian", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingEdgesGrassmannian", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingEdgesGrassmannian", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685268103150651*^9, 
   3.6852681118260403`*^9}, {3.6852681672401114`*^9, 3.68526824122163*^9}, {
   3.685268331633485*^9, 3.68526836654072*^9}, {3.6852688433597307`*^9, 
   3.6852688444693604`*^9}, {3.6852688890254445`*^9, 3.685269017465767*^9}, {
   3.6852690571209216`*^9, 3.685269062694605*^9}, {3.68526917924467*^9, 
   3.685269180894126*^9}, {3.6852702936603007`*^9, 3.685270315524802*^9}, {
   3.685270351593664*^9, 3.6852703727702646`*^9}, {3.68527041092912*^9, 
   3.685270461880286*^9}, {3.6852705513285847`*^9, 3.6852705524692683`*^9}, {
   3.6852706011740513`*^9, 3.685270622897464*^9}, {3.685282177093717*^9, 
   3.6852822124530306`*^9}, {3.6854618572717695`*^9, 3.6854618601630015`*^9}, 
   3.685684496722178*^9, {3.685685410560279*^9, 3.685685410736223*^9}, {
   3.688988706526504*^9, 3.688988756800576*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\
\", \\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\
\[NoBreak] is not a string or a box. ToExpression can only interpret strings \
or boxes as Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.693241920197928*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.6932427064449787`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Here", " ", "we", " ", "check", " ", 
   "getOrderingExternalNodesGrassmannians"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6852680915011263`*^9, 3.685269210725298*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestOrderingNodesGrassmannian", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "perfs", ",", "srcs", ",", "snks", ",", "multiplic", ",", 
       "lowestloopPM", ",", "jj", ",", "Cmatrix", ",", "variablesmatrix", ",",
        "orderingextnodesCmat", ",", "possibleidentitycolumns", ",", 
       "externalvariables", ",", "extvarstonodenums", ",", "thesourcenodes", 
       ",", "orderingC"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "c", "]"}], "+", 
           RowBox[{
            RowBox[{"Dimensions", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "=!=", "0"}], "&&", 
         RowBox[{"PlanarGraphQ", "[", 
          RowBox[{"AdjacencyGraph", "[", 
           RowBox[{"turnIntoAdjacencyMatrix", "[", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "a", " ", "dimer"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perfs", "=", 
          RowBox[{"perfectMatchings", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"srcs", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSourceNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"snks", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getSinkNodes", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "perfs"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"multiplic", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Tally", "[", "srcs", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{"Tally", "[", "srcs", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "_"}], "}"}]}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", "1"}], "]"}], "]"}], "&"}], ",", "srcs"}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"perfs", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"lowestloopPM", "=", 
             RowBox[{"lowNumberLoopsPMpos", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"jj", "=", "1"}], ",", 
           RowBox[{"jj", "\[LessEqual]", 
            RowBox[{"Length", "[", "perfs", "]"}]}], ",", 
           RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"jj", "\[Equal]", "lowestloopPM"}], "||", 
               RowBox[{
                RowBox[{"multiplic", "[", 
                 RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}]}], 
              RowBox[{"(*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"multiplic", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], "\[LessEqual]", "3"}], "&&", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "jj", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], "]"}], "\[LessEqual]", 
                  RowBox[{"10", "-", 
                   RowBox[{"multiplic", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}]}]}], ")"}], "*)"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Cmatrix", "=", 
                RowBox[{"grassmannianMatrix", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                  RowBox[{"perfs", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"Cmatrix", "=!=", "Null"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"orderingC", "=", 
                   RowBox[{"getOrderingExternalNodesGrassmannian", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";",
                   "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "orderingC", "]"}], "=!=", 
                    RowBox[{
                    RowBox[{"Length", "[", "c", "]"}], "+", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "d"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the \
getOrderingExternalNodesGrassmannians! Its length is not equal to the number \
of external nodes.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"Cmatrix", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"orderingextnodesCmat", "=", "orderingC"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"possibleidentitycolumns", "=", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", "Cmatrix", "]"}], "]"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"externalvariables", "=", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"b", ",", "c"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"extvarstonodenums", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", 
                    RowBox[{
                    RowBox[{"getExternalEdgeNodeNumbers", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&"}], ",", 
                    "externalvariables"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"thesourcenodes", "=", 
                    RowBox[{"orderingextnodesCmat", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "Cmatrix", "]"}], ",", 
                    "possibleidentitycolumns"}], "]"}], "]"}], "]"}], "]"}]}],
                     ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", "thesourcenodes", "]"}], "=!=", 
                    RowBox[{"srcs", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the \
getOrderingExternalNodesGrassmannian! It doesn't correspond with the source \
set of the Grassmannian\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"variablesmatrix", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", "#", "]"}], ",", 
                    "externalvariables"}], "]"}], "&"}], ",", "Cmatrix", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "===", 
                    RowBox[{"{", "}"}]}], "||", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}]}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "input", "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "output", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"input", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"{", "}"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"output", "=", 
                    RowBox[{"Intersection", "@@", "input"}]}], ";"}]}], "]"}],
                     ";", "output"}]}], "]"}]}], "]"}], "[", "#", "]"}], 
                    "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "&"}], ",", 
                    "variablesmatrix"}], "]"}]}], "]"}], "/.", 
                    "extvarstonodenums"}], ",", "thesourcenodes"}], "}"}]}], 
                    "]"}]}], ")"}], "=!=", "True"}], "||", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "===", 
                    RowBox[{"{", "}"}]}], "||", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}]}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "variablesmatrix", "]"}]}], 
                    "]"}], "/.", "extvarstonodenums"}], ",", 
                    "orderingextnodesCmat"}], "}"}]}], "]"}]}], ")"}], "=!=", 
                    "True"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the \
getOrderingExternalEdgesGrassmannian! It doesn't correspond to what the \
Grassmannian matrix has\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "DistributeDefinitions", "[", "allTestOrderingNodesGrassmannian", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingNodesGrassmannian", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingNodesGrassmannian", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", "5000"}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Partial! Not computing all bfts, just all scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingNodesGrassmannian", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestOrderingNodesGrassmannian", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685268103150651*^9, 
   3.6852681118260403`*^9}, {3.6852681672401114`*^9, 3.68526824122163*^9}, {
   3.685268331633485*^9, 3.68526836654072*^9}, {3.6852688433597307`*^9, 
   3.6852688444693604`*^9}, {3.6852688890254445`*^9, 3.685269017465767*^9}, {
   3.6852690571209216`*^9, 3.685269062694605*^9}, {3.6852691679656286`*^9, 
   3.685269173014634*^9}, {3.6852692136091814`*^9, 3.6852692319968824`*^9}, {
   3.685269276821148*^9, 3.68526953919482*^9}, {3.6852696274617634`*^9, 
   3.685269670148961*^9}, {3.685269704375707*^9, 3.685269726015604*^9}, {
   3.6852697631616135`*^9, 3.685269764670931*^9}, {3.6852706116180286`*^9, 
   3.685270612711822*^9}, {3.6852707672892075`*^9, 3.6852707972620173`*^9}, {
   3.685461872581338*^9, 3.6854618768307877`*^9}, 3.68568450292248*^9, {
   3.685685419224196*^9, 3.685685419608183*^9}, {3.6889887725610523`*^9, 
   3.688988829167994*^9}, {3.688988883031892*^9, 3.688988883176408*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.69328581542628*^9}],

Cell[BoxData["\<\"Partial! Not computing all bfts, just all scattering\"\>"], \
"Print",
 CellChangeTimes->{3.6932865600570717`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "planarityQ"}], ",", " ", 
   "stratificationBoundaries", ",", " ", "stratificationNumbers", ",", " ", 
   "stratificationEulerNumber", ",", " ", 
   RowBox[{
    RowBox[{"stratificationGraph", ".", " ", "DOING"}], " ", "ONE", " ", 
    "PART", " ", "AT", " ", "A", " ", 
    RowBox[{"TIME", "!"}]}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.685270676355695*^9, 3.685270678911297*^9}, {3.68569555062142*^9, 
   3.685695550747994*^9}, {3.695651095116686*^9, 3.695651095388939*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"stratificationBoundariesNoPlanarity", "[", 
      RowBox[{
      "topleft_", ",", "topright_", ",", "bottomleft_", ",", "bottomright_", 
       ",", 
       RowBox[{"checkneeded_:", "False"}], ",", 
       RowBox[{"inputBFTgraph_:", "False"}], ",", 
       RowBox[{"gauging_:", "2"}]}], "]"}], "/;", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gauging", "===", "1"}], "||", 
       RowBox[{"gauging", "===", "2"}]}], ")"}]}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "BFTgraph", ",", "checkOK", ",", "matchingpoly", ",", "stratification",
         ",", "xlistandPmatrix", ",", "modulispace", ",", "startingplanarity",
         ",", "removable", ",", "topdim", ",", "varlist", ",", 
        "makeDaughterGraphs", ",", "planarReducibility", ",", "tofixlevels", 
        ",", "maxnonplanardimension", ",", "level", ",", "nonplanarpositions",
         ",", "planarboundaries", ",", "nonplanarboundaries", ",", 
        "templevel", ",", "boundarykillededges", ",", "newplanarity", ",", 
        "planarpositions", ",", "fix", ",", "identremovable", ",", 
        "patternidentremovable", ",", "dim", ",", "locationofparents", ",", 
        "thislevelspositions"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"gauging", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"BFTgraph", "=", "True"}], ";"}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{
          RowBox[{"BFTgraph", "=", "inputBFTgraph"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"checkOK", "=", "True"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"checkneeded", "\[Equal]", "True"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"checkOK", "=", 
           RowBox[{"getKasteleynCheckQ", "[", 
            RowBox[{
            "topleft", ",", "topright", ",", "bottomleft", ",", "bottomright",
              ",", "BFTgraph"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"checkOK", "\[Equal]", "True"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "We", " ", "begin", " ", "by", " ", "making", " ", "the", " ", 
            "face", " ", "lattice", " ", "of", " ", "the", " ", "matching", 
            " ", 
            RowBox[{"polytope", ".", " ", "Each"}], " ", "element", " ", "in",
             " ", "the", " ", "face", " ", "lattice", " ", "will", " ", "be", 
            " ", "composed", " ", "of", " ", "three", " ", 
            RowBox[{"objects", ":", " ", 
             RowBox[{
             "the", " ", "perfect", " ", "matching", " ", "matrix", " ", 
              "P"}]}]}], ",", " ", 
           RowBox[{"the", " ", "moduli", " ", 
            RowBox[{"space", "/", "matroid"}], " ", "polytope"}], ",", " ", 
           RowBox[{"and", " ", "the", " ", "answer", " ", "to", " ", 
            RowBox[{"planarityQ", ".", " ", "This"}], " ", "will", " ", 
            "allow", " ", "us", " ", "to", " ", "construct", " ", "the", " ", 
            "face", " ", "lattice", " ", "while", " ", "computing", " ", 
            "the", " ", "perfect", " ", "matchings", " ", "and", " ", 
            "matrix", " ", "P", " ", "as", " ", "few", " ", "times", " ", 
            "as", " ", "possible", " ", 
            RowBox[{"(", 
             RowBox[{"not", " ", "once", " ", "per", " ", 
              RowBox[{"subgraph", "!"}]}], ")"}]}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"We", "'"}], "ll", " ", "start", " ", "with", " ", 
             "making", " ", "the", " ", "top"}], "-", 
            RowBox[{"dimensional", " ", 
             RowBox[{"element", ".", " ", "In"}], " ", "P", " ", "we", " ", 
             "shall", " ", "also", " ", "tag", " ", "on", " ", "which", " ", 
             "edges", " ", "correspond", " ", "to", " ", "each", " ", 
             "row"}]}], ",", " ", 
           RowBox[{
           "by", " ", "making", " ", "the", " ", "first", " ", "element", " ",
             "of", " ", "each", " ", "row", " ", "the", " ", "edge", " ", 
            "name"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"matchingpoly", "=", 
           RowBox[{"matchingPolytope", "[", 
            RowBox[{
            "topleft", ",", "topright", ",", "bottomleft", ",", "bottomright",
              ",", "checkneeded", ",", "BFTgraph"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "matchingpoly", "]"}], "===", "0"}], "||", 
             RowBox[{
              RowBox[{
               RowBox[{"Dimensions", "[", "matchingpoly", "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], "===", "0"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"stratification", "=", 
              RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
            RowBox[{
             RowBox[{"xlistandPmatrix", "=", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", 
                 RowBox[{"{", 
                  RowBox[{"Variables", "[", 
                   RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{
                    "topleft", ",", "topright", ",", "bottomleft", ",", 
                    "bottomright"}], "]"}], "]"}], "}"}], "]"}], ",", 
                "matchingpoly", ",", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"modulispace", "=", 
              RowBox[{"moduliSpaceBFT", "[", 
               RowBox[{
               "topleft", ",", "topright", ",", "bottomleft", ",", 
                "bottomright", ",", "gauging", ",", "checkneeded", ",", 
                "BFTgraph"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "This", " ", "will", " ", "be", " ", "the", " ", "top"}], "-", 
               RowBox[{
               "dimensional", " ", "element", " ", "in", " ", "our", " ", 
                "stratification"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"startingplanarity", "=", "False"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"BFTgraph", "||", "startingplanarity"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"removable", "[", "0", "]"}], "=", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{
                   "xlistandPmatrix", ",", "modulispace", ",", "True"}], 
                   "}"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Since", " ", "planarity", " ", "is", " ", "inherited", " ", 
                  "by", " ", "subgraphs"}], ",", " ", 
                 RowBox[{"this", " ", "means", " ", 
                  RowBox[{"we", "'"}], "ll", " ", "never", " ", "have", " ", 
                  "to", " ", "assess", " ", "planarity", " ", "again", " ", 
                  "and", " ", "we", " ", "can", " ", "treat", " ", 
                  "everything", " ", "as", " ", 
                  RowBox[{"planar", ".", " ", "This"}], " ", "will", " ", 
                  "mean", " ", "we", " ", "can", " ", "assess", " ", 
                  "reducibility", " ", "very", " ", "fast", " ", "and", " ", 
                  "easily"}], ",", " ", 
                 RowBox[{
                 "and", " ", "identify", " ", "everything", " ", "according", 
                  " ", "to", " ", "their", " ", "moduli", " ", 
                  RowBox[{"space", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
               ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"removable", "[", "0", "]"}], "=", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{
                   "xlistandPmatrix", ",", "modulispace", ",", 
                    "startingplanarity"}], "}"}], "}"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"We", "'"}], "ll", " ", "save", " ", "some", " ", 
               "basic", " ", "information", " ", "to", " ", "avoid", " ", 
               "having", " ", "to", " ", "evaluate", " ", "it", " ", "many", 
               " ", "times"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"topdim", "=", 
              RowBox[{"dimensionPolytope", "[", "matchingpoly", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"varlist", "=", 
              RowBox[{"Variables", "[", 
               RowBox[{"joinupKasteleyn", "[", 
                RowBox[{
                "topleft", ",", "topright", ",", "bottomleft", ",", 
                 "bottomright"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "For", " ", "each", " ", "element", " ", "in", " ", "the", " ",
                 "face", " ", "lattice"}], ",", " ", 
               RowBox[{
               "we", " ", "will", " ", "need", " ", "to", " ", "find", " ", 
                "all", " ", "of", " ", "its", " ", 
                RowBox[{"boundaries", ".", " ", "These"}], " ", "are", " ", 
                "found", " ", "by", " ", "deleting", " ", 
                RowBox[{"edges", ".", " ", "makeDaughterGraphs"}], " ", 
                "takes", " ", "an", " ", "element", " ", "in", " ", "the", 
                " ", "face", " ", "lattice", " ", "and", " ", "removes", " ", 
                "all", " ", "possible", " ", "edges"}], ",", " ", 
               RowBox[{"making", " ", "potential", " ", "boundaries", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                  "which", " ", "will", " ", "need", " ", "to", " ", "be", 
                   " ", "verified"}], ")"}], ".", " ", "Initially"}], " ", 
                "the", " ", "planarity", " ", "of", " ", "the", " ", 
                "subgraphs", " ", "is", " ", "inherited"}], ",", " ", 
               RowBox[{
                RowBox[{"i", ".", "e", ".", " ", "is"}], " ", "declared", " ",
                 "equal", " ", "to", " ", "the", " ", "originating", " ", 
                RowBox[{"graph", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"makeDaughterGraphs", "=", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "boundaryelement", "}"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "pmat", ",", "moduli", ",", "elementplanarity", ",", 
                    "pmstokeep", ",", "daughters"}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"pmat", "=", 
                    RowBox[{"boundaryelement", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"moduli", "=", 
                    RowBox[{"boundaryelement", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"elementplanarity", "=", 
                    RowBox[{"boundaryelement", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"pmstokeep", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"boundaryelement", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], ",", "0", ",", "1"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "pmat", "]"}]}], "}"}]}], "]"}]}], 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"daughters", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"pmat", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"pmstokeep", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], ",", "1"}], "]"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"pmstokeep", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "_"}], "]"}]}], "]"}], ",", 
                    RowBox[{"moduli", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"pmstokeep", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}], "-", "1"}]}], "]"}], 
                    "]"}], ",", "elementplanarity"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "pmstokeep", "]"}]}], "}"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", "daughters"}]}], 
                 "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"After", " ", "making", " ", "allsubgraphs"}], ",", 
               " ", 
               RowBox[{
                RowBox[{"we", "'"}], "ll", " ", "keep", " ", "only", " ", 
                "those", " ", "whose", " ", "dimension", " ", "has", " ", 
                "decreased", " ", "by", " ", 
                RowBox[{"one", ".", " ", "Furthermore"}]}], ",", " ", 
               RowBox[{"since", " ", 
                RowBox[{"we", "'"}], "re", " ", "ultimately", " ", "only", 
                " ", "interested", " ", "in", " ", "reduced", " ", "graphs"}],
                ",", " ", 
               RowBox[{
                RowBox[{"we", "'"}], "ll", " ", "remove", " ", "those", " ", 
                "that", " ", "are", " ", 
                RowBox[{"reducible", ".", " ", "planarReducibility"}], " ", 
                "is", " ", "able", " ", "to", " ", "take", " ", "a", " ", 
                "planar", " ", "case", " ", "and", " ", "tell", " ", "you", 
                " ", "its", " ", "reducibility", " ", "very", " ", 
                RowBox[{"fast", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"planarReducibility", "=", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"pmatrix", ",", "modulispace"}], "}"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "pmatrixtranspose", ",", "modulitranspose", ",", 
                    "pmatrixshort", ",", "reducib"}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"pmatrix", "===", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"reducib", "=", "True"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"pmatrixtranspose", "=", 
                    RowBox[{"Transpose", "[", "pmatrix", "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"modulispace", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"modulitranspose", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "0", "}"}], ",", 
                    RowBox[{"Length", "[", "pmatrixtranspose", "]"}]}], 
                    "]"}]}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"modulitranspose", "=", 
                    RowBox[{"Transpose", "[", "modulispace", "]"}]}], ";"}]}],
                     "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"pmatrixshort", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "@@", 
                    RowBox[{"pmatrixtranspose", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"modulitranspose", ",", "#"}], "]"}], "]"}], 
                    "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{
                    "DeleteDuplicates", "[", "modulitranspose", "]"}]}], 
                    "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"pmatrixshort", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "pmatrixshort", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"reducib", "=", "True"}], ";"}], ",", 
                    RowBox[{
                    RowBox[{"reducib", "=", "False"}], ";"}]}], "]"}], 
                    ";"}]}], "]"}], ";", "\[IndentingNewLine]", "reducib"}]}],
                  "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"Now", " ", 
                RowBox[{"we", "'"}], "ll", " ", "go", " ", "through", " ", 
                "each", " ", "level"}], ",", " ", 
               RowBox[{
                RowBox[{"starting", " ", "from", " ", "the", " ", "top"}], 
                "-", 
                RowBox[{
                "dimensional", " ", "one", " ", "and", " ", "working", " ", 
                 "our", " ", "way", " ", "down"}]}], ",", " ", 
               RowBox[{
               "and", " ", "first", " ", "construct", " ", "the", " ", "face",
                 " ", "lattice"}], ",", " ", 
               RowBox[{
               "and", " ", "then", " ", "remove", " ", "those", " ", 
                "elements", " ", "which", " ", "are", " ", 
                RowBox[{"reducible", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"Sometimes", " ", 
               RowBox[{"(", 
                RowBox[{
                "when", " ", "the", " ", "starting", " ", "graph", " ", "is", 
                 " ", "reducible"}], ")"}], " ", "a", " ", "level", " ", 
               "only", " ", "contains", " ", "reducible", " ", 
               RowBox[{"boundaries", ".", " ", "In"}], " ", "these", " ", 
               "cases", " ", 
               RowBox[{"we", "'"}], "ll", " ", "eliminate", " ", "the", " ", 
               "reducible", " ", "examples", " ", "in", " ", "a", " ", 
               "second", " ", "step"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"We", "'"}], "ll", " ", "start", " ", "by", " ", 
                "assessing", " ", "the", " ", "reducibility", " ", "of", " ", 
                "the", " ", "starting", " ", 
                RowBox[{"point", ".", " ", "If"}], " ", 
                RowBox[{"it", "'"}], "s", " ", "planar"}], ",", " ", 
               RowBox[{
               "we", " ", "may", " ", "use", " ", "the", " ", "fast", " ", 
                RowBox[{"way", ".", " ", "Otherwise"}], " ", 
                RowBox[{"we", "'"}], "ll", " ", "need", " ", "to", " ", "use",
                 " ", "the", " ", "dimension", " ", "of", " ", "the", " ", 
                RowBox[{"Grassmannian", "."}]}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"BFTgraph", "||", "startingplanarity"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"planarReducibility", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"removable", "[", "0", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "None", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"removable", "[", "0", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "]"}], "===", 
                   "False"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"tofixlevels", "=", 
                    RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
                  RowBox[{
                   RowBox[{"tofixlevels", "=", 
                    RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]",
                  "]"}], ";"}], "\[IndentingNewLine]", ",", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{
                    "topleft", ",", "topright", ",", "bottomleft", ",", 
                    "bottomright"}], "]"}], "===", "topdim"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"tofixlevels", "=", 
                    RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
                  RowBox[{
                   RowBox[{"tofixlevels", "=", 
                    RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]",
                  "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "We", " ", "will", " ", "only", " ", "evaluate", " ", "the", 
               " ", "Grassmannian", " ", "dimension", " ", "of", " ", "those",
                " ", "nonplanar", " ", "diagrams", " ", "that", " ", "have", 
               " ", "a", " ", "chance", " ", "of", " ", "not", " ", "being", 
               " ", 
               RowBox[{"reducible", "."}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"maxnonplanardimension", "=", "topdim"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"For", "[", 
              RowBox[{
               RowBox[{"level", "=", "1"}], ",", 
               RowBox[{"level", "\[LessEqual]", "topdim"}], ",", 
               RowBox[{"level", "++"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"For", " ", "each", " ", "element", " ", "in", " ", 
                  RowBox[{"removable", "[", 
                   RowBox[{"level", "-", "1"}], "]"}], " ", "we", " ", "make",
                   " ", "all", " ", 
                  RowBox[{"subgraphs", ".", " ", 
                   RowBox[{"We", "'"}]}], "ll", " ", "end", " ", "up", " ", 
                  "with", " ", "many", " ", 
                  RowBox[{"duplicates", ".", " ", "Since"}], " ", "they", " ",
                   "all", " ", "inherit", " ", "their", " ", "planarity"}], 
                 ",", " ", 
                 RowBox[{
                  RowBox[{
                  "some", " ", "subgraphs", " ", "are", " ", "simultaneously",
                    " ", "labelled", " ", "planar"}], "=", 
                  RowBox[{
                   RowBox[{
                   "True", " ", "as", " ", "well", " ", "as", " ", "planar"}],
                    "=", 
                   RowBox[{
                    RowBox[{"False", ".", " ", "If"}], " ", "any", " ", "of", 
                    " ", "these", " ", "labels", " ", "is", " ", "True"}]}]}],
                  ",", " ", 
                 RowBox[{
                  RowBox[{
                  "then", " ", "the", " ", "graph", " ", "has", " ", "come", 
                   " ", "from", " ", "a", " ", "planar", " ", "one", " ", 
                   "and", " ", "must", " ", "hence", " ", "be", " ", 
                   RowBox[{"planar", ".", " ", "If"}], " ", 
                   RowBox[{"it", "'"}], "s", " ", "still", " ", "labelled", 
                   " ", "non"}], "-", "planar"}], ",", " ", 
                 RowBox[{
                  RowBox[{"we", "'"}], "ll", " ", "later", " ", "use", " ", 
                  "planarityQ", " ", "to", " ", "check", " ", "whether", " ", 
                  "this", " ", "is", " ", "still", " ", "the", " ", 
                  RowBox[{"case", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"removable", "[", "level", "]"}], "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Last", ",", "#"}], "]"}]}]}], "}"}], "&"}], ",", 
                   RowBox[{"GatherBy", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"makeDaughterGraphs", "[", 
                    RowBox[{
                    RowBox[{"removable", "[", 
                    RowBox[{"level", "-", "1"}], "]"}], "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"removable", "[", 
                    RowBox[{"level", "-", "1"}], "]"}], "]"}]}], "}"}]}], 
                    "]"}], ",", "First"}], "]"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{"Now", " ", 
                  RowBox[{"we", "'"}], "ll", " ", "remove", " ", "those", " ",
                   "elements", " ", "whose", " ", "dimension", " ", "has", 
                  " ", "decreased", " ", "by", " ", "too", " ", "much"}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"removable", "[", "level", "]"}], "=", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"removable", "[", "level", "]"}], ",", 
                   RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"dimensionPolytope", "[", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "None", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
                    RowBox[{"topdim", "-", "level"}]}]}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                  "On", " ", "the", " ", "surviving", " ", "elements"}], ",", 
                  " ", 
                  RowBox[{
                   RowBox[{"we", "'"}], "ll", " ", "reassess", " ", 
                   "planarity", " ", "on", " ", "the", " ", "nonplanar", " ", 
                   RowBox[{"cases", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"nonplanarpositions", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Position", "[", 
                   RowBox[{
                    RowBox[{"removable", "[", "level", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "False"}], "}"}]}], "]"}], "]"}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"templevel", "=", 
                 RowBox[{"removable", "[", "level", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{"Now", " ", 
                  RowBox[{"we", "'"}], "ll", " ", "take", " ", "the", " ", 
                  "nonplanar", " ", "cases", " ", "and", " ", "check", " ", 
                  "whether", " ", "they", " ", "really", " ", "are", " ", 
                  "still", " ", 
                  RowBox[{"nonplanar", ".", " ", "Begin"}], " ", "by", " ", 
                  "turning", " ", "each", " ", "of", " ", "these", " ", 
                  "cases", " ", "into", " ", "a", " ", "list", " ", "of", " ",
                   "killed", " ", 
                  RowBox[{"edges", "."}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"boundarykillededges", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{"varlist", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "All", ",", "1"}], "]"}], "]"}]}], 
                    "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"removable", "[", "level", "]"}], "[", 
                    RowBox[{"[", "nonplanarpositions", "]"}], "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"newplanarity", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{"False", "&"}], ",", "boundarykillededges"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"templevel", "[", 
                  RowBox[{"[", 
                   RowBox[{"nonplanarpositions", ",", "3"}], "]"}], "]"}], 
                 "=", "newplanarity"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "Now", " ", "we", " ", "know", " ", "for", " ", "sure", " ", 
                  "that", " ", "the", " ", "planarity", " ", "labelling", " ",
                   "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"We", "'"}], "ll", " ", "now", " ", "want", " ", 
                   "to", " ", "only", " ", "keep", " ", "reduced", " ", 
                   RowBox[{"elements", ".", " ", "For"}], " ", "planar", " ", 
                   "cases"}], ",", " ", 
                  RowBox[{
                  "planarReducibility", " ", "is", " ", "very", " ", "fast", 
                   " ", "at", " ", "deterining", " ", 
                   RowBox[{"this", ".", " ", "For"}], " ", "nonplanar", " ", 
                   "cases"}], ",", " ", 
                  RowBox[{
                   RowBox[{"we", "'"}], "ll", " ", "need", " ", "to", " ", 
                   "check", " ", "whether", " ", "the", " ", "dimension", " ",
                    "of", " ", "the", " ", "Grassmannian", " ", "is", " ", 
                   "the", " ", "same", " ", "as", " ", "that", " ", "of", " ", 
                   RowBox[{"P", ".", " ", "If"}], " ", "not"}], ",", " ", 
                  RowBox[{
                  "it", " ", "means", " ", "we", " ", "have", " ", "secretly",
                    " ", "reduced", " ", "the", " ", "dimension", " ", "of", 
                   " ", "the", " ", "Grassmannian", " ", "too", " ", "much", 
                   " ", "by", " ", "creating", " ", "a", " ", "reducible", 
                   " ", 
                   RowBox[{"graph", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"planarpositions", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Position", "[", 
                   RowBox[{"templevel", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "True"}], "}"}]}], "]"}], "]"}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"nonplanarpositions", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Position", "[", 
                   RowBox[{"templevel", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "False"}], "}"}]}], "]"}], "]"}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"We", "'"}], "ll", " ", "put", " ", "the", " ", 
                   "reduced", " ", "planar", " ", "elements", " ", "first"}], 
                  ",", " ", 
                  RowBox[{
                   RowBox[{"then", " ", "the", " ", "reduced", " ", "non"}], 
                   "-", 
                   RowBox[{"planar", " ", "ones"}]}]}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"planarboundaries", "=", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"templevel", "[", 
                    RowBox[{"[", "planarpositions", "]"}], "]"}], ",", 
                   RowBox[{"zz_", "/;", 
                    RowBox[{
                    RowBox[{"planarReducibility", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "None", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"zz", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "===", 
                    "False"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                  "For", " ", "the", " ", "nonplanar", " ", "boundaries", " ", 
                   RowBox[{"we", "'"}], "ll", " ", "need", " ", "to", " ", 
                   "evluate", " ", "the", " ", "dimension", " ", "of", " ", 
                   "the", " ", 
                   RowBox[{"Grassmannian", ".", " ", "However"}]}], ",", " ", 
                  RowBox[{
                   RowBox[{"if", " ", "at", " ", "level"}], "=", 
                   RowBox[{
                   "1", " ", "we", " ", "already", " ", "found", " ", "that", 
                    " ", "all", " ", "nonplanar", " ", "diagrams", " ", "had",
                     " ", "at", " ", "most", " ", "dim", 
                    RowBox[{"(", "Grassmannian", ")"}]}]}], ",", " ", 
                  RowBox[{
                  "the", " ", "nonplanar", " ", "diagrams", " ", "at", " ", 
                   "this", " ", "level", " ", "will", " ", "not", " ", "have",
                    " ", "a", " ", "higher", " ", "dimension", " ", "than", 
                   " ", 
                   RowBox[{"that", ".", " ", "Hence"}]}], ",", " ", 
                  RowBox[{
                   RowBox[{
                   "if", " ", "that", " ", "dimension", " ", "is", " ", 
                    "less", " ", "than", " ", "topdim"}], "-", "level"}], ",",
                   " ", 
                  RowBox[{
                  "we", " ", "do", " ", "not", " ", "even", " ", "need", " ", 
                   "to", " ", "bother", " ", "evaluating", " ", "the", " ", 
                   "Grassmannian"}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"maxnonplanardimension", "\[GreaterEqual]", 
                   RowBox[{"topdim", "-", "level"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"nonplanarboundaries", "=", 
                    RowBox[{
                    RowBox[{"templevel", "[", 
                    RowBox[{"[", "nonplanarpositions", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{
                    RowBox[{"topleft", "/.", "#"}], ",", 
                    RowBox[{"topright", "/.", "#"}], ",", 
                    RowBox[{"bottomleft", "/.", "#"}], ",", "bottomright"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"boundarykillededges", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"newplanarity", ",", "False"}], "]"}], "]"}], 
                    "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"topdim", "-", "level"}]}], "]"}], "]"}], "]"}], 
                    "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                  RowBox[{
                   RowBox[{"nonplanarboundaries", "=", 
                    RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"removable", "[", "level", "]"}], "=", 
                 RowBox[{"Join", "[", 
                  RowBox[{"planarboundaries", ",", "nonplanarboundaries"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"removable", "[", "level", "]"}], "===", 
                   RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{
                    "If", " ", "some", " ", "level", " ", "happens", " ", 
                    "to", " ", "only", " ", "contain", " ", "reducible", " ", 
                    "examples"}], ",", " ", 
                    RowBox[{
                    RowBox[{"we", "'"}], "ll", " ", "keep", " ", "all", " ", 
                    "boundaries"}], ",", " ", 
                    RowBox[{
                    "and", " ", "remove", " ", "the", " ", "reducible", " ", 
                    "ones", " ", 
                    RowBox[{"later", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"removable", "[", "level", "]"}], "=", 
                    "templevel"}], ";", "\[IndentingNewLine]", 
                   RowBox[{"tofixlevels", "=", 
                    RowBox[{"Append", "[", 
                    RowBox[{"tofixlevels", ",", "level"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "If", " ", "we", " ", "are", " ", "the", " ", "at", " ", 
                    "the", " ", "first", " ", "level", " ", "and", " ", 
                    "there", " ", "were", " ", "no", " ", "reduced", " ", 
                    "boundaries"}], ",", " ", 
                    RowBox[{
                    "find", " ", "out", " ", "what", " ", "the", " ", 
                    "maximal", " ", "dimension", " ", "of", " ", "the", " ", 
                    "Grassmannian", " ", "is", " ", "for", " ", "nonplanar", 
                    " ", "diagrams"}], ",", " ", 
                    RowBox[{
                    RowBox[{"so", " ", "that", " ", "we", " ", 
                    RowBox[{"don", "'"}], "t", " ", "need", " ", "to", " ", 
                    "evaluate", " ", "it", " ", "again", " ", "until", " ", 
                    "topdim"}], "-", 
                    RowBox[{
                    "level", " ", "is", " ", "equal", " ", "to", " ", "this", 
                    " ", "Grassmannian", " ", 
                    RowBox[{"dimension", "."}]}]}]}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"level", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"maxnonplanardimension", "=", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dimensionGrassmannian", "[", 
                    RowBox[{
                    RowBox[{"topleft", "/.", "#"}], ",", 
                    RowBox[{"topright", "/.", "#"}], ",", 
                    RowBox[{"bottomleft", "/.", "#"}], ",", "bottomright"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"boundarykillededges", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"newplanarity", ",", "False"}], "]"}], "]"}], 
                    "]"}], "]"}]}], "]"}], "]"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
               "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"For", "[", 
              RowBox[{
               RowBox[{"fix", "=", "1"}], ",", 
               RowBox[{"fix", "\[LessEqual]", 
                RowBox[{"Length", "[", "tofixlevels", "]"}]}], ",", 
               RowBox[{"fix", "++"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"removable", "[", 
                  RowBox[{"tofixlevels", "[", 
                   RowBox[{"[", "fix", "]"}], "]"}], "]"}], "=", 
                 RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"Now", " ", 
                RowBox[{"we", "'"}], "ll", " ", "identify", " ", "boundaries",
                 " ", "according", " ", "to", " ", "their", " ", 
                RowBox[{"substratification", ".", " ", "From"}], " ", "each", 
                " ", "element"}], ",", " ", 
               RowBox[{
                RowBox[{"it", "'"}], "s", " ", "sufficient", " ", "to", " ", 
                "check", " ", "the", " ", "substratification", " ", "one", 
                " ", "level", " ", "down"}], ",", " ", 
               RowBox[{
               "since", " ", "everything", " ", "below", " ", "that", " ", 
                "has", " ", "been", " ", "vetted", " ", "by", " ", "this", 
                " ", "first", " ", "substratification", " ", 
                RowBox[{"level", ".", " ", "At"}], " ", "the", " ", "bottom", 
                " ", "level", " ", 
                RowBox[{"(", 
                 RowBox[{"zero", "-", "dimensional"}], ")"}], " ", "we", " ", 
                "can", " ", "identify", " ", "everything", " ", "according", 
                " ", "to", " ", "their", " ", "moduli", " ", 
                RowBox[{"space", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"identremovable", "[", "topdim", "]"}], "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "All", ",", "1"}], "]"}], "]"}], "&"}], 
                ",", 
                RowBox[{"GatherBy", "[", 
                 RowBox[{
                  RowBox[{"removable", "[", "topdim", "]"}], ",", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "&"}]}], "]"}], ",", 
                RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "In", " ", "order", " ", "to", " ", "compute", " ", "the", " ",
                 "substratifications", " ", "in", " ", "a", " ", "fast", " ", 
                "way"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"we", "'"}], "ll", " ", "check", " ", "which", " ", 
                 "boundaries", " ", "of", " ", "one", " ", "dimension", " ", 
                 "higher", " ", "have", " ", "these", " ", "as", " ", 
                 RowBox[{"subsets", ".", " ", "We"}], " ", "can", " ", "do", 
                 " ", "this", " ", "by", " ", "writing", " ", "0"}], "-", 
                RowBox[{"dim", " ", "boundaries", " ", "as", " ", 
                 RowBox[{"{", 
                  RowBox[{"___", ",", "edge1", ",", "___", ",", "edge2", ",", 
                   RowBox[{"__", "..."}]}], "}"}], " ", "and", " ", "check", 
                 " ", "which", " ", "boundaries", " ", "of", " ", "one", " ", 
                 "dimension", " ", "high", " ", "fit", " ", "this", " ", 
                 "pattern"}]}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"patternidentremovable", "[", "topdim", "]"}], "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Alternatives", "@@", "#"}], "&"}], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Riffle", "[", 
                    RowBox[{"#", ",", "___", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}], "&"}], 
                  ",", 
                  RowBox[{"identremovable", "[", "topdim", "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"We", "'"}], "ll", " ", "now", " ", "go", " ", 
                "through", " ", "each", " ", "of", " ", "the", " ", 
                "dimensions"}], ",", " ", 
               RowBox[{"starting", " ", "from", " ", "the", " ", "bottom"}]}],
               "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"BFTgraph", "||", "startingplanarity"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "We", " ", "can", " ", "identify", " ", "everything", " ", 
                 "according", " ", "to", " ", "its", " ", "moduli", " ", 
                 "space"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"For", "[", 
                 RowBox[{
                  RowBox[{"dim", "=", "1"}], ",", 
                  RowBox[{"dim", "<", "topdim"}], ",", 
                  RowBox[{"dim", "++"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"identremovable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "All", ",", "1"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "&"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
               ",", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"we", "'"}], "ll", " ", "need", " ", "to", " ", 
                 "identify", " ", "according", " ", "to", " ", "the", " ", 
                 "substratifications"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"For", "[", 
                 RowBox[{
                  RowBox[{"dim", "=", "1"}], ",", 
                  RowBox[{"dim", "<", "topdim"}], ",", 
                  RowBox[{"dim", "++"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "Begin", " ", "by", " ", "turning", " ", "the", " ", 
                    "boundaries", " ", "into", " ", "lists", " ", "of", " ", 
                    "edges"}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "All", ",", "1"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}]}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "For", " ", "each", " ", "of", " ", "the", " ", "sub"}], 
                    "-", "boundaries"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    "we", " ", "want", " ", "to", " ", "find", " ", "which", 
                    " ", "graphs", " ", "of", " ", "one", " ", "dimension", 
                    " ", "higher", " ", "terminate", " ", "in", " ", "this", 
                    " ", "sub"}], "-", "boundary"}]}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"locationofparents", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], ",", "#"}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"patternidentremovable", "[", 
                    RowBox[{"topdim", "-", "dim", "+", "1"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "In", " ", "each", " ", "of", " ", "the", " ", "elements",
                     " ", "in", " ", 
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}]}], ",", " ", 
                    RowBox[{
                    "we", " ", "now", " ", "want", " ", "to", " ", "know", 
                    " ", "where", " ", "they", " ", "are", " ", "in", " ", 
                    "the", " ", "list", " ", "of", " ", 
                    RowBox[{"locationofparents", "."}]}]}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "Since", " ", "locationofparents", " ", "indexes", " ", 
                    "according", " ", "to", " ", "position"}], ",", " ", 
                    RowBox[{
                    RowBox[{"we", "'"}], "ll", " ", "turn", " ", 
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], " ", "into", " ", 
                    "positions", " ", 
                    RowBox[{"first", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"thislevelspositions", "=", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], "]"}], "]"}]}], 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"identremovable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"removable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"thislevelspositions", ",", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"locationofparents", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "#", ",", "___"}], "}"}]}], "]"}], 
                    "&"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Now", " ", 
                    RowBox[{"we", "'"}], "re", " ", "ready", " ", "to", " ", 
                    "do", " ", "the", " ", "same", " ", "thing", " ", "for", 
                    " ", "the", " ", "next", " ", "dimension"}], ",", " ", 
                    RowBox[{
                    "and", " ", "will", " ", "need", " ", 
                    "patternidentremovable", " ", "for", " ", "this", " ", 
                    "dimension"}]}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"patternidentremovable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Alternatives", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Riffle", "[", 
                    RowBox[{"#", ",", "___", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"identremovable", "[", 
                    RowBox[{"topdim", "-", "dim"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
               "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"Finally", ",", " ", 
               RowBox[{
                RowBox[{"the", " ", "top"}], "-", 
                RowBox[{
                "dimensional", " ", "level", " ", "is", " ", "simply", " ", 
                 "the", " ", "list", " ", "of", " ", "edges", " ", "in", " ", 
                 "the", " ", "starting", " ", "point"}]}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"identremovable", "[", "0", "]"}], "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "All", ",", "1"}], "]"}], "]"}], "}"}], 
                 "&"}], ",", 
                RowBox[{"removable", "[", "0", "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "The", " ", "stratification", " ", "will", " ", "be", " ", 
                "outputted", " ", "as", " ", "a", " ", "list", " ", "of", " ",
                 "elements"}], ",", " ", 
               RowBox[{
                RowBox[{
                "each", " ", "containing", " ", "all", " ", "the", " ", 
                 "boundaries", " ", "of", " ", "a", " ", "certain", " ", 
                 RowBox[{"dimensionality", ".", " ", "Each"}], " ", 
                 "boundary", " ", "is", " ", "expressed", " ", "as", " ", "a",
                  " ", "list", " ", "of", " ", "possible", " ", "non"}], "-", 
                RowBox[{
                "zero", " ", "edges", " ", "which", " ", "are", " ", "move"}],
                 "-", 
                RowBox[{"equivalent", " ", "configurations"}]}], ",", " ", 
               RowBox[{
               "all", " ", "representing", " ", "the", " ", "same", " ", 
                RowBox[{"boundary", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"stratification", "=", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"identremovable", "[", "iii", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"iii", ",", "0", ",", "topdim"}], "}"}]}], "]"}]}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{
          RowBox[{"stratification", "=", "Null"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "stratification"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestStratification", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dimP", ",", "kk", ",", "nn", ",", "maxCdim", ",", "numremovableedges", 
       ",", "scatteringstratification", ",", "bft2stratification", ",", 
       "bft1stratification", ",", "scatteringnums", ",", "bft2nums", ",", 
       "bft1nums", ",", "bft1euler", ",", "bft2euler", ",", "scatteringeuler",
        ",", "perfs", ",", "substratposscatter", ",", "nodeorder", ",", 
       "substratposbft2", ",", "substratposbft1", ",", "scattersubstrats", 
       ",", "planarity", ",", "toZero", ",", "ilev", ",", "shouldbelevel", 
       ",", "shouldbestratification", ",", "levelshift", ",", "checkStrats", 
       ",", "spuriousedgestozero", ",", "alternativescatteringstrat", ",", 
       "newa", ",", "newb", ",", "newc", ",", "newd", ",", "alternativedimP", 
       ",", "scatteringstratgraph", ",", "bft2stratgraph", ",", 
       "bft1stratgraph", ",", "scatteringadjmat", ",", 
       "howmanydaughtersscattering", ",", "fullsubstratposbft2", ",", 
       "fullbft2substrats", ",", "howmanydaughtersbft2", ",", "bft2adjmat", 
       ",", "bft1substrats", ",", "howmanydaughtersbft1", ",", "bft1adjmat", 
       ",", "parentposscatter", ",", "scatterparents", ",", 
       "howmanyparentsscattering", ",", "parentposbft2", ",", "bft2parents", 
       ",", "howmanyparentsbft2", ",", "parentposbft1", ",", "bft1parents", 
       ",", "howmanyparentsbft1"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "First", " ", "we", " ", "check", " ", "whether", " ", "the", " ", 
        "Kasteleyn", " ", "is", " ", "exaggerated", " ", "or", " ", 
        RowBox[{"not", ".", " ", "If"}], " ", "it", " ", "is"}], ",", " ", 
       RowBox[{
        RowBox[{"don", "'"}], "t", " ", "do", " ", "any", " ", "tests", " ", 
        "on", " ", 
        RowBox[{"it", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"We", " ", "say", " ", 
        RowBox[{"it", "'"}], "s", " ", "exxagerated", " ", "if", " ", "its", 
        " ", "matching", " ", "poytope", " ", "has", " ", "dimension", " ", 
        "greater", " ", "than", " ", "10"}], ",", " ", 
       RowBox[{
       "or", " ", "it", " ", "has", " ", "more", " ", "than", " ", "3", " ", 
        "levels", " ", "of", " ", "reducibility", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"e", ".", "g", ".", " ", "three"}], " ", "bubbbles"}], 
         ")"}]}], ",", " ", 
       RowBox[{
       "or", " ", "more", " ", "than", " ", "12", " ", "removable", " ", 
        "edges"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dimP", "=", 
       RowBox[{"dimensionPolytope", "[", 
        RowBox[{"matchingPolytope", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dimP", "\[LessEqual]", "10"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"kk", "=", 
          RowBox[{"getK", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"nn", "=", 
          RowBox[{"getN", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"maxCdim", "=", 
          RowBox[{"kk", 
           RowBox[{"(", 
            RowBox[{"nn", "-", "kk"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"dimP", "-", "maxCdim"}], "\[LessEqual]", "3"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"numremovableedges", "=", 
             RowBox[{"Length", "[", 
              RowBox[{"removableEdges", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"numremovableedges", "\[LessEqual]", "12"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"we", " ", "have", " ", "passed", " ", "the", " ", 
                RowBox[{"test", ":", " ", 
                 RowBox[{
                 "this", " ", "example", " ", "is", " ", "not", " ", 
                  "exaggeratedly", " ", "complex", " ", "and", " ", "is", " ",
                   "worth", " ", "testing"}]}]}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"scatteringstratification", "=", 
                RowBox[{"stratificationBoundaries", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"bft2stratification", "=", 
                RowBox[{"stratificationBoundaries", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"scatteringnums", "=", 
                RowBox[{"stratificationNumbers", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"bft2nums", "=", 
                RowBox[{"stratificationNumbers", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"scatteringeuler", "=", 
                RowBox[{"stratificationEulerNumber", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"bft2euler", "=", 
                RowBox[{"stratificationEulerNumber", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False",
                   ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"bft1stratification", "=", 
                   RowBox[{"stratificationBoundaries", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "True", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"bft1nums", "=", 
                   RowBox[{"stratificationNumbers", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "True", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"bft1euler", "=", 
                   RowBox[{"stratificationEulerNumber", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "True", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "bft1stratification", "]"}], "=!=", 
                    "List"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"Or", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "=!=", "List"}], "&"}], 
                    ",", "bft1stratification"}], "]"}]}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 1 \
stratification! It doesn't output a list of lists\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", "bft1stratification"}], "]"}], "=!=",
                     "bft1nums"}], "||", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"ijk", "+", "1"}]], 
                    RowBox[{"bft1nums", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "ijk"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ijk", ",", 
                    RowBox[{"Length", "[", "bft1nums", "]"}]}], "}"}]}], 
                    "]"}], "=!=", "bft1euler"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification numbers! They aren't equal to the length of the stratification \
lists, or they don't give the expected Euler number.\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Head", "[", "scatteringstratification", "]"}], "=!=",
                    "List"}], "||", 
                  RowBox[{"(", 
                   RowBox[{"Or", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "=!=", "List"}], "&"}], 
                    ",", "scatteringstratification"}], "]"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification! It doesn't output a list of lists\>\"", ",", 
                    "scatteringstratification"}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Head", "[", "bft2stratification", "]"}], "=!=", 
                   "List"}], "||", 
                  RowBox[{"(", 
                   RowBox[{"Or", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "=!=", "List"}], "&"}], 
                    ",", "bft2stratification"}], "]"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification! It doesn't output a list of lists\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"dimP", ">", "0"}], "&&", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", "scatteringstratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "=!=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", 
                    RowBox[{"stratificationBoundariesNoPlanarity", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "False", ",", "2"}], "]"}], ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification! It gives a different result when we don't use the planarity \
of the graph to speed things up\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]",
                 "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"dimP", ">", "0"}], "&&", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", "bft2stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "=!=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", 
                    RowBox[{"stratificationBoundariesNoPlanarity", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "False", ",", "2"}], "]"}], ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification! It gives a different result when we don't use the planarity \
of the graph to speed things up\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]",
                 "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"dimP", ">", "0"}], "&&", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", "bft1stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Sort", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", 
                    RowBox[{"stratificationBoundariesNoPlanarity", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "True", ",", "1"}], "]"}], ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 1 \
stratification! It gives a different result when we don't use the planarity \
of the graph to speed things up\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]",
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", "scatteringstratification"}], 
                    "]"}], "=!=", "scatteringnums"}], "||", 
                  RowBox[{
                   RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"ijk", "+", "1"}]], 
                    RowBox[{"scatteringnums", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "ijk"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ijk", ",", 
                    RowBox[{"Length", "[", "scatteringnums", "]"}]}], "}"}]}],
                     "]"}], "=!=", "scatteringeuler"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification numbers! They aren't equal to the length of the stratification \
lists, or they don't give the expected Euler number.\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", "bft2stratification"}], "]"}], "=!=",
                    "bft2nums"}], "||", 
                  RowBox[{
                   RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"ijk", "+", "1"}]], 
                    RowBox[{"bft2nums", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "ijk"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ijk", ",", 
                    RowBox[{"Length", "[", "bft2nums", "]"}]}], "}"}]}], 
                    "]"}], "=!=", "bft2euler"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification numbers! They aren't equal to the length of the stratification \
lists, or they don't give the expected Euler number.\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"perfs", "=", 
                RowBox[{"perfectMatchings", "[", 
                 RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"perfs", "\[NotEqual]", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "scatteringstratification", "]"}], 
                    "=!=", 
                    RowBox[{"dimP", "+", "1"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification! Its length is not equal to dim(P)+1\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "bft2stratification", "]"}], "=!=", 
                    RowBox[{"dimP", "+", "1"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification! Its length is not equal to dim(P)+1\>\""}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "bft1stratification", "]"}], "=!=", 
                    RowBox[{"dimP", "+", "1"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 1 \
stratification! Its length is not equal to dim(P)+1\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"And", "@@", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "===", "Integer"}], "&&", 
                    RowBox[{"#", "=!=", "0"}]}], ")"}], "&"}], ",", 
                    RowBox[{"scatteringnums", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"scatteringnums", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "\[NotEqual]", "0"}], "&"}], ")"}]}], ",", 
                    "1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], "]"}]}], "=!=",
                   "True"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification numbers! After initial zeroes, there should be a nonzero \
number\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"And", "@@", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "===", "Integer"}], "&&", 
                    RowBox[{"#", "=!=", "0"}]}], ")"}], "&"}], ",", 
                    RowBox[{"bft2nums", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"bft2nums", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "\[NotEqual]", "0"}], "&"}], ")"}]}], ",", 
                    "1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], "]"}]}], "=!=",
                   "True"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification numbers! After initial zeroes, there should be a nonzero \
number\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], "===", "Integer"}], "&&", 
                    RowBox[{"#", "=!=", "0"}]}], ")"}], "&"}], ",", 
                    RowBox[{"bft1nums", "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"bft1nums", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "\[NotEqual]", "0"}], "&"}], ")"}]}], ",", 
                    "1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], "]"}]}], "=!=",
                     "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification numbers! After initial zeroes, there should be a nonzero \
number\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"substratposscatter", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "configuration", "}"}], ",", 
                  RowBox[{"Position", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"configuration", ",", "#"}], "]"}], "&"}], ",", 
                    "scatteringstratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"nodeorder", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "configuration", "}"}], ",", 
                  RowBox[{"getOrderingExternalNodesGrassmannian", "[", 
                   RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", "d"}], 
                   "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"substratposbft2", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "configuration", "}"}], ",", 
                  RowBox[{"Block", "[", 
                   RowBox[{
                    RowBox[{"{", "outtputt", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"planarityQ", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", "d"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"outtputt", "=", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"configuration", ",", "#"}], "]"}], "&"}], ",", 
                    "bft2stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                    ";"}], ",", 
                    RowBox[{
                    RowBox[{"outtputt", "=", 
                    RowBox[{"{", "I", "}"}]}], ";"}]}], "]"}], ";", 
                    "outtputt"}]}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"substratposbft1", "=", 
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "configuration", "}"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"configuration", ",", "#"}], "]"}], "&"}], ",", 
                    "bft1stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"scattersubstrats", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"substratposscatter", "[", "#", "]"}], "&"}], ",", 
                  "scatteringstratification", ",", 
                  RowBox[{"{", "3", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Equal", "@@", "#"}], "&"}], ",", 
                    "scattersubstrats", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], "=!=", 
                  "True"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification! Move-equivalent boundaries should have the same subboundaries \
at all levels\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"For", " ", 
                 SubscriptBox["BFT", "2"], " ", "we", " ", "can", " ", "only",
                  " ", "attempt", " ", "to", " ", "identify", " ", 
                 "according", " ", "to", " ", "the", " ", "moduli", " ", 
                 "space", " ", "if", " ", "their", " ", "external", " ", 
                 "nodes", " ", "can", " ", "be", " ", "placed", " ", "in", 
                 " ", "the", " ", "same", " ", 
                 RowBox[{"order", ".", " ", "CONSIDER"}], " ", "REMOVING", 
                 " ", "THIS", " ", 
                 RowBox[{"TEST", "!"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Equal", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"substratposbft2", "[", "#", "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"#", ",", "nodeorder"}], "]"}], "&"}], ",", 
                    "bft2stratification", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], "]"}]}], ")"}], "=!=", 
                  "True"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification! Move-equivalent boundaries should have the same subboundaries \
at all levels\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"planarity", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "configuration", "}"}], ",", 
                  RowBox[{"planarityQ", "[", 
                   RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "configuration"}], "]"}]}], "]"}]}], ",", "d"}], 
                   "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"kjk", "+", "1"}]], 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "kjk"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"kjk", ",", 
                    RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], 
                    "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"GatherBy", "[", 
                    RowBox[{
                    RowBox[{"substratposscatter", "[", "#", "]"}], ",", 
                    "First"}], "]"}], "&"}], ",", "scatteringstratification", 
                    ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"planarity", "[", "#", "]"}], "&"}], ",", 
                    "scatteringstratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], "]"}], ",", "True"}], 
                    "]"}], "]"}], "]"}], "]"}], ",", 
                   RowBox[{"zz_", "/;", 
                    RowBox[{"zz", "=!=", "1"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with planarity! Some elements \
in the stratification are declared to be planar but do not have an Eulerian \
substratification!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"spuriousedgestozero", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                  RowBox[{"consistentEdgeRemoval", "[", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "}"}], "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "/.", 
                 "spuriousedgestozero"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"perfs", "\[NotEqual]", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "}"}], "===", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"toZero", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "listofedges", "}"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    "listofedges"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ilev", "=", "0"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"shouldbelevel", "[", "ilev", "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"scatteringstratification", ",", 
                    RowBox[{"Except", "[", 
                    RowBox[{"{", "}"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"levelshift", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"scatteringstratification", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&"}], ")"}]}], ",", "1", ",", 
                    "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"ilev", "=", "1"}], ",", 
                    RowBox[{"ilev", "\[LessEqual]", 
                    RowBox[{"dimP", "-", "levelshift"}]}], ",", 
                    RowBox[{"ilev", "++"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"shouldbelevel", "[", "ilev", "]"}], "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"list1", ",", "list2"}], "}"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"#", ",", "list2"}], "]"}], "]"}], "&"}], ",", 
                    "list1"}], "]"}]}]}], "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"removableEdges", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", 
                    RowBox[{"toZero", "[", "#", "]"}]}], ",", 
                    RowBox[{"b", "/.", 
                    RowBox[{"toZero", "[", "#", "]"}]}], ",", 
                    RowBox[{"c", "/.", 
                    RowBox[{"toZero", "[", "#", "]"}]}], ",", "d", ",", 
                    "True", ",", "False", ",", "2"}], "]"}], "&"}], ",", 
                    RowBox[{"shouldbelevel", "[", 
                    RowBox[{"ilev", "-", "1"}], "]"}]}], "]"}], ",", 
                    RowBox[{"shouldbelevel", "[", 
                    RowBox[{"ilev", "-", "1"}], "]"}]}], "}"}]}], "]"}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"shouldbestratification", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}],
                     ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"shouldbelevel", "[", "jjj", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", "0", ",", 
                    RowBox[{"dimP", "-", "levelshift"}]}], "}"}]}], "]"}], 
                    ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"checkStrats", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "levelnumtocheck", "}"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                    RowBox[{"scatteringstratification", "[", 
                    RowBox[{"[", 
                    RowBox[{"levelnumtocheck", "+", "levelshift"}], "]"}], 
                    "]"}]}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"shouldbestratification", "[", 
                    RowBox[{"[", "levelnumtocheck", "]"}], "]"}]}], "]"}]}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"shouldbestratification", "[", 
                    RowBox[{"[", "levelnumtocheck", "]"}], "]"}], ",", 
                    RowBox[{"Alternatives", "@@", "#"}]}], "]"}], "&"}], ",", 
                    RowBox[{"scatteringstratification", "[", 
                    RowBox[{"[", 
                    RowBox[{"levelnumtocheck", "+", "levelshift"}], "]"}], 
                    "]"}]}], "]"}]}], ")"}]}], ")"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"checkStrats", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"dimP", "-", "levelshift", "+", "1"}], "]"}]}], 
                    "]"}]}], ")"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification! It doesn't correspond to the stratification obtained by \
removing removable edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
                     ";"}], "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"perfectMatchings", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"alternativescatteringstrat", "=", 
                    RowBox[{"stratificationBoundaries", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"alternativedimP", "=", 
                    RowBox[{"dimensionPolytope", "[", 
                    RowBox[{"matchingPolytope", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"toZero", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "listofedges", "}"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                    "listofedges"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ilev", "=", "0"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"shouldbelevel", "[", "ilev", "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"alternativescatteringstrat", ",", 
                    RowBox[{"Except", "[", 
                    RowBox[{"{", "}"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"levelshift", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"alternativescatteringstrat", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], "&"}], ")"}]}], ",", "1", ",", 
                    "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"ilev", "=", "1"}], ",", 
                    RowBox[{"ilev", "\[LessEqual]", 
                    RowBox[{"alternativedimP", "-", "levelshift"}]}], ",", 
                    RowBox[{"ilev", "++"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"shouldbelevel", "[", "ilev", "]"}], "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"list1", ",", "list2"}], "}"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"#", ",", "list2"}], "]"}], "]"}], "&"}], ",", 
                    "list1"}], "]"}]}]}], "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"removableEdges", "[", 
                    RowBox[{
                    RowBox[{"newa", "/.", 
                    RowBox[{"toZero", "[", "#", "]"}]}], ",", 
                    RowBox[{"newb", "/.", 
                    RowBox[{"toZero", "[", "#", "]"}]}], ",", 
                    RowBox[{"newc", "/.", 
                    RowBox[{"toZero", "[", "#", "]"}]}], ",", "newd", ",", 
                    "True", ",", "False", ",", "2"}], "]"}], "&"}], ",", 
                    RowBox[{"shouldbelevel", "[", 
                    RowBox[{"ilev", "-", "1"}], "]"}]}], "]"}], ",", 
                    RowBox[{"shouldbelevel", "[", 
                    RowBox[{"ilev", "-", "1"}], "]"}]}], "}"}]}], "]"}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"shouldbestratification", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"shouldbelevel", "[", "jjj", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", "0", ",", 
                    RowBox[{"alternativedimP", "-", "levelshift"}]}], "}"}]}],
                     "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"checkStrats", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "levelnumtocheck", "}"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#"}], "&"}], ",", 
                    RowBox[{"alternativescatteringstrat", "[", 
                    RowBox[{"[", 
                    RowBox[{"levelnumtocheck", "+", "levelshift"}], "]"}], 
                    "]"}]}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"shouldbestratification", "[", 
                    RowBox[{"[", "levelnumtocheck", "]"}], "]"}]}], "]"}]}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"shouldbestratification", "[", 
                    RowBox[{"[", "levelnumtocheck", "]"}], "]"}], ",", 
                    RowBox[{"Alternatives", "@@", "#"}]}], "]"}], "&"}], ",", 
                    RowBox[{"alternativescatteringstrat", "[", 
                    RowBox[{"[", 
                    RowBox[{"levelnumtocheck", "+", "levelshift"}], "]"}], 
                    "]"}]}], "]"}]}], ")"}]}], ")"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"checkStrats", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"alternativedimP", "-", "levelshift", "+", "1"}], 
                    "]"}]}], "]"}]}], ")"}], "=!=", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification! It doesn't correspond to the stratification obtained by \
removing removable edges\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
                     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                   "}"}], "===", 
                  RowBox[{"{", 
                   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"scatteringstratgraph", "=", 
                   RowBox[{"stratificationGraph", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"bft2stratgraph", "=", 
                   RowBox[{"stratificationGraph", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "False", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"bft1stratgraph", "=", 
                    RowBox[{"stratificationGraph", "[", 
                    RowBox[{
                    "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                    "True", ",", "1"}], "]"}]}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"perfs", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scatteringadjmat", "=", 
                    RowBox[{"Normal", "[", 
                    RowBox[{
                    "AdjacencyMatrix", "[", "scatteringstratgraph", "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"howmanydaughtersscattering", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", "1"}], ",", 
                    "_"}], "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "@@", "#"}], "&"}], ",", 
                    "scattersubstrats", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"scatteringadjmat", "\[NotEqual]", 
                    RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{
                    "Flatten", "[", "howmanydaughtersscattering", "]"}], "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", "scatteringadjmat"}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification graph! The numbers of daughters of elements in the \
stratification doesn't match those using SubsetQ\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"fullsubstratposbft2", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "configuration", "}"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"configuration", ",", "#"}], "]"}], "&"}], ",", 
                    "bft2stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"fullbft2substrats", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fullsubstratposbft2", "[", "#", "]"}], "&"}], 
                    ",", "bft2stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"howmanydaughtersbft2", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", "1"}], ",", 
                    "_"}], "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "@@", "#"}], "&"}], ",", 
                    "fullbft2substrats", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bft2adjmat", "=", 
                    RowBox[{"Normal", "[", 
                    RowBox[{"AdjacencyMatrix", "[", "bft2stratgraph", "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bft2adjmat", "\[NotEqual]", 
                    RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "howmanydaughtersbft2", "]"}], "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", "bft2adjmat"}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification graph! The numbers of daughters of elements in the \
stratification doesn't match those using SubsetQ\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"bft1substrats", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"substratposbft1", "[", "#", "]"}], "&"}], ",", 
                    "bft1stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"howmanydaughtersbft1", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", "1"}], ",", 
                    "_"}], "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "@@", "#"}], "&"}], ",", "bft1substrats",
                     ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bft1adjmat", "=", 
                    RowBox[{"Normal", "[", 
                    RowBox[{"AdjacencyMatrix", "[", "bft1stratgraph", "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bft1adjmat", "\[NotEqual]", 
                    RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "howmanydaughtersbft1", "]"}], "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", "bft1adjmat"}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    
                    "\"\< : There's a problem with the gauging 1 \
stratification graph! The numbers of daughters of elements in the \
stratification doesn't match those using SubsetQ\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"parentposscatter", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "configuration", "}"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"#", ",", "configuration"}], "]"}], "&"}], ",", 
                    "scatteringstratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"scatterparents", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"parentposscatter", "[", "#", "]"}], "&"}], ",", 
                    "scatteringstratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"howmanyparentsscattering", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", "_"}], 
                    "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "@@", "#"}], "&"}], ",", 
                    "scatterparents", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"scatteringadjmat", "\[NotEqual]", 
                    RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "howmanyparentsscattering", "]"}],
                     "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", 
                    RowBox[{"Transpose", "[", "scatteringadjmat", "]"}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the scattering \
stratification graph! The numbers of parents of elements in the \
stratification doesn't match those using SubsetQ\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"parentposbft2", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "configuration", "}"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"#", ",", "configuration"}], "]"}], "&"}], ",", 
                    "bft2stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bft2parents", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"parentposbft2", "[", "#", "]"}], "&"}], ",", 
                    "bft2stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"howmanyparentsbft2", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", "_"}], 
                    "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "@@", "#"}], "&"}], ",", "bft2parents", 
                    ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bft2adjmat", "\[NotEqual]", 
                    RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "howmanyparentsbft2", "]"}], "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", 
                    RowBox[{"Transpose", "[", "bft2adjmat", "]"}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification graph! The numbers of parents of elements in the \
stratification doesn't match those using SubsetQ\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"parentposbft1", "=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "configuration", "}"}], ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"#", ",", "configuration"}], "]"}], "&"}], ",", 
                    "bft1stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bft1parents", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"parentposbft1", "[", "#", "]"}], "&"}], ",", 
                    "bft1stratification", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"howmanyparentsbft1", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", "_"}], 
                    "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "@@", "#"}], "&"}], ",", "bft1parents", 
                    ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bft1adjmat", "\[NotEqual]", 
                    RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "howmanyparentsbft1", "]"}], "=!=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", 
                    RowBox[{"Transpose", "[", "bft1adjmat", "]"}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the gauging 2 \
stratification graph! The numbers of parents of elements in the \
stratification doesn't match those using SubsetQ\>\""}], "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestStratification", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ParallelMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"allTestStratification", "[", 
       RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
     RowBox[{"Cases", "[", 
      RowBox[{"annoyingsmallexamples", ",", 
       RowBox[{"zz_", "/;", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
         RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestStratification", "[", 
        RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"allbft1kasteleyns", ",", 
        RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestStratification", "[", 
        RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"allbft2kasteleyns", ",", 
        RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
    ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"todoscatteringkasts", "=", 
     RowBox[{"allscatteringkasteleyns", "[", 
      RowBox[{"[", 
       RowBox[{"Range", "[", 
        RowBox[{"1", ",", 
         RowBox[{"Round", "[", 
          RowBox[{"0.05", 
           RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}],
         "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestStratification", "[", 
        RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"todoscatteringkasts", ",", 
        RowBox[{"Length", "[", "todoscatteringkasts", "]"}]}], "]"}]}], "]"}],
     ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestStratification", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6852768084237957`*^9, 
   3.685276811974022*^9}, {3.685277256485749*^9, 3.6852773078866205`*^9}, {
   3.6852773515549016`*^9, 3.6852775882426815`*^9}, {3.6852776467304573`*^9, 
   3.6852776767478466`*^9}, {3.68527773738489*^9, 3.685277738342886*^9}, 
   3.685277775107335*^9, {3.6852778103426294`*^9, 3.6852778816601562`*^9}, {
   3.6852779392716503`*^9, 3.6852780026701145`*^9}, {3.685278036022973*^9, 
   3.6852780388599353`*^9}, {3.6852780790231905`*^9, 3.685278218268424*^9}, {
   3.685278249654645*^9, 3.685278335055872*^9}, {3.6852783759835763`*^9, 
   3.6852785140775623`*^9}, {3.6852785503770084`*^9, 3.68527859121406*^9}, {
   3.68527862627855*^9, 3.685278631000987*^9}, {3.685278667817532*^9, 
   3.685278747599384*^9}, {3.6852787830310307`*^9, 3.685278799274227*^9}, {
   3.6852796058691597`*^9, 3.6852796085658507`*^9}, {3.6852797131174593`*^9, 
   3.685279753506839*^9}, {3.6852802376720476`*^9, 3.6852802411274776`*^9}, {
   3.6852805265100837`*^9, 3.685280545727108*^9}, {3.6852805922142487`*^9, 
   3.685280815111873*^9}, {3.6852808651890354`*^9, 3.6852809028935375`*^9}, {
   3.685280937222394*^9, 3.6852810469852867`*^9}, {3.685281170875184*^9, 
   3.6852811711024356`*^9}, {3.685281661504255*^9, 3.6852816624261665`*^9}, {
   3.6853399191786623`*^9, 3.6853399740871763`*^9}, {3.685340006322914*^9, 
   3.6853400212507944`*^9}, {3.6853400537399054`*^9, 
   3.6853401117128563`*^9}, {3.6853403075659437`*^9, 3.685340386865516*^9}, {
   3.6853404204769993`*^9, 3.685340544398894*^9}, {3.6853422568008623`*^9, 
   3.685342268891594*^9}, {3.6853423962805896`*^9, 3.685342397093132*^9}, {
   3.68534306056389*^9, 3.68534306850448*^9}, {3.6853444341802998`*^9, 
   3.685344525775797*^9}, {3.685344635726242*^9, 3.6853446523827467`*^9}, {
   3.6853509081259866`*^9, 3.685350921663103*^9}, {3.6853545209742746`*^9, 
   3.685354529259407*^9}, {3.685693608814596*^9, 3.685693611183132*^9}, {
   3.6856936441251955`*^9, 3.6856938626797323`*^9}, {3.6856954765422287`*^9, 
   3.685695496981605*^9}, {3.685706315288959*^9, 3.685706325701495*^9}, {
   3.69565096243064*^9, 3.6956510140419397`*^9}, 3.695651236835065*^9, {
   3.6966599003892937`*^9, 3.696659903278349*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696659909493107*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.685695459516554*^9, 3.685695459637863*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Here", " ", "we", " ", "check", " ", "matchingPolytopeBoundaries", " ", 
   "and", " ", "matchingPolytopeBoundariesGraph"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, {
   3.6853449732371783`*^9, 3.6853449791659794`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinidroptions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestFaceLattice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dimP", ",", "scatteringfacelatt", ",", "bftfacelatt", ",", "allvars", 
       ",", "allthedimensions", ",", "areyouEulerian", ",", 
       "facelattgraphscatter", ",", "facelattgraphbft", ",", "perfs", ",", 
       "scatteringadjmat", ",", "findFaceLattsubstrats", ",", 
       "facelattsubstrats", ",", "howmanydaughters", ",", 
       "findFaceLattparents", ",", "facelattparents", ",", "howmanyparents"}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"First", " ", 
       RowBox[{"we", "'"}], "ll", " ", "put", " ", "in", " ", "some", " ", 
       "checks", " ", "to", " ", "make", " ", "sure", " ", "we", " ", 
       RowBox[{"don", "'"}], "t", " ", "waste", " ", "our", " ", "time", " ", 
       "checking", " ", "exaggeratedly", " ", "complicated", " ", 
       "examples"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dimP", "=", 
       RowBox[{"dimensionPolytope", "[", 
        RowBox[{"matchingPolytope", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dimP", "\[LessEqual]", "9"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"scatteringfacelatt", "=", 
          RowBox[{"matchingPolytopeBoundaries", "[", 
           RowBox[{
           "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"Length", ",", "scatteringfacelatt"}], "]"}], "]"}], 
            "\[LessEqual]", "10000"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "The", " ", "example", " ", "is", " ", "not", " ", "exaggerated", 
             " ", "and", " ", "is", " ", "hence", " ", "worth", " ", 
             "testing"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"bftfacelatt", "=", 
                RowBox[{"matchingPolytopeBoundaries", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                  "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"scatteringfacelatt", "=!=", "bftfacelatt"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the face lattice! It's not \
identical for BFT and scattering!\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"allvars", "=", 
             RowBox[{"Variables", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"allthedimensions", "=", 
             RowBox[{"Map", "[", 
              RowBox[{"DeleteDuplicates", ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"dimensionPolytope", "[", 
                   RowBox[{"matchingPolytope", "[", 
                    RowBox[{
                    RowBox[{"a", "/.", "#"}], ",", 
                    RowBox[{"b", "/.", "#"}], ",", 
                    RowBox[{"c", "/.", "#"}], ",", "d"}], "]"}], "]"}], "&"}],
                  ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "\[Rule]", "0"}], "&"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{"allvars", ",", "#"}], "]"}], "&"}], ",", 
                    "scatteringfacelatt", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                   RowBox[{"{", "3", "}"}]}], "]"}], ",", 
                 RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"allthedimensions", "=!=", 
               RowBox[{"Reverse", "[", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"{", "iii", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"iii", ",", "0", ",", "dimP"}], "}"}]}], "]"}], 
                "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the face lattice! The \
dimensions of all the boundaries are not all correct!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"areyouEulerian", "=", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "configuration", "}"}], ",", 
               RowBox[{"Block", "[", 
                RowBox[{
                 RowBox[{"{", "thestratnums", "}"}], ",", 
                 RowBox[{
                  RowBox[{"thestratnums", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"configuration", ",", "#"}], "]"}], "&"}], ",", 
                    "scatteringfacelatt", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}], 
                    ",", "First"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"kji", "+", "1"}]], 
                    RowBox[{"thestratnums", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "kji"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"kji", ",", 
                    RowBox[{"Length", "[", "thestratnums", "]"}]}], "}"}]}], 
                    "]"}], "===", "1"}], ")"}]}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"And", "@@", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{"areyouEulerian", ",", "scatteringfacelatt", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], "=!=", 
               "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                 "\"\< : There's a problem with the face lattice! There are \
elements in the stratification which do not have an Eulerian \
substratification\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"facelattgraphscatter", "=", 
             RowBox[{"matchingPolytopeBoundariesGraph", "[", 
              RowBox[{
              "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", "False"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"facelattgraphbft", "=", 
                RowBox[{"matchingPolytopeBoundariesGraph", "[", 
                 RowBox[{
                 "a", ",", "b", ",", "c", ",", "d", ",", "True", ",", 
                  "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"facelattgraphscatter", "=!=", "facelattgraphbft"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the face lattice graphs! \
They are not identical for BFT and scattering!\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"perfs", "=", 
             RowBox[{"perfectMatchings", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"perfs", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"scatteringadjmat", "=", 
                RowBox[{"Normal", "[", 
                 RowBox[{
                 "AdjacencyMatrix", "[", "facelattgraphscatter", "]"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"findFaceLattsubstrats", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "configuration", "}"}], ",", 
                  RowBox[{"Position", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"configuration", ",", "#"}], "]"}], "&"}], ",", 
                    "scatteringfacelatt", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"facelattsubstrats", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                 "findFaceLattsubstrats", ",", "scatteringfacelatt", ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"howmanydaughters", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", "1"}], ",", 
                    "_"}], "}"}]}], "]"}], "]"}], "&"}], ",", 
                  "facelattsubstrats", ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"scatteringadjmat", "\[NotEqual]", 
                   RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                  RowBox[{
                   RowBox[{"Flatten", "[", "howmanydaughters", "]"}], "=!=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", "scatteringadjmat"}], "]"}]}]}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the face lattice graph! \
The numbers of daughters of elements in the stratification doesn't match \
those using SubsetQ\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"findFaceLattparents", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "configuration", "}"}], ",", 
                  RowBox[{"Position", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{"#", ",", "configuration"}], "]"}], "&"}], ",", 
                    "scatteringfacelatt", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", "True"}], "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"facelattparents", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                 "findFaceLattparents", ",", "scatteringfacelatt", ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"howmanyparents", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", "_"}], 
                    "}"}]}], "]"}], "]"}], "&"}], ",", "facelattparents", ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"scatteringadjmat", "\[NotEqual]", 
                   RowBox[{"{", 
                    RowBox[{"{", "0", "}"}], "}"}]}], "&&", 
                  RowBox[{
                   RowBox[{"Flatten", "[", "howmanyparents", "]"}], "=!=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", 
                    RowBox[{"Transpose", "[", "scatteringadjmat", "]"}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
                    "\"\< : There's a problem with the face lattice graph! \
The numbers of parents of elements in the stratification doesn't match those \
using SubsetQ\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestFaceLattice", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestFaceLattice", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestFaceLattice", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestFaceLattice", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestFaceLattice", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6853492623391547`*^9, 
   3.6853492880251923`*^9}, {3.685349321089615*^9, 3.685349381503099*^9}, {
   3.6853505173190217`*^9, 3.6853505598759794`*^9}, {3.685350669542302*^9, 
   3.6853507727029824`*^9}, {3.6853508043591204`*^9, 3.685350855036784*^9}, {
   3.685350928546058*^9, 3.685350939226573*^9}, {3.685351046551201*^9, 
   3.685351053992298*^9}, {3.6853510861818886`*^9, 3.6853512463862343`*^9}, {
   3.6853513462025537`*^9, 3.6853513494972773`*^9}, {3.685351426603078*^9, 
   3.6853515178042297`*^9}, {3.6853517122516117`*^9, 
   3.6853517258495812`*^9}, {3.6853544921662345`*^9, 
   3.6853544961699495`*^9}, {3.685354547885049*^9, 3.6853545576867027`*^9}, 
   3.6856845109227753`*^9, {3.685685437152491*^9, 3.685685437344273*^9}, {
   3.693411747896673*^9, 3.6934117482824383`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6960550411392384`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinkObject", "::", "linkd"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Unable to communicate with closed link \
\[NoBreak]\\!\\(\\*RowBox[{\\\"LinkObject\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"/usr/local/Wolfram/Mathematica/10.3/\
Executables/wolfram\\\\\\\\\\\\\\\" -subkernel -noinit -wstp\\\\\\\"\\\", \
\\\",\\\", \\\"131\\\", \\\",\\\", \\\"7\\\"}], \\\"]\\\"}]\\)\[NoBreak]. \\!\
\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinkObject/linkd\\\", \
ButtonNote -> \\\"LinkObject::linkd\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.69610983480239*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Kernels", "::", "rdead"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Subkernel connected through \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \\\"[\\\", \
RowBox[{\\\"4\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\"}], \\\"]\\\"}]\\)\
\[NoBreak] appears dead. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Kernels\\\", ButtonNote -> \\\"Kernels::rdead\\\"]\
\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696109836632491*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Parallel`Developer`QueueRun", "::", "req"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Requeueing evaluations \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"5\\\", \\\"}\\\"}]\\)\[NoBreak] \
assigned to \[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \
\\\"[\\\", RowBox[{\\\"4\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\", \\\",\
\\\", \\\"\\\\\\\"<defunct>\\\\\\\"\\\"}], \\\"]\\\"}]\\)\[NoBreak].\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.696109836762991*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LaunchKernels", "::", "clone"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Kernel \[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\
\\\\\\\"\\\", \\\"[\\\", RowBox[{\\\"4\\\", \\\",\\\", \
\\\"\\\\\\\"local\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"<defunct>\\\\\\\"\\\"}], \\\"]\\\"}]\\)\[NoBreak] resurrected as \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \\\"[\\\", \
RowBox[{\\\"9\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\"}], \\\"]\\\"}]\\)\
\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/LaunchKernels\\\", ButtonNote -> \
\\\"LaunchKernels::clone\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6961098537188883`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinkObject", "::", "linkd"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Unable to communicate with closed link \
\[NoBreak]\\!\\(\\*RowBox[{\\\"LinkObject\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"/usr/local/Wolfram/Mathematica/10.3/\
Executables/wolfram\\\\\\\\\\\\\\\" -subkernel -noinit -wstp\\\\\\\"\\\", \
\\\",\\\", \\\"134\\\", \\\",\\\", \\\"10\\\"}], \\\"]\\\"}]\\)\[NoBreak]. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinkObject/linkd\\\", \
ButtonNote -> \\\"LinkObject::linkd\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696116104222048*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Kernels", "::", "rdead"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Subkernel connected through \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \\\"[\\\", \
RowBox[{\\\"7\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\"}], \\\"]\\\"}]\\)\
\[NoBreak] appears dead. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Kernels\\\", ButtonNote -> \\\"Kernels::rdead\\\"]\
\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6961161080578117`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Parallel`Developer`QueueRun", "::", "req"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Requeueing evaluations \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"2\\\", \\\"}\\\"}]\\)\[NoBreak] \
assigned to \[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \
\\\"[\\\", RowBox[{\\\"7\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\", \\\",\
\\\", \\\"\\\\\\\"<defunct>\\\\\\\"\\\"}], \\\"]\\\"}]\\)\[NoBreak].\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.69611610919587*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LaunchKernels", "::", "clone"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Kernel \[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\
\\\\\\\"\\\", \\\"[\\\", RowBox[{\\\"7\\\", \\\",\\\", \
\\\"\\\\\\\"local\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"<defunct>\\\\\\\"\\\"}], \\\"]\\\"}]\\)\[NoBreak] resurrected as \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \\\"[\\\", \
RowBox[{\\\"10\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\"}], \
\\\"]\\\"}]\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/LaunchKernels\\\", ButtonNote -> \
\\\"LaunchKernels::clone\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696116173253235*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinkObject", "::", "linkd"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Unable to communicate with closed link \
\[NoBreak]\\!\\(\\*RowBox[{\\\"LinkObject\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"/usr/local/Wolfram/Mathematica/10.3/\
Executables/wolfram\\\\\\\\\\\\\\\" -subkernel -noinit -wstp\\\\\\\"\\\", \
\\\",\\\", \\\"128\\\", \\\",\\\", \\\"4\\\"}], \\\"]\\\"}]\\)\[NoBreak]. \\!\
\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinkObject/linkd\\\", \
ButtonNote -> \\\"LinkObject::linkd\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6961236011902523`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"LinkObject\\\", \\\"::\\\", \\\"linkd\
\\\"}], \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during this \
calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6961236101894417`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Kernels", "::", "rdead"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Subkernel connected through \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \\\"[\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\"}], \\\"]\\\"}]\\)\
\[NoBreak] appears dead. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Kernels\\\", ButtonNote -> \\\"Kernels::rdead\\\"]\
\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696123610357815*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"Kernels\\\", \\\"::\\\", \
\\\"rdead\\\"}], \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during \
this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6961236104043903`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Parallel`Developer`QueueRun", "::", "req"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Requeueing evaluations \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"8\\\", \\\"}\\\"}]\\)\[NoBreak] \
assigned to \[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \
\\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\", \\\",\
\\\", \\\"\\\\\\\"<defunct>\\\\\\\"\\\"}], \\\"]\\\"}]\\)\[NoBreak].\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.696123610417695*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"Parallel`Developer`QueueRun\\\", \
\\\"::\\\", \\\"req\\\"}], \\\"MessageName\\\"]\\)\[NoBreak] will be \
suppressed during this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696123610419417*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LaunchKernels", "::", "clone"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Kernel \[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\
\\\\\\\"\\\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \
\\\"\\\\\\\"local\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"<defunct>\\\\\\\"\\\"}], \\\"]\\\"}]\\)\[NoBreak] resurrected as \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"KernelObject\\\\\\\"\\\", \\\"[\\\", \
RowBox[{\\\"11\\\", \\\",\\\", \\\"\\\\\\\"local\\\\\\\"\\\"}], \
\\\"]\\\"}]\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/LaunchKernels\\\", ButtonNote -> \
\\\"LaunchKernels::clone\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.696123628888706*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"LaunchKernels\\\", \\\"::\\\", \
\\\"clone\\\"}], \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during \
this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.69612362895298*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "collapseBivalentNodes"}], 
   ",", " ", 
   RowBox[{
    RowBox[{"PART1", ".", " ", "This"}], " ", "group", " ", "of", " ", 
    "cells", " ", "contains", " ", "a", " ", "specially", " ", "designed", 
    " ", "test"}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6853523507648044`*^9, {3.685353129108749*^9, 3.6853531756663513`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"collapseWhiteNodesInternalInternalNEW", "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
       "inputbottomright"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "kasteleyn", ",", "reducedkasteleyn", ",", "outputtopleft", ",", 
         "outputtopright", ",", "outputbottomleft", ",", "outputbottomright", 
         ",", "bottomrightrownum", ",", "bottomrightcolnum"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", 
           ",", "outputbottomright"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{
          "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
           "inputbottomright"}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "outputtopleft", "]"}], ">", "0"}], "||", 
           RowBox[{
            RowBox[{"Length", "[", "outputtopright", "]"}], ">", "0"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
           "we", " ", "have", " ", "internal", " ", "white", " ", "nodes", 
            " ", 
            RowBox[{"(", 
             RowBox[{
             "which", " ", "could", " ", "potentially", " ", "be", " ", 
              "bivalent"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"kasteleyn", "=", 
            RowBox[{"joinupKasteleyn", "[", 
             RowBox[{
             "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", 
              ",", "inputbottomright"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"reducedkasteleyn", "=", 
            RowBox[{"(", 
             RowBox[{"kasteleyn", "//.", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"rowsbefore___", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"firstzeros", ":", 
                    RowBox[{"0", "..."}]}], ",", 
                   RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"0", "|", 
                    RowBox[{"somedge1_", "+", "anotheredge1_", "+", "___"}]}],
                     ",", "firstedge_"}], "]"}], ",", 
                   RowBox[{"secondzeros", ":", 
                    RowBox[{"0", "..."}]}], ",", 
                   RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"0", "|", 
                    RowBox[{"somedge2_", "+", "anotheredge2_", "+", "___"}]}],
                     ",", "secondedge_"}], "]"}], ",", 
                   RowBox[{"thirdzeros", ":", 
                    RowBox[{"0", "..."}]}], ",", 
                   RowBox[{"Sequence", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "inputtopright", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}], "}"}], ",", 
                 "rowsafter___"}], "}"}], "\[RuleDelayed]", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "firstzeros", "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "firstzeros", "}"}], "]"}], "+", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"firstzeros", ",", "secondzeros"}], "}"}], "]"}], 
                    "+", "1"}]}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"firstzeros", ",", "secondzeros"}], "}"}], "]"}], 
                    "+", "3"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "firstzeros", ",", "secondzeros", ",", "thirdzeros"}], 
                    "}"}], "]"}], "+", "2"}]}], "]"}]}], "]"}]}], "]"}], 
                  "]"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Total", "[", "#", "]"}], "}"}], "&"}], ",", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "firstzeros", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"firstzeros", ",", "secondzeros"}], "}"}], "]"}], 
                    "+", "2"}]}], "}"}]}], "]"}], "]"}]}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "firstzeros", ",", "secondzeros", ",", "thirdzeros"}], 
                    "}"}], "]"}], "+", "3"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "]"}], 
                  "]"}], ",", "2"}], "]"}]}]}], ")"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"bottomrightrownum", "=", 
            RowBox[{"Length", "[", "inputbottomright", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"bottomrightcolnum", "=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"inputtopright", ",", "inputbottomright"}], "]"}], 
              "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputtopleft", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], "]"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputtopright", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputbottomleft", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], "]"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputbottomright", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}], 
             "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
         "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",",
           "outputbottomright"}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"collapseBlackNodesInternalInternalNEW", "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
       "inputbottomright"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "transposekasteleyn", ",", "reducedkasteleyn", ",", "outputtopleft", 
         ",", "outputtopright", ",", "outputbottomleft", ",", 
         "outputbottomright", ",", "bottomrightrownum", ",", 
         "bottomrightcolnum"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", 
           ",", "outputbottomright"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{
          "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
           "inputbottomright"}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Dimensions", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"inputtopleft", ",", "inputbottomleft"}], "]"}], "]"}], 
            "[", 
            RowBox[{"[", "2", "]"}], "]"}], ">", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"transposekasteleyn", "=", 
            RowBox[{"Transpose", "[", 
             RowBox[{"joinupKasteleyn", "[", 
              RowBox[{
              "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", 
               ",", "inputbottomright"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"reducedkasteleyn", "=", 
            RowBox[{"(", 
             RowBox[{"transposekasteleyn", "//.", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"rowsbefore___", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"firstzeros", ":", 
                    RowBox[{"0", "..."}]}], ",", 
                   RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"0", "|", 
                    RowBox[{"somedge1_", "+", "anotheredge1_", "+", "___"}]}],
                     ",", "firstedge_"}], "]"}], ",", 
                   RowBox[{"secondzeros", ":", 
                    RowBox[{"0", "..."}]}], ",", 
                   RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"0", "|", 
                    RowBox[{"somedge2_", "+", "anotheredge2_", "+", "___"}]}],
                     ",", "secondedge_"}], "]"}], ",", 
                   RowBox[{"thirdzeros", ":", 
                    RowBox[{"0", "..."}]}], ",", 
                   RowBox[{"Sequence", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"Length", "[", "inputbottomleft", "]"}]}], 
                    "]"}]}]}], "}"}], ",", "rowsafter___"}], "}"}], 
               "\[RuleDelayed]", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "firstzeros", "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "firstzeros", "}"}], "]"}], "+", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"firstzeros", ",", "secondzeros"}], "}"}], "]"}], 
                    "+", "1"}]}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"firstzeros", ",", "secondzeros"}], "}"}], "]"}], 
                    "+", "3"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "firstzeros", ",", "secondzeros", ",", "thirdzeros"}], 
                    "}"}], "]"}], "+", "2"}]}], "]"}]}], "]"}]}], "]"}], 
                  "]"}], ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Total", "[", "#", "]"}], "}"}], "&"}], ",", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "firstzeros", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"firstzeros", ",", "secondzeros"}], "}"}], "]"}], 
                    "+", "2"}]}], "}"}]}], "]"}], "]"}]}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "firstzeros", ",", "secondzeros", ",", "thirdzeros"}], 
                    "}"}], "]"}], "+", "3"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rowsbefore", ",", "rowsafter"}], "}"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "]"}], 
                  "]"}], ",", "2"}], "]"}]}]}], ")"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"reducedkasteleyn", "=", 
            RowBox[{"Transpose", "[", "reducedkasteleyn", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"bottomrightrownum", "=", 
            RowBox[{"Length", "[", "inputbottomright", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"bottomrightcolnum", "=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{"Join", "[", 
               RowBox[{"inputtopright", ",", "inputbottomright"}], "]"}], 
              "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputtopleft", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], "]"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputtopright", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputbottomleft", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
               RowBox[{";;", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], "]"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"outputbottomright", "=", 
            RowBox[{"reducedkasteleyn", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}], 
             "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
         "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",",
           "outputbottomright"}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"collapseBlackNodesInternalExternal", "[", 
     RowBox[{
     "inputtopleft_", ",", "inputtopright_", ",", "inputbottomleft_", ",", 
      "inputbottomright_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",", 
        "outputbottomright", ",", "transposekasteleyn", ",", 
        "bivalentblacknodes", ",", "somedge", ",", "anotheredge", ",", 
        "kasteleyn", ",", "todeleterows", ",", "bottomrightrownum", ",", 
        "bottomrightcolnum"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Here", " ", "we", " ", "want", " ", "to", " ", "remove", " ", 
        "bivalent", " ", "nodes", " ", "connected", " ", "to", " ", "an", " ",
         "internal", " ", "node", " ", "and", " ", "an", " ", "external", " ", 
        RowBox[{"node", ".", " ", "The"}], " ", "way", " ", "to", " ", "do", 
        " ", "this", " ", "is", " ", "to", " ", "throw", " ", "away", " ", 
        "the", " ", "external", " ", "node", " ", "and", " ", "turn", " ", 
        "the", " ", "bivalent", " ", "node", " ", "into", " ", "the", " ", 
        "external", " ", "node"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",",
           "outputbottomright"}], "}"}], "=", 
        RowBox[{"{", 
         RowBox[{
         "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
          "inputbottomright"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"inputtopleft", ",", "inputbottomleft"}], "]"}], "]"}], 
           "[", 
           RowBox[{"[", "2", "]"}], "]"}], ">", "0"}], ",", 
         RowBox[{"(*", 
          RowBox[{
          "we", " ", "have", " ", "internal", " ", "black", " ", "nodes", " ", 
           RowBox[{"(", 
            RowBox[{
            "which", " ", "could", " ", "potentially", " ", "be", " ", 
             "bivalent"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"transposekasteleyn", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"joinupKasteleyn", "[", 
             RowBox[{
             "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", 
              ",", "inputbottomright"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"bivalentblacknodes", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"transposekasteleyn", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"0", "..."}], ",", 
                 RowBox[{"Except", "[", 
                  RowBox[{"0", "|", 
                   RowBox[{"somedge_", "+", "anotheredge_", "+", "___"}]}], 
                  "]"}], ",", 
                 RowBox[{"0", "..."}], ",", 
                 RowBox[{"Except", "[", 
                  RowBox[{"0", "|", 
                   RowBox[{"somedge_", "+", "anotheredge_", "+", "___"}]}], 
                  "]"}], ",", 
                 RowBox[{"0", "..."}]}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sequence", "@@", 
                RowBox[{"ConstantArray", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"Length", "[", "inputtopleft", "]"}]}], "]"}]}], 
               ",", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"ConstantArray", "[", 
                 RowBox[{"_", ",", 
                  RowBox[{"Length", "[", "inputbottomleft", "]"}]}], 
                 "]"}]}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{
             "we", " ", "found", " ", "the", " ", "bivalent", " ", "nodes", 
              " ", 
              RowBox[{"we", "'"}], "re", " ", "looking", " ", 
              RowBox[{"for", ".", " ", "We"}], " ", "now", " ", "need", " ", 
              "to", " ", "move", " ", "these", " ", "columns", " ", "into", 
              " ", "the", " ", "top"}], "-", 
             RowBox[{
             "right", " ", "part", " ", "of", " ", "the", " ", 
              "kasteleyn"}]}], ",", " ", 
            RowBox[{
            "and", " ", "remove", " ", "the", " ", "rows", " ", "associated", 
             " ", "to", " ", "the", " ", "external", " ", "nodes", " ", 
             RowBox[{"we", "'"}], "re", " ", "throwing", " ", 
             RowBox[{"away", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"bivalentblacknodes", "=!=", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"kasteleyn", "=", 
              RowBox[{"Transpose", "[", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"transposekasteleyn", ",", 
                   RowBox[{"Except", "[", 
                    RowBox[{"Alternatives", "@@", "bivalentblacknodes"}], 
                    "]"}]}], "]"}], ",", "bivalentblacknodes"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"todeleterows", "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Except", "[", "0", "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "0", ",", "___"}], "}"}]}], "]"}], 
                  "[", 
                  RowBox[{"[", 
                   RowBox[{"-", "1"}], "]"}], "]"}], "&"}], ",", 
                "bivalentblacknodes"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"kasteleyn", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"kasteleyn", ",", "todeleterows"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "now", " ", "we", " ", "have", " ", "the", " ", "kasteleyn"}], 
               ",", " ", 
               RowBox[{
                RowBox[{"let", "'"}], "s", " ", "break", " ", "it", " ", "up",
                 " ", "into", " ", "its", " ", "four", " ", "components"}]}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"bottomrightrownum", "=", 
              RowBox[{
               RowBox[{"Length", "[", "inputbottomright", "]"}], "-", 
               RowBox[{"Length", "[", "todeleterows", "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"bottomrightcolnum", "=", 
              RowBox[{
               RowBox[{
                RowBox[{"Dimensions", "[", 
                 RowBox[{"Join", "[", 
                  RowBox[{"inputtopright", ",", "inputbottomright"}], "]"}], 
                 "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", 
               RowBox[{"Length", "[", "bivalentblacknodes", "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"outputtopleft", "=", 
              RowBox[{"kasteleyn", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{";;", 
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
                 RowBox[{";;", 
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], 
                "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"outputtopright", "=", 
              RowBox[{"kasteleyn", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{";;", 
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}],
                "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"outputbottomleft", "=", 
              RowBox[{"kasteleyn", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
                 RowBox[{";;", 
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], 
                "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"outputbottomright", "=", 
              RowBox[{"kasteleyn", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}],
                "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",", 
         "outputbottomright"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"collapseWhiteNodesInternalExternal", "[", 
    RowBox[{
    "inputtopleft_", ",", "inputtopright_", ",", "inputbottomleft_", ",", 
     "inputbottomright_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",", 
       "outputbottomright", ",", "kasteleyn", ",", "bivalentwhitenodes", ",", 
       "somedge", ",", "anotheredge", ",", "todeletecolumns", ",", 
       "bottomrightrownum", ",", "bottomrightcolnum"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",", 
         "outputbottomright"}], "}"}], "=", 
       RowBox[{"{", 
        RowBox[{
        "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
         "inputbottomright"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "outputtopleft", "]"}], ">", "0"}], "||", 
         RowBox[{
          RowBox[{"Length", "[", "outputtopright", "]"}], ">", "0"}]}], ",", 
        RowBox[{"(*", 
         RowBox[{
         "we", " ", "have", " ", "internal", " ", "white", " ", "nodes", " ", 
          RowBox[{"(", 
           RowBox[{
           "which", " ", "could", " ", "potentially", " ", "be", " ", 
            "bivalent"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"kasteleyn", "=", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{
           "inputtopleft", ",", "inputtopright", ",", "inputbottomleft", ",", 
            "inputbottomright"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bivalentwhitenodes", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{"kasteleyn", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"0", "..."}], ",", 
                RowBox[{"Except", "[", 
                 RowBox[{"0", "|", 
                  RowBox[{"somedge_", "+", "anotheredge_", "+", "___"}]}], 
                 "]"}], ",", 
                RowBox[{"0", "..."}], ",", 
                RowBox[{"Except", "[", 
                 RowBox[{"0", "|", 
                  RowBox[{"somedge_", "+", "anotheredge_", "+", "___"}]}], 
                 "]"}], ",", 
                RowBox[{"0", "..."}]}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sequence", "@@", 
               RowBox[{"ConstantArray", "[", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Dimensions", "[", "inputtopleft", "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"ConstantArray", "[", 
                RowBox[{"_", ",", 
                 RowBox[{
                  RowBox[{"Dimensions", "[", "inputtopright", "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
            "we", " ", "found", " ", "the", " ", "bivalent", " ", "nodes", 
             " ", 
             RowBox[{"we", "'"}], "re", " ", "looking", " ", 
             RowBox[{"for", ".", " ", "We"}], " ", "now", " ", "need", " ", 
             "to", " ", "move", " ", "these", " ", "rows", " ", "into", " ", 
             "the", " ", "bottom"}], "-", 
            RowBox[{
            "left", " ", "part", " ", "of", " ", "the", " ", "kasteleyn"}]}], 
           ",", " ", 
           RowBox[{
           "and", " ", "remove", " ", "the", " ", "columns", " ", 
            "associated", " ", "to", " ", "the", " ", "external", " ", 
            "nodes", " ", 
            RowBox[{"we", "'"}], "re", " ", "throwing", " ", 
            RowBox[{"away", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"bivalentwhitenodes", "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"kasteleyn", "=", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{"kasteleyn", ",", 
                 RowBox[{"Except", "[", 
                  RowBox[{"Alternatives", "@@", "bivalentwhitenodes"}], 
                  "]"}]}], "]"}], ",", "bivalentwhitenodes"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"todeletecolumns", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Except", "[", "0", "]"}], ",", "1"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"___", ",", "0", ",", "___"}], "}"}]}], "]"}], 
                 "[", 
                 RowBox[{"[", 
                  RowBox[{"-", "1"}], "]"}], "]"}], "&"}], ",", 
               "bivalentwhitenodes"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"kasteleyn", "=", 
             RowBox[{"Transpose", "[", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "kasteleyn", "]"}], ",", 
                "todeletecolumns"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
              "now", " ", "we", " ", "have", " ", "the", " ", "kasteleyn"}], 
              ",", " ", 
              RowBox[{
               RowBox[{"let", "'"}], "s", " ", "break", " ", "it", " ", "up", 
               " ", "into", " ", "its", " ", "four", " ", "components"}]}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"bottomrightrownum", "=", 
             RowBox[{
              RowBox[{"Length", "[", "inputbottomright", "]"}], "+", 
              RowBox[{"Length", "[", "bivalentwhitenodes", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"bottomrightcolnum", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"Dimensions", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"inputtopright", ",", "inputbottomright"}], "]"}], 
                "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], "-", 
              RowBox[{"Length", "[", "todeletecolumns", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"outputtopleft", "=", 
             RowBox[{"kasteleyn", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{";;", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
                RowBox[{";;", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"outputtopright", "=", 
             RowBox[{"kasteleyn", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{";;", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"outputbottomleft", "=", 
             RowBox[{"kasteleyn", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
                RowBox[{";;", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"outputbottomright", "=", 
             RowBox[{"kasteleyn", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], "]"}], 
              "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "outputtopleft", ",", "outputtopright", ",", "outputbottomleft", ",", 
        "outputbottomright"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"collapseBivalentNodesNEW", "[", 
    RowBox[{
    "topleft_", ",", "topright_", ",", "bottomleft_", ",", "bottomright_"}], 
    "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "previoustopleft", ",", "previoustopright", ",", "previousbottomleft", 
       ",", "previousbottomright", ",", "newtopleft", ",", "newtopright", ",",
        "newbottomleft", ",", "newbottomright"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Need", " ", "to", " ", "do", " ", "the", " ", "replacements", " ", 
       "on", " ", "repeat", " ", "until", " ", "the", " ", "Kasteleyn", " ", 
       "stops", " ", 
       RowBox[{"changing", ".", " ", 
        RowBox[{"We", "'"}]}], "ll", " ", "start", " ", "by", " ", 
       "collapsing", " ", "bivalnt", " ", "nodes", " ", "that", " ", 
       "connect", " ", "to", " ", "two", " ", "internal", " ", 
       RowBox[{"nodes", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "previoustopleft", ",", "previoustopright", ",", "previousbottomleft",
          ",", "previousbottomright"}], "}"}], "=", 
       RowBox[{"{", 
        RowBox[{
        "topleft", ",", "topright", ",", "bottomleft", ",", "bottomright"}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
         "newbottomright"}], "}"}], "=", 
       RowBox[{"collapseWhiteNodesInternalInternalNEW", "[", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"collapseBlackNodesInternalInternalNEW", "[", 
          RowBox[{
          "previoustopleft", ",", "previoustopright", ",", 
           "previousbottomleft", ",", "previousbottomright"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "previoustopleft", ",", "previoustopright", ",", 
           "previousbottomleft", ",", "previousbottomright"}], "}"}], "=!=", 
         RowBox[{"{", 
          RowBox[{
          "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
           "newbottomright"}], "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "previoustopleft", ",", "previoustopright", ",", 
            "previousbottomleft", ",", "previousbottomright"}], "}"}], "=", 
          RowBox[{"{", 
           RowBox[{
           "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
            "newbottomright"}], "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
            "newbottomright"}], "}"}], "=", 
          RowBox[{"collapseWhiteNodesInternalInternalNEW", "[", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"collapseBlackNodesInternalInternalNEW", "[", 
             RowBox[{
             "previoustopleft", ",", "previoustopright", ",", 
              "previousbottomleft", ",", "previousbottomright"}], "]"}]}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
         "newbottomright"}], "}"}], "=", 
       RowBox[{"collapseWhiteNodesInternalExternal", "[", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"collapseBlackNodesInternalExternal", "[", 
          RowBox[{
          "previoustopleft", ",", "previoustopright", ",", 
           "previousbottomleft", ",", "previousbottomright"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "previoustopleft", ",", "previoustopright", ",", 
           "previousbottomleft", ",", "previousbottomright"}], "}"}], "=!=", 
         RowBox[{"{", 
          RowBox[{
          "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
           "newbottomright"}], "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "previoustopleft", ",", "previoustopright", ",", 
            "previousbottomleft", ",", "previousbottomright"}], "}"}], "=", 
          RowBox[{"{", 
           RowBox[{
           "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
            "newbottomright"}], "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
            "newbottomright"}], "}"}], "=", 
          RowBox[{"collapseWhiteNodesInternalExternal", "[", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"collapseBlackNodesInternalExternal", "[", 
             RowBox[{
             "previoustopleft", ",", "previoustopright", ",", 
              "previousbottomleft", ",", "previousbottomright"}], "]"}]}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "newtopleft", ",", "newtopright", ",", "newbottomleft", ",", 
        "newbottomright"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{"SparseArray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "33"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "24"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "7"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "28"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"7", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "19"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "28"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "19"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"1", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "20"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "2"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "21"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"2", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "23"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"7", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "25"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "28"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "7"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "27"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"6", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "34"}], "}"}], "\[Rule]", 
          RowBox[{
           RowBox[{"X", "[", 
            RowBox[{"9", ",", "8"}], "]"}], "+", 
           RowBox[{"X", "[", 
            RowBox[{"8", ",", "6"}], "]"}]}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "20"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"6", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "25"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "26"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "27"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"9", ",", "6"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "29"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"9", ",", "4"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"4", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "32"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "6"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "34"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"6", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"8", ",", "29"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"4", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"8", ",", "31"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"9", ",", "4"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "20"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"2", ",", "6"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "21"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "2"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "32"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"6", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"10", ",", "21"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"10", ",", "22"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"11", ",", "22"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "11"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"11", ",", "33"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"11", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"12", ",", "22"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"11", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"12", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "11"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"13", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"Z", "[", 
           RowBox[{"9", ",", "4"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"13", ",", "31"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"4", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"14", ",", "23"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"10", ",", "7"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"14", ",", "24"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"7", ",", "10"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"14", ",", "34"}], "}"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"19", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{"SparseArray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"15", ",", "26"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"9", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"17", ",", "33"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "11"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"18", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"11", ",", "9"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"18", ",", "34"}], "}"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"15", ";;"}], ",", 
      RowBox[{"19", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"d", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=", 
    RowBox[{"collapseBivalentNodes", "[", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"Z", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "3"}], "]"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "9"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}], ",", "0", ",", "0", ",", 
             "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}], ",", "0", ",", "0", ",", "0"}],
             "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "3"}], "]"}], ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"Z", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "9"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: The result after collapsing the nodes doesn't \
give the same result as when I first created the function!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"collapseBivalentNodesNEW", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], "=!=", 
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"{", 
         RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes doesn't yield Kasteleyn-components of the same dimension!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"collapseBivalentNodesNEW", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}]}], "]"}], 
       "]"}], "=!=", 
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"{", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}]}],
         "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a different Kasteleyn!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"IsomorphicGraphQ", "[", 
       RowBox[{
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}], ",", 
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"turnIntoAdjacencyMatrix", "@@", 
            RowBox[{"collapseBivalentNodesNEW", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}]}], "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a graph!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"getKasteleynCheckQ", "[", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getKasteleynCheckQ", "[", 
          RowBox[{
          "newa", ",", "newb", ",", "newc", ",", "newd", ",", "True"}], "]"}],
          "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: Somehow collapsing the nodes hasn't \
preserved the index structure of BFTs!\>\"", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: We have somehow lost some faces when \
collapsing the bivalent nodes!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Variables", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
         "]"}], ",", "2"}], "]"}], "||", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Variables", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"joinupKasteleyn", "[", 
            RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
           "]"}]}], "]"}], ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: There seem to be bivalent nodes that haven't \
been collapsed yet!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"EdgeCycleMatrix", "[", 
         RowBox[{"AdjacencyGraph", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}], 
        "]"}], "]"}], "=!=", 
      RowBox[{"Length", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"EdgeCycleMatrix", "[", 
         RowBox[{"AdjacencyGraph", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
          "]"}], "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: There is a different number of cycles in the \
graph before and after the collapse of bivalent nodes!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
    RowBox[{"Map", "[", 
     RowBox[{"Transpose", ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "c", ",", "b", ",", "d"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=", 
    RowBox[{"collapseBivalentNodes", "[", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}], ",", "0", ",", 
             RowBox[{"Y", "[", 
              RowBox[{"1", ",", "3"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "9"}], "]"}], ",", "0", ",", "0"}], "}"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Y", "[", 
              RowBox[{"1", ",", "3"}], "]"}], ",", "0", ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "9"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: The result after collapsing the nodes doesn't \
give the same result as when I first created the function!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"collapseBivalentNodesNEW", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], "=!=", 
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"{", 
         RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes doesn't yield Kasteleyn-components of the same dimension!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"collapseBivalentNodesNEW", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}]}], "]"}], 
       "]"}], "=!=", 
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"{", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}]}],
         "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a different Kasteleyn!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"IsomorphicGraphQ", "[", 
       RowBox[{
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}], ",", 
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"turnIntoAdjacencyMatrix", "@@", 
            RowBox[{"collapseBivalentNodesNEW", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}]}], "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a graph!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"getKasteleynCheckQ", "[", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getKasteleynCheckQ", "[", 
          RowBox[{
          "newa", ",", "newb", ",", "newc", ",", "newd", ",", "True"}], "]"}],
          "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: Somehow collapsing the nodes hasn't \
preserved the index structure of BFTs!\>\"", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: We have somehow lost some faces when \
collapsing the bivalent nodes!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Variables", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
         "]"}], ",", "2"}], "]"}], "||", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Variables", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"joinupKasteleyn", "[", 
            RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
           "]"}]}], "]"}], ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: There seem to be bivalent nodes that haven't \
been collapsed yet!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"EdgeCycleMatrix", "[", 
         RowBox[{"AdjacencyGraph", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}], 
        "]"}], "]"}], "=!=", 
      RowBox[{"Length", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"EdgeCycleMatrix", "[", 
         RowBox[{"AdjacencyGraph", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
          "]"}], "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: There is a different number of cycles in the \
graph before and after the collapse of bivalent nodes!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{"SparseArray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "33"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "24"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "7"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "28"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"7", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "19"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "28"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "19"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"1", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "20"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "2"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "21"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"2", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "23"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"7", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "25"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "28"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "7"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "27"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"6", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "34"}], "}"}], "\[Rule]", 
          RowBox[{
           RowBox[{"X", "[", 
            RowBox[{"9", ",", "8"}], "]"}], "+", 
           RowBox[{"X", "[", 
            RowBox[{"8", ",", "6"}], "]"}]}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "20"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"6", ",", "3"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "25"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"3", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "26"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"6", ",", "27"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"9", ",", "6"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "29"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"9", ",", "4"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"4", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "32"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "6"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"7", ",", "34"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"6", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"8", ",", "29"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"4", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"8", ",", "31"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"9", ",", "4"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "20"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"2", ",", "6"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "21"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "2"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "32"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"6", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"10", ",", "21"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"10", ",", "22"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"11", ",", "22"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"1", ",", "11"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"11", ",", "33"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"11", ",", "1"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"12", ",", "22"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"11", ",", "5"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"12", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"5", ",", "11"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"13", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"Z", "[", 
           RowBox[{"9", ",", "4"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"13", ",", "31"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"4", ",", "9"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"14", ",", "23"}], "}"}], "\[Rule]", 
          RowBox[{"Y", "[", 
           RowBox[{"10", ",", "7"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"14", ",", "24"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"7", ",", "10"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"14", ",", "34"}], "}"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"19", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "0"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{"SparseArray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"15", ",", "26"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"9", ",", "10"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"17", ",", "33"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"10", ",", "11"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"18", ",", "30"}], "}"}], "\[Rule]", 
          RowBox[{"X", "[", 
           RowBox[{"11", ",", "9"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"18", ",", "34"}], "}"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"15", ";;"}], ",", 
      RowBox[{"19", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"d", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "0"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=", 
    RowBox[{"collapseBivalentNodes", "[", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"Z", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "3"}], "]"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"X", "[", 
             RowBox[{"10", ",", "9"}], "]"}], "}"}], ",", 
           RowBox[{"{", "0", "}"}], ",", 
           RowBox[{"{", "0", "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}], ",", "0", ",", "0", ",", 
             "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}], ",", "0", ",", "0", ",", "0"}],
             "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "0", "}"}], ",", 
           RowBox[{"{", "0", "}"}], ",", 
           RowBox[{"{", "0", "}"}]}], "}"}]}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "3"}], "]"}], ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"Z", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "0", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"X", "[", 
             RowBox[{"10", ",", "9"}], "]"}], "}"}], ",", 
           RowBox[{"{", "0", "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "0", "}"}], ",", 
           RowBox[{"{", "0", "}"}], ",", 
           RowBox[{"{", "0", "}"}]}], "}"}]}], "}"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: The result after collapsing the nodes doesn't \
give the same result as when I first created the function!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"collapseBivalentNodesNEW", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], "=!=", 
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"{", 
         RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes doesn't yield Kasteleyn-components of the same dimension!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"collapseBivalentNodesNEW", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}]}], "]"}], 
       "]"}], "=!=", 
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"{", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}]}],
         "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a different Kasteleyn!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"IsomorphicGraphQ", "[", 
       RowBox[{
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}], ",", 
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"turnIntoAdjacencyMatrix", "@@", 
            RowBox[{"collapseBivalentNodesNEW", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}]}], "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a graph!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"getKasteleynCheckQ", "[", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getKasteleynCheckQ", "[", 
          RowBox[{
          "newa", ",", "newb", ",", "newc", ",", "newd", ",", "True"}], "]"}],
          "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: Somehow collapsing the nodes hasn't \
preserved the index structure of BFTs!\>\"", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: We have somehow lost some faces when \
collapsing the bivalent nodes!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"EdgeCycleMatrix", "[", 
         RowBox[{"AdjacencyGraph", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}], 
        "]"}], "]"}], "=!=", 
      RowBox[{"Length", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"EdgeCycleMatrix", "[", 
         RowBox[{"AdjacencyGraph", "[", 
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
          "]"}], "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: There is a different number of cycles in the \
graph before and after the collapse of bivalent nodes!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "=", 
   RowBox[{"Map", "[", 
    RowBox[{"Transpose", ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "c", ",", "b", ",", "d"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=", 
    RowBox[{"collapseBivalentNodes", "[", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}], ",", "0", ",", 
             RowBox[{"Y", "[", 
              RowBox[{"1", ",", "3"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"X", "[", 
             RowBox[{"10", ",", "9"}], "]"}], ",", "0", ",", "0"}], "}"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], "}"}]}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=!=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"3", ",", "2"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "6"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "3"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"6", ",", "9"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"8", ",", "6"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "8"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Y", "[", 
              RowBox[{"1", ",", "3"}], "]"}], ",", "0", ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"3", ",", "7"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"7", ",", "1"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"4", ",", "5"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"5", ",", "2"}], "]"}], "+", 
              RowBox[{"X", "[", 
               RowBox[{"9", ",", "4"}], "]"}]}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"1", ",", "10"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"X", "[", 
              RowBox[{"10", ",", "11"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"11", ",", "9"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", 
            RowBox[{"X", "[", 
             RowBox[{"10", ",", "9"}], "]"}]}], "}"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], "}"}]}], "}"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: The result after collapsing the nodes doesn't \
give the same result as when I first created the function!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"collapseBivalentNodesNEW", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], "]"}], "=!=", 
      RowBox[{"Map", "[", 
       RowBox[{"Dimensions", ",", 
        RowBox[{"{", 
         RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes doesn't yield Kasteleyn-components of the same dimension!\>\"", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"collapseBivalentNodesNEW", "[", 
           RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}]}], "]"}], 
       "]"}], "=!=", 
      RowBox[{"Sort", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Sort", ",", 
         RowBox[{"joinupKasteleyn", "@@", 
          RowBox[{"{", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}]}]}],
         "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a different Kasteleyn!\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"IsomorphicGraphQ", "[", 
       RowBox[{
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"turnIntoAdjacencyMatrix", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}], ",", 
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"turnIntoAdjacencyMatrix", "@@", 
            RowBox[{"collapseBivalentNodesNEW", "[", 
             RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], "}"}]}], 
         "]"}]}], "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Starting example: my alternative function for collapsing bivalent \
nodes gives a graph!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"getKasteleynCheckQ", "[", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "True"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getKasteleynCheckQ", "[", 
          RowBox[{
          "newa", ",", "newb", ",", "newc", ",", "newd", ",", "True"}], "]"}],
          "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: Somehow collapsing the nodes hasn't \
preserved the index structure of BFTs!\>\"", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "=!=", 
         RowBox[{"getNumberFaces", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Starting example: We have somehow lost some faces when \
collapsing the bivalent nodes!\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"EdgeCycleMatrix", "[", 
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{"turnIntoAdjacencyMatrix", "[", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], "]"}], 
       "]"}], "]"}], "=!=", 
     RowBox[{"Length", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"EdgeCycleMatrix", "[", 
        RowBox[{"AdjacencyGraph", "[", 
         RowBox[{"turnIntoAdjacencyMatrix", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
         "]"}], "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "Print", "[", 
      "\"\<Starting example: There is a different number of cycles in the \
graph before and after the collapse of bivalent nodes!\>\"", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellChangeTimes->{{3.6853530474653606`*^9, 3.6853530491049757`*^9}, 
   3.6853531121897726`*^9, 3.6853531499754086`*^9, 3.685684516641303*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.693465869638626*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "collapseBivalentNodes"}], 
   ",", " ", 
   RowBox[{
    RowBox[{"PART2", ".", " ", "IT"}], " ", "NEEDS", " ", "TO", " ", "RUN", 
    " ", "AFTER", " ", 
    RowBox[{"PART1", "!"}], " ", "This", " ", "group", " ", "of", " ", 
    "cells", " ", "contains", " ", "the", " ", "generic"}], ",", " ", 
   RowBox[{"heavy", " ", "test"}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6853523507648044`*^9, {3.6853532216960764`*^9, 3.685353257587919*^9}, {
   3.6853539529999237`*^9, 3.6853540227707386`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allTestCollapseBivalentNodes", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "allcasestotryout", ",", "jj", ",", "trya", ",", "tryb", ",", "tryc", 
       ",", "tryd", ",", "newa", ",", "newb", ",", "newc", ",", "newd"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allcasestotryout", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", "0"}], "&"}], ",", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Variables", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
            "5"}], "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "allcasestotryout", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"trya", "=", 
          RowBox[{"a", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tryb", "=", 
          RowBox[{"b", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tryc", "=", 
          RowBox[{"c", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tryd", "=", 
          RowBox[{"d", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], 
          "=", 
          RowBox[{"collapseBivalentNodes", "[", 
           RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"Dimensions", ",", 
              RowBox[{"collapseBivalentNodesNEW", "[", 
               RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
               "]"}]}], "]"}], "=!=", 
            RowBox[{"Map", "[", 
             RowBox[{"Dimensions", ",", 
              RowBox[{"{", 
               RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
               "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "}"}],
               ",", "\"\< : my alternative function for collapsing bivalent \
nodes doesn't yield Kasteleyn-components of the same dimension!\>\""}], "]"}],
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"Sort", ",", 
               RowBox[{"joinupKasteleyn", "@@", 
                RowBox[{"collapseBivalentNodesNEW", "[", 
                 RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                 "]"}]}]}], "]"}], "]"}], "=!=", 
            RowBox[{"Sort", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"Sort", ",", 
               RowBox[{"joinupKasteleyn", "@@", 
                RowBox[{"{", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "}"}]}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "}"}],
               ",", "\"\< : my alternative function for collapsing bivalent \
nodes gives a different Kasteleyn!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"IsomorphicGraphQ", "[", 
             RowBox[{
              RowBox[{"AdjacencyGraph", "[", 
               RowBox[{
                RowBox[{"turnIntoAdjacencyMatrix", "[", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"zz_", "/;", 
                   RowBox[{"(", 
                    RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], 
                 "}"}]}], "]"}], ",", 
              RowBox[{"AdjacencyGraph", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"turnIntoAdjacencyMatrix", "@@", 
                  RowBox[{"collapseBivalentNodesNEW", "[", 
                   RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                   "]"}]}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"zz_", "/;", 
                   RowBox[{"(", 
                    RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], 
                 "}"}]}], "]"}]}], "]"}], "=!=", "True"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "}"}],
               ",", "\"\< : my alternative function for collapsing bivalent \
nodes gives a different graph!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"getDuplicateEdges", "[", 
                 RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                 "]"}], "\[Equal]", 
                RowBox[{"{", "}"}]}], "&&", 
               RowBox[{"getEdgesBFTformQ", "[", 
                RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                "]"}], "&&", 
               RowBox[{
                RowBox[{"getKasteleynConsistencyViolation", "[", 
                 RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                 "]"}], "===", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"getKasteleynCheckQ", "[", 
                   RowBox[{
                   "newa", ",", "newb", ",", "newc", ",", "newd", ",", 
                    "True"}], "]"}], "=!=", "True"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                    "}"}], ",", 
                    "\"\< : Somehow collapsing the nodes hasn't preserved the \
index structure of BFTs!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"getNumberFaces", "[", 
                   RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                   "]"}], "=!=", 
                  RowBox[{"getNumberFaces", "[", 
                   RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                   "]"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                    "}"}], ",", 
                    "\"\< : We have somehow lost some faces when collapsing \
the bivalent nodes!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"Normal", "[", 
              RowBox[{"EdgeCycleMatrix", "[", 
               RowBox[{"AdjacencyGraph", "[", 
                RowBox[{"turnIntoAdjacencyMatrix", "[", 
                 RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                 "]"}], "]"}], "]"}], "]"}], "]"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"Normal", "[", 
              RowBox[{"EdgeCycleMatrix", "[", 
               RowBox[{"AdjacencyGraph", "[", 
                RowBox[{"turnIntoAdjacencyMatrix", "[", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "]"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "}"}],
               ",", "\"\< : There is a different number of cycles in the \
graph before and after the collapse of bivalent nodes!\>\""}], "]"}], ";"}]}],
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestCollapseBivalentNodes", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestCollapseBivalentNodes", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestCollapseBivalentNodes", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestCollapseBivalentNodes", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestCollapseBivalentNodes", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685352374443385*^9, 
   3.685352375792287*^9}, {3.6853524103442163`*^9, 3.6853524980741644`*^9}, {
   3.685353096152397*^9, 3.6853530971715975`*^9}, {3.6853535977179217`*^9, 
   3.685353697889842*^9}, {3.685353828237751*^9, 3.6853538292059155`*^9}, {
   3.6853538954633474`*^9, 3.6853539396788845`*^9}, {3.68535407084544*^9, 
   3.685354136611049*^9}, {3.685354295995137*^9, 3.685354384967494*^9}, {
   3.685354480637904*^9, 3.685354484563567*^9}, {3.6853546401832314`*^9, 
   3.6853546488646173`*^9}, {3.6856854499684353`*^9, 3.68568545009624*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.693465869638626*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Here", " ", "we", " ", "check", " ", "bubblesQ"}], ",", " ", 
   "removeBubbles"}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6853548226077285`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestBubbles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "allcasestotryout", ",", "jj", ",", "trya", ",", "tryb", ",", "tryc", 
       ",", "tryd", ",", "newa", ",", "newb", ",", "newc", ",", "newd", ",", 
       "scatteringbubbles", ",", "bft2bubbles", ",", "bft1bubbles", ",", 
       "adjmat", ",", "killbubbblesAscattering", ",", 
       "killbubbblesBscattering", ",", "killbubbblesCscattering", ",", 
       "killbubbblesDscattering", ",", "killbubbblesAbft2", ",", 
       "killbubbblesBbft2", ",", "killbubbblesCbft2", ",", 
       "killbubbblesDbft2", ",", "killbubbblesAbft1", ",", 
       "killbubbblesBbft1", ",", "killbubbblesCbft1", ",", 
       "killbubbblesDbft1"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allcasestotryout", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", "0"}], "&"}], ",", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Variables", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}], ",", 
            "5"}], "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"jj", "=", "1"}], ",", 
        RowBox[{"jj", "\[LessEqual]", 
         RowBox[{"Length", "[", "allcasestotryout", "]"}]}], ",", 
        RowBox[{"jj", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"trya", "=", 
          RowBox[{"a", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tryb", "=", 
          RowBox[{"b", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tryc", "=", 
          RowBox[{"c", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tryd", "=", 
          RowBox[{"d", "/.", 
           RowBox[{"allcasestotryout", "[", 
            RowBox[{"[", "jj", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"bftlabeling", "===", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "}"}], 
             "=", 
             RowBox[{"higgsEdgesBFT", "[", 
              RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd", ",", 
               RowBox[{"{", "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"Variables", "[", 
              RowBox[{"{", 
               RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], "}"}],
               "]"}], "]"}], ">", "0"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], 
             "=", 
             RowBox[{"collapseBivalentNodes", "[", 
              RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"scatteringbubbles", "=", 
             RowBox[{"bubblesQ", "[", 
              RowBox[{
              "newa", ",", "newb", ",", "newc", ",", "newd", ",", "False"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"bft2bubbles", "=", 
             RowBox[{"bubblesQ", "[", 
              RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd", ",", 
               RowBox[{"bftlabeling", "/.", 
                RowBox[{"{", 
                 RowBox[{"Null", "\[Rule]", "False"}], "}"}]}], ",", "2"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"bft1bubbles", "=", 
                RowBox[{"bubblesQ", "[", 
                 RowBox[{
                 "newa", ",", "newb", ",", "newc", ",", "newd", ",", 
                  "bftlabeling", ",", "1"}], "]"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"scatteringbubbles", "=!=", "bft2bubbles"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}], ",", 
                 "\"\< : The scattering graph doesn't seem to see the same \
bubbles as the BFT graph under gauging 2!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"scatteringbubbles", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"reducibilityQ", "[", 
                   RowBox[{
                   "trya", ",", "tryb", ",", "tryc", ",", "tryd", ",", 
                    "False", ",", "False"}], "]"}], "=!=", "True"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                    "}"}], ",", 
                    "\"\< : The scattering graph has bubbles but is declared \
to not be reducible!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"bft2bubbles", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"reducibilityQ", "[", 
                   RowBox[{
                   "trya", ",", "tryb", ",", "tryc", ",", "tryd", ",", 
                    "False", ",", 
                    RowBox[{"bftlabeling", "/.", 
                    RowBox[{"{", 
                    RowBox[{"Null", "\[Rule]", "False"}], "}"}]}], ",", "2"}],
                    "]"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                    "}"}], ",", 
                    "\"\< : The BFT graph (gauging 2) has bubbles but is \
declared to not be reducible!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"bftlabeling", "&&", 
               RowBox[{
                RowBox[{"getDuplicateEdges", "[", 
                 RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                 "]"}], "\[Equal]", 
                RowBox[{"{", "}"}]}], "&&", 
               RowBox[{"getEdgesBFTformQ", "[", 
                RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                "]"}], "&&", 
               RowBox[{
                RowBox[{"getKasteleynConsistencyViolation", "[", 
                 RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                 "]"}], "===", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{"bft1bubbles", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"reducibilityQ", "[", 
                    RowBox[{
                    "trya", ",", "tryb", ",", "tryc", ",", "tryd", ",", 
                    "False", ",", "True", ",", "1"}], "]"}], "=!=", "True"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                    "}"}], ",", 
                    "\"\< : The BFT graph (gauging 1) has bubbles but is \
declared to not be reducible!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"bft2bubbles", "&&", 
                  RowBox[{"bft1bubbles", "\[Equal]", "False"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Or", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "#"}], "]"}]}]}], "]"}], "\[Equal]", 
                    "2"}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}]}], "]"}], ",", "#"}], "]"}], "\[Equal]", 
                    "2"}], ")"}]}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Intersection", "@@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"Variables", "[", "#", "]"}]}], ")"}]}], "&"}], 
                    ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], ",", 
                    RowBox[{"firstedge_", "+", "secondedge_"}], ",", "2"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"trya", ",", "tryb", ",", "tryc", ",", "tryd"}], 
                    "}"}], ",", 
                    "\"\< : The BFT graph has bubbles under gauging 2, but \
not under gauging 1, even though the bubble-edges have shared which only \
appear exactly in these two edges, which is the requirement for a gauging 1 \
bubble\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"adjmat", "=", 
             RowBox[{"turnIntoAdjacencyMatrix", "[", 
              RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"adjmat", ",", 
                 RowBox[{"zz_", "/;", 
                  RowBox[{"zz", ">", "1"}]}], ",", "2"}], "]"}], "=!=", 
               "bft2bubbles"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}], ",", 
                 "\"\< : bubbblesQ doesn't agree with the adjacency matrix \
having entries greater than 1 \>\"", ",", "bft2bubbles"}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "killbubbblesAscattering", ",", "killbubbblesBscattering", ",", 
               "killbubbblesCscattering", ",", "killbubbblesDscattering"}], 
              "}"}], "=", 
             RowBox[{"removeBubbles", "[", 
              RowBox[{
              "newa", ",", "newb", ",", "newc", ",", "newd", ",", "False"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "killbubbblesAbft2", ",", "killbubbblesBbft2", ",", 
               "killbubbblesCbft2", ",", "killbubbblesDbft2"}], "}"}], "=", 
             RowBox[{"removeBubbles", "[", 
              RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd", ",", 
               RowBox[{"bftlabeling", "/.", 
                RowBox[{"{", 
                 RowBox[{"Null", "\[Rule]", "False"}], "}"}]}], ",", "2"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "killbubbblesAbft1", ",", "killbubbblesBbft1", ",", 
                  "killbubbblesCbft1", ",", "killbubbblesDbft1"}], "}"}], "=", 
                RowBox[{"removeBubbles", "[", 
                 RowBox[{
                 "newa", ",", "newb", ",", "newc", ",", "newd", ",", 
                  "bftlabeling", ",", "1"}], "]"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "killbubbblesAscattering", ",", "killbubbblesBscattering", 
                 ",", "killbubbblesCscattering", ",", 
                 "killbubbblesDscattering"}], "}"}], "=!=", 
               RowBox[{"{", 
                RowBox[{
                "killbubbblesAbft2", ",", "killbubbblesBbft2", ",", 
                 "killbubbblesCbft2", ",", "killbubbblesDbft2"}], "}"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}], ",", 
                 "\"\< : The removal of bubbles is acting differently for \
scattering and BFT (gauging 2) graphs!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "killbubbblesAbft2", ",", "killbubbblesBbft2", ",", 
                   "killbubbblesCbft2", ",", "killbubbblesDbft2"}], "}"}], "===", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}]}], ")"}], "=!=", 
               RowBox[{"(", 
                RowBox[{"bft2bubbles", "=!=", "True"}], ")"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}], ",", 
                 "\"\< : For gauging 2, the action of removeBubbles is at \
odds with what bubblesQ says (either it has bubbles but the graph doesn't \
change, or the graph removed bubbles even though bubblesQ says there aren't \
any)\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "killbubbblesAbft1", ",", "killbubbblesBbft1", ",", 
                    "killbubbblesCbft1", ",", "killbubbblesDbft1"}], "}"}], "===", 
                    RowBox[{"{", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "}"}]}], ")"}], "=!=", 
                  RowBox[{"(", 
                   RowBox[{"bft1bubbles", "=!=", "True"}], ")"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "}"}], ",", 
                    "\"\< : For gauging 1, the action of removeBubbles is at \
odds with what bubblesQ says (either it has bubbles but the graph doesn't \
change, or the graph removed bubbles even though bubblesQ says there aren't \
any)\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"getDuplicateEdges", "[", 
                   RowBox[{
                   "killbubbblesAbft1", ",", "killbubbblesBbft1", ",", 
                    "killbubbblesCbft1", ",", "killbubbblesDbft1"}], "]"}], "=!=", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "}"}], ",", 
                    "\"\< : The removal of bubbles caused duplicate edges to \
appear in the Kasteleyn for BFT under gauging 1!\>\""}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getDuplicateEdges", "[", 
                RowBox[{
                "killbubbblesAbft2", ",", "killbubbblesBbft2", ",", 
                 "killbubbblesCbft2", ",", "killbubbblesDbft2"}], "]"}], "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}], ",", 
                 "\"\< : The removal of bubbles caused duplicate edges to \
appear in the Kasteleyn for BFT under gauging 2!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"bftlabeling", "&&", 
               RowBox[{
                RowBox[{"getDuplicateEdges", "[", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "]"}], "\[Equal]", 
                RowBox[{"{", "}"}]}], "&&", 
               RowBox[{"getEdgesBFTformQ", "[", 
                RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                "]"}], "&&", 
               RowBox[{
                RowBox[{"getKasteleynConsistencyViolation", "[", 
                 RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                 "]"}], "===", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"getKasteleynCheckQ", "[", 
                   RowBox[{
                   "killbubbblesAbft1", ",", "killbubbblesBbft1", ",", 
                    "killbubbblesCbft1", ",", "killbubbblesDbft1", ",", 
                    "True"}], "]"}], "=!=", "True"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<kast=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "}"}], ",", 
                    "\"\< : Somehow removing bubbles hasn't preserved the \
index structure of BFTs!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
                ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"turnIntoAdjacencyMatrix", "[", 
                RowBox[{
                "killbubbblesAbft2", ",", "killbubbblesBbft2", ",", 
                 "killbubbblesCbft2", ",", "killbubbblesDbft2"}], "]"}], "=!=", 
               RowBox[{"(", 
                RowBox[{"adjmat", "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"zz_", "/;", 
                    RowBox[{"(", 
                    RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], 
                  "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<kast=\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                  "}"}], ",", 
                 "\"\< : For BFT graphs under gauging 2, removeBubbles \
doesn't seem to have produced the result in the adjacency matrix of turning \
to 1 entries which were greater than one!\>\""}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestBubbles", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestBubbles", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestBubbles", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft2kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestBubbles", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allscatteringkasteleyns", ",", 
      RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestBubbles", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685354833540197*^9, 
   3.685354874902485*^9}, {3.685355033639189*^9, 3.685355084124842*^9}, {
   3.685355167145122*^9, 3.685355189085151*^9}, {3.6853553425701137`*^9, 
   3.68535538721939*^9}, {3.6853554447025375`*^9, 3.685355450202321*^9}, {
   3.6853554988408628`*^9, 3.6853555345798607`*^9}, {3.6853555765027227`*^9, 
   3.6853556012508802`*^9}, {3.685355799908313*^9, 3.6853558106554966`*^9}, {
   3.6853558645119925`*^9, 3.6853559343101764`*^9}, {3.6853568073726444`*^9, 
   3.6853568332433996`*^9}, 3.6853570452649612`*^9, {3.6853570759163065`*^9, 
   3.6853570810023484`*^9}, {3.6853571471879334`*^9, 3.685357153874465*^9}, {
   3.685357248828122*^9, 3.6853573776333323`*^9}, {3.6853574264597464`*^9, 
   3.6853574359384265`*^9}, {3.6853574734868383`*^9, 3.685357491368539*^9}, {
   3.685357539792985*^9, 3.6853575848635044`*^9}, {3.6853576198772326`*^9, 
   3.6853576358767853`*^9}, {3.685357672778674*^9, 3.6853577079646454`*^9}, {
   3.685358254685268*^9, 3.685358259007198*^9}, 3.685684533195448*^9, {
   3.6856854634004097`*^9, 3.685685463880871*^9}, 3.693495123939918*^9, 
   3.6934954001591177`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6935054934020443`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", 
   RowBox[{"squareMove", ".", " ", "DOING"}], " ", "ONE", " ", "PART", " ", 
   "AT", " ", "A", " ", 
   RowBox[{"TIME", "!"}]}], "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6853582949272194`*^9, {3.6950226531266203`*^9, 3.695022655774527*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bft2filename", "=", "\"\<distinctbft2kasteleyns\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "scatteringfilename", "=", "\"\<distinctscatteringkasteleyns\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft2kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft2filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allscatteringkasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "scatteringfilename", ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allTestSquareMove", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "maxtolerablelength", ",", "newa", ",", "newb", ",", "newc", ",", 
       "newd", ",", "squarefaces", ",", "doublesquaremoves", ",", 
       "areYouEqualToBefore", ",", "areThesePhasesEqual", ",", 
       "spawnNewPhasesBFTfaces", ",", "allphasesbft", ",", "newphasesbft", 
       ",", "afterlength", ",", "beforelength", ",", "pi", ",", "phasestoadd",
        ",", "squaremovenodes", ",", "spawnNewPhasesBFTnodes", ",", 
       "allphasesbftnodes", ",", "newphasesbftnodes", ",", 
       "squaremovenodesscattering", ",", "spawnNewPhasesScattering", ",", 
       "allphasesscattering", ",", "newphasesscattering", ",", 
       "bftfacesstratifications", ",", "bftnodesstratifications", ",", 
       "scatteringstratifications", ",", "turnIntoStratNums", ",", 
       "isTheFaceAsquare", ",", "allthevars", ",", "fullkast", ",", 
       "makeCanonical", ",", "genericEDGE", ",", "splitUpKasteleyn"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "This", " ", "is", " ", "approximately", " ", "the", " ", "maximum", 
       " ", "number", " ", "of", " ", "phases", " ", "we", " ", "compute"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"maxtolerablelength", "=", "20"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], "=", 
       RowBox[{"collapseBivalentNodes", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "First", " ", "do", " ", "the", " ", "square", " ", "moves", " ", 
        "for", " ", "BFTs"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"areThesePhasesEqual", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"firstphase", ",", "secondphase"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "areyouequal", ",", "adjfirstphase", ",", "adjsecondphase", ",", 
             "graphfirstphase", ",", "graphsecondphase"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{"Dimensions", ",", "firstphase"}], "]"}], "=!=", 
               RowBox[{"Map", "[", 
                RowBox[{"Dimensions", ",", "secondphase"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"areyouequal", "=", "False"}], ";"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"adjfirstphase", "=", 
                RowBox[{"turnIntoAdjacencyMatrix", "@@", "firstphase"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"adjsecondphase", "=", 
                RowBox[{"turnIntoAdjacencyMatrix", "@@", "secondphase"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sort", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", "adjfirstphase"}], "]"}], "]"}], "=!=", 
                  RowBox[{"Sort", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Total", ",", "adjsecondphase"}], "]"}], "]"}]}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"areyouequal", "=", "False"}], ";"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"graphfirstphase", "=", 
                   RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"adjfirstphase", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"zz_", "/;", 
                    RowBox[{"(", 
                    RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"graphsecondphase", "=", 
                   RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"adjsecondphase", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"zz_", "/;", 
                    RowBox[{"(", 
                    RowBox[{"zz", ">", "1"}], ")"}]}], "\[Rule]", "1"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{"(", 
                    RowBox[{"Or", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"adjsecondphase", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"List", "@@", "#"}], ",", 
                    RowBox[{"List", "@@", "#"}]}], "]"}], "]"}], "===", 
                    "adjfirstphase"}], "&"}], ",", 
                    RowBox[{"FindGraphIsomorphism", "[", 
                    RowBox[{
                    "graphfirstphase", ",", "graphsecondphase", ",", "All"}], 
                    "]"}]}], "]"}]}], ")"}]}], ";"}]}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"areyouequal", "=", 
                   RowBox[{"areYouEqualToBefore", "[", 
                    RowBox[{
                    RowBox[{"firstphase", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"firstphase", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"firstphase", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"firstphase", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], ",", "secondphase"}], 
                    "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", "areyouequal"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"squarefaces", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"getInternalFaceLabels", "[", 
              RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
             ",", 
             RowBox[{"zz_", "/;", 
              RowBox[{
               RowBox[{"Count", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", 
                  RowBox[{"Join", "[", 
                   RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                   "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"_", "[", 
                   RowBox[{"zz", ",", "_"}], "]"}], "|", 
                  RowBox[{"_", "[", 
                   RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}], "\[Equal]", 
               "4"}]}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"squarefaces", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"getInternalFaceLabels", "[", 
             RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
            ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Count", "[", 
                 RowBox[{
                  RowBox[{"Variables", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                   RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}], "\[Equal]", 
                "4"}], "&&", 
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"ConnectedComponents", "[", 
                  RowBox[{"AdjacencyGraph", "[", 
                   RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}], "]"}], ",", 
                 RowBox[{"Riffle", "[", 
                  RowBox[{
                   RowBox[{"Union", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "newa", "]"}], "+", 
                    RowBox[{"Length", "[", "newc", "]"}]}]}], "}"}]}], "&"}], 
                    ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}]}], "]"}], 
                    "]"}], "]"}], ",", "___", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]}], "]"}]}],
               ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "Some", " ", "of", " ", "these", " ", "do", " ", "not", " ", 
            "form", " ", "a", " ", "four"}], "-", 
           RowBox[{
            RowBox[{"cycle", ".", " ", 
             RowBox[{"We", "'"}]}], "ll", " ", "weed", " ", "those", " ", 
            "ones", " ", 
            RowBox[{"out", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"isTheFaceAsquare", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "inputvertexpairs", "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Block", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "vertexpairs", ",", "nextedge", ",", "ijk", ",", "allisfine"}],
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"vertexpairs", "=", "inputvertexpairs"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"nextedge", "=", 
                RowBox[{"vertexpairs", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"vertexpairs", "=", 
                RowBox[{"Delete", "[", 
                 RowBox[{"vertexpairs", ",", 
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{"vertexpairs", ",", "nextedge"}], "]"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"For", "[", 
                RowBox[{
                 RowBox[{"ijk", "=", "1"}], ",", 
                 RowBox[{"ijk", "\[LessEqual]", "3"}], ",", 
                 RowBox[{"ijk", "++"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nextedge", "=", 
                   RowBox[{"Cases", "[", 
                    RowBox[{"vertexpairs", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Alternatives", "@@", "nextedge"}], ",", "_"}], 
                    "}"}], "|", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"Alternatives", "@@", "nextedge"}]}], "}"}]}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"nextedge", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nextedge", "=", 
                    RowBox[{"nextedge", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"vertexpairs", "=", 
                    RowBox[{"Delete", "[", 
                    RowBox[{"vertexpairs", ",", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"vertexpairs", ",", "nextedge"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"allisfine", "=", "True"}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"allisfine", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", "allisfine", ")"}], "&&", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Union", "[", 
                    RowBox[{"Flatten", "[", "inputvertexpairs", "]"}], "]"}], 
                   "]"}], "===", "4"}], ")"}]}]}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"allthevars", "=", 
          RowBox[{"Variables", "[", 
           RowBox[{"{", 
            RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"fullkast", "=", 
          RowBox[{"joinupKasteleyn", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"squarefaces", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"squarefaces", ",", 
            RowBox[{"zz_", "/;", 
             RowBox[{"isTheFaceAsquare", "[", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "+", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", 
                    RowBox[{"Length", "[", "fullkast", "]"}]}], "}"}]}], 
                 "&"}], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"fullkast", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "&"}], 
                  ",", 
                  RowBox[{"Cases", "[", 
                   RowBox[{"allthevars", ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}]}], "]"}]}], 
               "]"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Let", "'"}], "s", " ", "do", " ", "two", " ", "square", 
           " ", "moves", " ", "on", " ", "the", " ", "same", " ", "face", " ",
            "and", " ", "see", " ", "if", " ", "we", " ", "return", " ", "to",
            " ", "the", " ", "original", " ", "graph"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"doublesquaremoves", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"collapseBivalentNodes", "@@", 
              RowBox[{"squareMove", "[", 
               RowBox[{
                RowBox[{"Sequence", "@@", 
                 RowBox[{"(", 
                  RowBox[{"collapseBivalentNodes", "@@", 
                   RowBox[{"squareMove", "[", 
                    RowBox[{
                    "newa", ",", "newb", ",", "newc", ",", "newd", ",", "#", 
                    ",", "True", ",", "True"}], "]"}]}], ")"}]}], ",", "#", 
                ",", "True", ",", "True"}], "]"}]}], "&"}], ",", 
            "squarefaces"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"splitUpKasteleyn", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "theinputkasteleyn", ",", "bottomrightrownum", ",", 
              "bottomrightcolnum"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Block", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "outputtopleft", ",", "outputtopright", ",", 
                "outputbottomleft", ",", "outputbottomright"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"outputtopleft", "=", 
                RowBox[{"theinputkasteleyn", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{";;", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
                   RowBox[{";;", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], 
                  "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"outputtopright", "=", 
                RowBox[{"theinputkasteleyn", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{";;", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"bottomrightrownum", "+", "1"}], ")"}]}]}], ",", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], 
                  "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"outputbottomleft", "=", 
                RowBox[{"theinputkasteleyn", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
                   RowBox[{";;", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"bottomrightcolnum", "+", "1"}], ")"}]}]}]}], 
                  "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"outputbottomright", "=", 
                RowBox[{"theinputkasteleyn", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", "bottomrightrownum", ")"}]}], ";;"}], ",", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", "bottomrightcolnum", ")"}]}], ";;"}]}], 
                  "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                "outputtopleft", ",", "outputtopright", ",", 
                 "outputbottomleft", ",", "outputbottomright"}], "}"}]}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"makeCanonical", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "thea", ",", "theb", ",", "thec", ",", "thed", ",", 
              "doublesquaremoveexample"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "tempnewa", ",", "tempnewb", ",", "tempnewc", ",", "tempnewd", 
                ",", "doublesquaremovesguy", ",", "newkasteleyn", ",", 
                "oldkasteleyn", ",", "cleanupvariablesnew", ",", 
                "cleanupvariablesold", ",", "roworderingresult", ",", 
                "roworderingold", ",", "columnorderingresult", ",", 
                "columnorderingold", ",", "areyouequal", ",", 
                "oldkastcanonical", ",", "newkastcanonical"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "tempnewa", ",", "tempnewb", ",", "tempnewc", ",", 
                  "tempnewd"}], "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                 "}"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
               "doublesquaremovesguy", "=", "doublesquaremoveexample"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"newkasteleyn", "=", 
                RowBox[{"joinupKasteleyn", "@@", "doublesquaremovesguy"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"oldkasteleyn", "=", 
                RowBox[{"joinupKasteleyn", "[", 
                 RowBox[{
                 "tempnewa", ",", "tempnewb", ",", "tempnewc", ",", 
                  "tempnewd"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"cleanupvariablesnew", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{"genericEDGE", "@@", "#"}], ")"}]}], "&"}], ",", 
                  RowBox[{"Variables", "[", "newkasteleyn", "]"}]}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"cleanupvariablesold", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{"genericEDGE", "@@", "#"}], ")"}]}], "&"}], ",", 
                  RowBox[{"Variables", "[", "oldkasteleyn", "]"}]}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"newkasteleyn", "=", 
                RowBox[{"newkasteleyn", "/.", "cleanupvariablesnew"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"oldkasteleyn", "=", 
                RowBox[{"oldkasteleyn", "/.", "cleanupvariablesold"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"doublesquaremovesguy", "=", 
                RowBox[{
                "doublesquaremovesguy", "/.", "cleanupvariablesnew"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "tempnewa", ",", "tempnewb", ",", "tempnewc", ",", 
                  "tempnewd"}], "}"}], "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "tempnewa", ",", "tempnewb", ",", "tempnewc", ",", 
                   "tempnewd"}], "}"}], "/.", "cleanupvariablesold"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Begin", " ", "with", " ", "the", " ", "nodes", " ", 
                 "attached", " ", "to", " ", "external", " ", 
                 RowBox[{"nodes", "."}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"roworderingresult", "=", 
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                   RowBox[{"Variables", "[", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Order", " ", "these", " ", "in", " ", "a", " ", 
                 "\"\<canonical way\>\"", " ", "determined", " ", "by", " ", 
                 "who", " ", "else", " ", "is", " ", "in", " ", "the", " ", 
                 "same", " ", "row", " ", "in", " ", "the", " ", 
                 "kasteleyn"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"roworderingresult", "=", 
                RowBox[{"roworderingresult", "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"newkasteleyn", "[", 
                    RowBox[{"[", "roworderingresult", "]"}], "]"}]}], "]"}], 
                   "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Now", " ", "do", " ", "the", " ", "other", " ", "internal", 
                 " ", "white", " ", "nodes"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"roworderingresult", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"roworderingresult", ",", 
                  RowBox[{
                   RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
                    "roworderingresult"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"newkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
                    "roworderingresult"}], "]"}], "]"}], "]"}]}], "]"}], 
                    "]"}], "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Now", " ", "do", " ", "the", " ", "external", " ", "white", 
                  " ", 
                  RowBox[{"nodes", ".", " ", "We"}], " ", "will", " ", 
                  "order", " ", "these", " ", "in", " ", "a", " ", 
                  "canonical", " ", "way", " ", "later"}], ",", " ", 
                 RowBox[{
                 "after", " ", "doing", " ", "the", " ", "columns"}]}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"roworderingresult", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"roworderingresult", ",", 
                  RowBox[{
                   RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
                   "+", 
                   RowBox[{"Length", "[", "roworderingresult", "]"}]}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"roworderingold", "=", 
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"tempnewb", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                   RowBox[{"Variables", "[", "tempnewb", "]"}]}], "]"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"roworderingold", "=", 
                RowBox[{"roworderingold", "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"oldkasteleyn", "[", 
                    RowBox[{"[", "roworderingold", "]"}], "]"}]}], "]"}], 
                   "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"roworderingold", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"roworderingold", ",", 
                  RowBox[{
                   RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "tempnewa", "]"}], "]"}], ",", 
                    "roworderingold"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"oldkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "tempnewa", "]"}], "]"}], ",", 
                    "roworderingold"}], "]"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"roworderingold", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"roworderingold", ",", 
                  RowBox[{
                   RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"tempnewc", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"Variables", "[", "tempnewc", "]"}]}], "]"}], 
                    "]"}], "+", 
                   RowBox[{"Length", "[", "roworderingold", "]"}]}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingresult", "=", 
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "&"}], ",", 
                   RowBox[{"Variables", "[", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingresult", "=", 
                RowBox[{"columnorderingresult", "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Transpose", "[", 
                    RowBox[{"newkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "columnorderingresult"}], "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"columnorderingresult", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"columnorderingresult", ",", 
                  RowBox[{
                   RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    "columnorderingresult"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"newkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    "columnorderingresult"}], "]"}]}], "]"}], "]"}], "]"}]}], 
                    "]"}], "]"}], "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"columnorderingresult", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"columnorderingresult", ",", 
                  RowBox[{
                   RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"Variables", "[", 
                    RowBox[{"doublesquaremovesguy", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}], 
                   "+", 
                   RowBox[{"Length", "[", "columnorderingresult", "]"}]}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingold", "=", 
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"tempnewc", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "&"}], ",", 
                   RowBox[{"Variables", "[", "tempnewc", "]"}]}], "]"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingold", "=", 
                RowBox[{"columnorderingold", "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Transpose", "[", 
                    RowBox[{"oldkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "columnorderingold"}], "]"}], "]"}], 
                    "]"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingold", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"columnorderingold", ",", 
                  RowBox[{
                   RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"tempnewa", ",", "tempnewc"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    "columnorderingold"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"oldkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"tempnewa", ",", "tempnewc"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    "columnorderingold"}], "]"}]}], "]"}], "]"}], "]"}]}], 
                    "]"}], "]"}], "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"columnorderingold", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"columnorderingold", ",", 
                  RowBox[{
                   RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"tempnewb", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "&"}], ",", 
                    RowBox[{"Variables", "[", "tempnewb", "]"}]}], "]"}], 
                    "]"}], "+", 
                   RowBox[{"Length", "[", "columnorderingold", "]"}]}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Now", " ", "we", " ", "order", " ", "the", " ", "exteranl", 
                  " ", "white", " ", "nodes", " ", "in", " ", "a", " ", 
                  "\"\<canonical way\>\""}], ",", " ", 
                 RowBox[{
                 "determined", " ", "by", " ", "the", " ", "function", " ", 
                  RowBox[{"Ordering", "."}]}]}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"roworderingold", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "tempnewa", "]"}], "+", "1"}], 
                    ")"}], ";;"}], "]"}], "]"}], "=", 
                RowBox[{
                 RowBox[{"roworderingold", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "tempnewa", "]"}], "+", "1"}], 
                    ")"}], ";;"}], "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{
                    RowBox[{"oldkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"roworderingold", ",", "columnorderingold"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "tempnewa", "]"}], "+", "1"}], 
                    ")"}], ";;"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"roworderingresult", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ")"}], 
                   ";;"}], "]"}], "]"}], "=", 
                RowBox[{
                 RowBox[{"roworderingresult", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ")"}], 
                    ";;"}], "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{
                    RowBox[{"newkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "roworderingresult", ",", "columnorderingresult"}], "]"}],
                     "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ")"}], 
                    ";;"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"columnorderingold", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"thea", ",", "thec"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ")"}], ";;"}],
                   "]"}], "]"}], "=", 
                RowBox[{
                 RowBox[{"columnorderingold", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"thea", ",", "thec"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ")"}], ";;"}],
                    "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"oldkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"roworderingold", ",", "columnorderingold"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"thea", ",", "thec"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ")"}], 
                    ";;"}]}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"columnorderingresult", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ")"}], ";;"}],
                   "]"}], "]"}], "=", 
                RowBox[{
                 RowBox[{"columnorderingresult", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ")"}], ";;"}],
                    "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"newkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "roworderingresult", ",", "columnorderingresult"}], "]"}],
                     "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ")"}], 
                    ";;"}]}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Finally", " ", "we", " ", "add", " ", "empty", " ", "rows", 
                 " ", "and", " ", "columns", " ", "to", " ", "not", " ", 
                 "make", " ", "the", " ", "matrix", " ", "get", " ", 
                 "smaller"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"roworderingold", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"roworderingold", ",", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], "]"}], "]"}], ",", "roworderingold"}], "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingold", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"columnorderingold", ",", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    "columnorderingold"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"roworderingresult", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"roworderingresult", ",", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "doublesquaremovesguy"}],
                     "]"}], "]"}], ",", "roworderingresult"}], "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"columnorderingresult", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"columnorderingresult", ",", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "doublesquaremovesguy"}],
                     "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    "columnorderingresult"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"oldkastcanonical", "=", 
                RowBox[{"oldkasteleyn", "[", 
                 RowBox[{"[", 
                  RowBox[{"roworderingold", ",", "columnorderingold"}], "]"}],
                  "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"oldkastcanonical", "=", 
                RowBox[{"splitUpKasteleyn", "[", 
                 RowBox[{"oldkastcanonical", ",", 
                  RowBox[{"Length", "[", "thed", "]"}], ",", 
                  RowBox[{
                   RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"theb", ",", "thed"}], "]"}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"newkastcanonical", "=", 
                RowBox[{"newkasteleyn", "[", 
                 RowBox[{"[", 
                  RowBox[{"roworderingresult", ",", "columnorderingresult"}], 
                  "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"newkastcanonical", "=", 
                RowBox[{"splitUpKasteleyn", "[", 
                 RowBox[{"newkastcanonical", ",", 
                  RowBox[{"Length", "[", 
                   RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "4", "]"}], "]"}]}], "]"}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"oldkastcanonical", ",", "newkastcanonical"}], 
                "}"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"areYouEqualToBefore", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "thea", ",", "theb", ",", "thec", ",", "thed", ",", 
              "doublesquaremoveexample"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "nextoldkasteleyn", ",", "nextnewkasteleyn", ",", "totcounter",
                 ",", "oldkasteleyn", ",", "newkasteleyn", ",", "areyouequal",
                 ",", "tryoldkasteleyn", ",", "trynewkasteleyn", ",", 
                "oldrowvars", ",", "newrowvars", ",", 
                "possibleroworderofnewmat", ",", "rowstartingpoint", ",", 
                "irow", ",", "newcolvars", ",", "oldcolvars", ",", 
                "possiblecolorderofnewmat", ",", "colstartingpoint", ",", 
                "icol"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"nextoldkasteleyn", "=", 
                RowBox[{"{", 
                 RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                 "}"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"nextnewkasteleyn", "=", "doublesquaremoveexample"}], 
               ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"totcounter", "=", "0"}], ";", "\[IndentingNewLine]", 
               RowBox[{"While", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"nextoldkasteleyn", "=!=", "oldkasteleyn"}], ")"}],
                   "||", 
                  RowBox[{"(", 
                   RowBox[{"nextnewkasteleyn", "=!=", "newkasteleyn"}], 
                   ")"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"oldkasteleyn", ",", "newkasteleyn"}], "}"}], "=", 
                   RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"makeCanonical", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "oldkasteleyn"}], ",", 
                    "newkasteleyn"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"totcounter", "=", 
                   RowBox[{"totcounter", "+", "1"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"totcounter", "\[Equal]", "100"}], ",", 
                    RowBox[{
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"areyouequal", "=", 
                RowBox[{"(", 
                 RowBox[{"nextoldkasteleyn", "===", "nextnewkasteleyn"}], 
                 ")"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "Turn", " ", "it", " ", "into", " ", "a", " ", "single", 
                   " ", "matrix", " ", "and", " ", "reorder", " ", "the", " ",
                    "rows", " ", "to", " ", "a", " ", "canonical", " ", 
                   "order"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], "]"}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tryoldkasteleyn", "===", "trynewkasteleyn"}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "Turn", " ", "it", " ", "into", " ", "a", " ", "single", 
                   " ", "matrix", " ", "and", " ", "reorder", " ", "the", " ",
                    "columns", " ", "to", " ", "a", " ", "canonical", " ", 
                   "order"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], "]"}], "]"}]}], 
                    "]"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tryoldkasteleyn", "===", "trynewkasteleyn"}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "Turn", " ", "it", " ", "into", " ", "a", " ", "single", 
                   " ", "matrix", " ", "and", " ", "reorder", " ", "the", " ",
                    "rows", " ", "to", " ", "a", " ", "canonical", " ", 
                   "order"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], "]"}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tryoldkasteleyn", "===", "trynewkasteleyn"}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"oldrowvars", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "tryoldkasteleyn"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"newrowvars", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "trynewkasteleyn"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"possibleroworderofnewmat", "=", 
                   RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"newrowvars", ",", "#"}], "]"}], "]"}], "&"}], 
                    ",", "oldrowvars"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", "#", "]"}], "&"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"rowstartingpoint", "=", "trynewkasteleyn"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"For", "[", 
                   RowBox[{
                    RowBox[{"irow", "=", "1"}], ",", 
                    RowBox[{"irow", "\[LessEqual]", 
                    RowBox[{
                    "Length", "[", "possibleroworderofnewmat", "]"}]}], ",", 
                    RowBox[{"irow", "++"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "=", "rowstartingpoint"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"trynewkasteleyn", "=", 
                    RowBox[{"trynewkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"possibleroworderofnewmat", "[", 
                    RowBox[{"[", "irow", "]"}], "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"newcolvars", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", "trynewkasteleyn", "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"oldcolvars", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", "tryoldkasteleyn", "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"possiblecolorderofnewmat", "=", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"newcolvars", ",", "#"}], "]"}], "]"}], "&"}], 
                    ",", "oldcolvars"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", "#", "]"}], "&"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"colstartingpoint", "=", "trynewkasteleyn"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"icol", "=", "1"}], ",", 
                    RowBox[{"icol", "\[LessEqual]", 
                    RowBox[{
                    "Length", "[", "possiblecolorderofnewmat", "]"}]}], ",", 
                    RowBox[{"icol", "++"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "=", "colstartingpoint"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"trynewkasteleyn", "=", 
                    RowBox[{"trynewkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"possiblecolorderofnewmat", "[", 
                    RowBox[{"[", "icol", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"areyouequal", "===", "True"}], ",", 
                    RowBox[{
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "It", " ", "may", " ", "be", " ", "equal", " ", "to", " ", 
                   "the", " ", "transpose", " ", "of", " ", "the", " ", 
                   "other", " ", 
                   RowBox[{"matrix", "!"}], " ", "This", " ", "can", " ", 
                   "happen", " ", "when", " ", "a", " ", "single", " ", 
                   "square", " ", "move"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nextoldkasteleyn", "=", 
                   RowBox[{"{", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"nextnewkasteleyn", "=", 
                   RowBox[{"splitUpKasteleyn", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    "joinupKasteleyn", "@@", "doublesquaremoveexample"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "4", "]"}], "]"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"doublesquaremoveexample", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"totcounter", "=", "0"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"While", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nextoldkasteleyn", "=!=", "oldkasteleyn"}], 
                    ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"nextnewkasteleyn", "=!=", "newkasteleyn"}], 
                    ")"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"oldkasteleyn", ",", "newkasteleyn"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"makeCanonical", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "oldkasteleyn"}], ",", 
                    "newkasteleyn"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"totcounter", "=", 
                    RowBox[{"totcounter", "+", "1"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"totcounter", "\[Equal]", "100"}], ",", 
                    RowBox[{
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{"(", 
                    RowBox[{"nextoldkasteleyn", "===", "nextnewkasteleyn"}], 
                    ")"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "Turn", " ", "it", " ", "into", " ", "a", " ", "single", 
                   " ", "matrix", " ", "and", " ", "reorder", " ", "the", " ",
                    "rows", " ", "to", " ", "a", " ", "canonical", " ", 
                   "order"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], "]"}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tryoldkasteleyn", "===", "trynewkasteleyn"}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "Turn", " ", "it", " ", "into", " ", "a", " ", "single", 
                   " ", "matrix", " ", "and", " ", "reorder", " ", "the", " ",
                    "columns", " ", "to", " ", "a", " ", "canonical", " ", 
                   "order"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], "]"}], "]"}]}], 
                    "]"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tryoldkasteleyn", "===", "trynewkasteleyn"}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "Turn", " ", "it", " ", "into", " ", "a", " ", "single", 
                   " ", "matrix", " ", "and", " ", "reorder", " ", "the", " ",
                    "rows", " ", "to", " ", "a", " ", "canonical", " ", 
                   "order"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"joinupKasteleyn", "@@", "#"}], "]"}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"areyouequal", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tryoldkasteleyn", "===", "trynewkasteleyn"}], 
                    ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"nextoldkasteleyn", ",", "nextnewkasteleyn"}], 
                    "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"areyouequal", "\[Equal]", "False"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"oldrowvars", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "tryoldkasteleyn"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"newrowvars", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", "trynewkasteleyn"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"possibleroworderofnewmat", "=", 
                   RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"newrowvars", ",", "#"}], "]"}], "]"}], "&"}], 
                    ",", "oldrowvars"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", "#", "]"}], "&"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"rowstartingpoint", "=", "trynewkasteleyn"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"For", "[", 
                   RowBox[{
                    RowBox[{"irow", "=", "1"}], ",", 
                    RowBox[{"irow", "\[LessEqual]", 
                    RowBox[{
                    "Length", "[", "possibleroworderofnewmat", "]"}]}], ",", 
                    RowBox[{"irow", "++"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "=", "rowstartingpoint"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"trynewkasteleyn", "=", 
                    RowBox[{"trynewkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"possibleroworderofnewmat", "[", 
                    RowBox[{"[", "irow", "]"}], "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"newcolvars", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", "trynewkasteleyn", "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"oldcolvars", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Variables", ",", 
                    RowBox[{"Transpose", "[", "tryoldkasteleyn", "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"possiblecolorderofnewmat", "=", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"newcolvars", ",", "#"}], "]"}], "]"}], "&"}], 
                    ",", "oldcolvars"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", "#", "]"}], "&"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"colstartingpoint", "=", "trynewkasteleyn"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"icol", "=", "1"}], ",", 
                    RowBox[{"icol", "\[LessEqual]", 
                    RowBox[{
                    "Length", "[", "possiblecolorderofnewmat", "]"}]}], ",", 
                    RowBox[{"icol", "++"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "=", "colstartingpoint"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"trynewkasteleyn", "=", 
                    RowBox[{"trynewkasteleyn", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"possiblecolorderofnewmat", "[", 
                    RowBox[{"[", "icol", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"Transpose", "[", "#", "]"}], "]"}]}], "]"}], 
                    "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"trynewkasteleyn", "===", "tryoldkasteleyn"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"areyouequal", "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"Ordering", "[", "#", "]"}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"tryoldkasteleyn", ",", "trynewkasteleyn"}], 
                    "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"areyouequal", "===", "True"}], ",", 
                    RowBox[{
                    RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               "areyouequal"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"areYouEqualToBefore", "[", 
                  RowBox[{
                  "newa", ",", "newb", ",", "newc", ",", "newd", ",", "#"}], 
                  "]"}], "&"}], ",", "doublesquaremoves"}], "]"}]}], ")"}], "=!=",
             "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}],
               ",", "\"\< : Doing two square moves on a face of a BFT doesn't \
seem to bring you back to the original graph!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "Now", " ", "do", " ", "the", " ", "square", " ", "moves", " ", 
            "for", " ", "BFTs"}], ",", " ", 
           RowBox[{"using", " ", "face", " ", "numbers"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"spawnNewPhasesBFTfaces", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], "}"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"Block", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "thesquarefaces", ",", "squaremovedphases", ",", 
                "positionnewphases", ",", "newphases", ",", "localvars", ",", 
                "localkast"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"thesquarefaces", "=", 
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"getInternalFaceLabels", "[", 
                   RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                   "]"}], ",", 
                  RowBox[{"zz_", "/;", 
                   RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}], "\[Equal]", 
                    "4"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"localvars", "=", 
                RowBox[{"Variables", "[", 
                 RowBox[{"{", 
                  RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                  "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"localkast", "=", 
                RowBox[{"joinupKasteleyn", "[", 
                 RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"thesquarefaces", "=", 
                RowBox[{"Cases", "[", 
                 RowBox[{"thesquarefaces", ",", 
                  RowBox[{"zz_", "/;", 
                   RowBox[{"isTheFaceAsquare", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"Length", "[", "localkast", "]"}]}], "}"}]}], 
                    "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"localkast", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"localvars", ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}]}], "]"}]}], 
                    "]"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"squaremovedphases", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"collapseBivalentNodes", "@@", 
                    RowBox[{"squareMove", "[", 
                    RowBox[{
                    "thea", ",", "theb", ",", "thec", ",", "thed", ",", "#", 
                    ",", "True", ",", "True"}], "]"}]}], "&"}], ",", 
                  "thesquarefaces"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"positionnewphases", "=", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"Position", "[", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"areThesePhasesEqual", "[", 
                    RowBox[{
                    RowBox[{"squaremovedphases", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], ",", 
                    RowBox[{"allphasesbft", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "squaremovedphases", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "allphasesbft", "]"}]}], "}"}]}], 
                    "]"}]}], "]"}], ",", "False"}], "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"newphases", "=", 
                RowBox[{"PadRight", "[", 
                 RowBox[{
                  RowBox[{"squaremovedphases", "[", 
                   RowBox[{"[", "positionnewphases", "]"}], "]"}], ",", 
                  "maxtolerablelength", ",", 
                  RowBox[{"Unevaluated", "[", 
                   RowBox[{"Sequence", "[", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", "newphases"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"allphasesbft", "=", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], 
           "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"newphasesbft", "=", "allphasesbft"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"afterlength", "=", "2"}], ";", "\[IndentingNewLine]", 
         RowBox[{"beforelength", "=", "1"}], ";", "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"newphasesbft", "=!=", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{"afterlength", "\[LessEqual]", "maxtolerablelength"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"beforelength", "=", 
             RowBox[{"Length", "[", "allphasesbft", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"pi", "=", "1"}], ",", 
              RowBox[{"pi", "\[LessEqual]", 
               RowBox[{"Length", "[", "newphasesbft", "]"}]}], ",", 
              RowBox[{"pi", "++"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"phasestoadd", "=", 
                RowBox[{"spawnNewPhasesBFTfaces", "[", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"newphasesbft", "[", 
                   RowBox[{"[", "pi", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"allphasesbft", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"allphasesbft", ",", "phasestoadd"}], "]"}]}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"afterlength", "=", 
             RowBox[{"Length", "[", "allphasesbft", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"newphasesbft", "=", 
             RowBox[{"allphasesbft", "[", 
              RowBox[{"[", 
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"beforelength", "+", "1"}], ",", "afterlength"}], 
                "]"}], "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"allphasesbft", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Join", "[", 
            RowBox[{"allphasesbft", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"collapseBivalentNodes", "@@", 
                  RowBox[{"squareMove", "[", 
                   RowBox[{
                   "newa", ",", "newb", ",", "newc", ",", "newd", ",", "#", 
                    ",", "True", ",", "True"}], "]"}]}], ")"}], "&"}], ",", 
               "squarefaces"}], "]"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "mix", " ", "it", " ", "up", " ", "and", " ", "only", " ", "keep", 
            " ", "the", " ", "first", " ", "elements"}], ",", " ", 
           RowBox[{"dictated", " ", "by", " ", "maxtolerablelength"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "allphasesbft", "]"}], ">", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"allphasesbft", "=", 
             RowBox[{"PadRight", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"allphasesbft", "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ";;", 
                    RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], ",", 
                 RowBox[{"allphasesbft", "[", 
                  RowBox[{"[", 
                   RowBox[{"2", ";;", 
                    RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}]}], "]"}], 
               ",", "maxtolerablelength", ",", 
               RowBox[{"Unevaluated", "[", 
                RowBox[{"Sequence", "[", "]"}], "]"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "Now", " ", "do", " ", "the", " ", "square", " ", "moves", " ", 
           "for", " ", "BFTs", " ", "but", " ", "using", " ", "nodes", " ", 
           "instead", " ", "of", " ", "faces"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"squaremovenodes", "=", 
            RowBox[{"Map", "[", 
             RowBox[{"Union", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "newa", "]"}], "+", 
                    RowBox[{"Length", "[", "newc", "]"}]}]}], "}"}]}], 
                   ")"}]}], "&"}], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "#"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}]}], "]"}], "&"}], ",", 
                  "squarefaces"}], "]"}], ",", 
                RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"squaremovenodes", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Flatten", ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"PadRight", "[", 
                RowBox[{
                 RowBox[{"Union", "[", "#", "]"}], ",", "2", ",", 
                 RowBox[{
                  RowBox[{"Union", "[", "#", "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Transpose", "[", "#", "]"}], "&"}], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "newa", "]"}], "+", 
                    RowBox[{"Length", "[", "newc", "]"}]}]}], "}"}]}], ")"}], 
                   "&"}], ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "#"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}]}], "]"}], "&"}], ",", 
                    "squarefaces"}], "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"squaremovenodes", "=", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", "#", "]"}], "&"}], ",", 
                RowBox[{
                 RowBox[{"FindCycle", "[", 
                  RowBox[{
                   RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], 
                    "]"}], "]"}], ",", 
                   RowBox[{"{", "4", "}"}], ",", "All"}], "]"}], "/.", 
                 RowBox[{"UndirectedEdge", "\[Rule]", "Sequence"}]}]}], "]"}],
               ",", 
              RowBox[{
              "Alternatives", "@@", "squarefacesturnedintonodenumbers"}]}], 
             "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"spawnNewPhasesBFTnodes", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], "}"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"Block", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "thesquarefaces", ",", "thesquarefacesturnedintonodenumbers", 
                ",", "thesquaremovenodes", ",", "squaremovedphases", ",", 
                "positionnewphases", ",", "newphases", ",", "localvars", ",", 
                "localkast"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"thesquarefaces", "=", 
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"getInternalFaceLabels", "[", 
                   RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                   "]"}], ",", 
                  RowBox[{"zz_", "/;", 
                   RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Variables", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}], "\[Equal]", 
                    "4"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"localvars", "=", 
                RowBox[{"Variables", "[", 
                 RowBox[{"{", 
                  RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                  "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"localkast", "=", 
                RowBox[{"joinupKasteleyn", "[", 
                 RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"thesquarefaces", "=", 
                RowBox[{"Cases", "[", 
                 RowBox[{"thesquarefaces", ",", 
                  RowBox[{"zz_", "/;", 
                   RowBox[{"isTheFaceAsquare", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"Length", "[", "localkast", "]"}]}], "}"}]}], 
                    "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"localkast", ",", "#"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "&"}], 
                    ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"localvars", ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"zz", ",", "_"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "zz"}], "]"}]}]}], "]"}]}], "]"}]}], 
                    "]"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"thesquaremovenodes", "=", 
                  RowBox[{"Map", "[", 
                   RowBox[{"Union", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "thea", "]"}], "+", 
                    RowBox[{"Length", "[", "thec", "]"}]}]}], "}"}]}], 
                    ")"}]}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "#"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}]}], "]"}], "&"}], ",", 
                    "thesquarefaces"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";"}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"thesquaremovenodes", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{"Flatten", ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"PadRight", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", "#", "]"}], ",", "2", ",", 
                    RowBox[{
                    RowBox[{"Union", "[", "#", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Transpose", "[", "#", "]"}], "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "thea", "]"}], "+", 
                    RowBox[{"Length", "[", "thec", "]"}]}]}], "}"}]}], ")"}], 
                    "&"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"joinupKasteleyn", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"_", ",", "#"}], "]"}], "|", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}]}], "]"}], "&"}], ",", 
                    "thesquarefaces"}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"thesquaremovenodes", "=", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Union", "[", "#", "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"FindCycle", "[", 
                    RowBox[{
                    RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"{", "4", "}"}], ",", "All"}], "]"}], "/.", 
                    RowBox[{"UndirectedEdge", "\[Rule]", "Sequence"}]}]}], 
                    "]"}], ",", 
                    RowBox[{
                    "Alternatives", "@@", 
                    "thesquarefacesturnedintonodenumbers"}]}], "]"}]}], ";"}],
                 "*)"}], "\[IndentingNewLine]", 
               RowBox[{"squaremovedphases", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"collapseBivalentNodes", "@@", 
                    RowBox[{"squareMove", "[", 
                    RowBox[{
                    "thea", ",", "theb", ",", "thec", ",", "thed", ",", "#", 
                    ",", "True", ",", "True"}], "]"}]}], "&"}], ",", 
                  "thesquaremovenodes"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"positionnewphases", "=", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"Position", "[", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"areThesePhasesEqual", "[", 
                    RowBox[{
                    RowBox[{"squaremovedphases", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], ",", 
                    RowBox[{"allphasesbftnodes", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "squaremovedphases", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "allphasesbftnodes", "]"}]}], 
                    "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"newphases", "=", 
                RowBox[{"PadRight", "[", 
                 RowBox[{
                  RowBox[{"squaremovedphases", "[", 
                   RowBox[{"[", "positionnewphases", "]"}], "]"}], ",", 
                  "maxtolerablelength", ",", 
                  RowBox[{"Unevaluated", "[", 
                   RowBox[{"Sequence", "[", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", "newphases"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"allphasesbftnodes", "=", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], 
           "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"newphasesbftnodes", "=", "allphasesbftnodes"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"afterlength", "=", "2"}], ";", "\[IndentingNewLine]", 
         RowBox[{"beforelength", "=", "1"}], ";", "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"newphasesbftnodes", "=!=", 
             RowBox[{"{", "}"}]}], "&&", 
            RowBox[{"afterlength", "\[LessEqual]", "maxtolerablelength"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"beforelength", "=", 
             RowBox[{"Length", "[", "allphasesbftnodes", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"pi", "=", "1"}], ",", 
              RowBox[{"pi", "\[LessEqual]", 
               RowBox[{"Length", "[", "newphasesbftnodes", "]"}]}], ",", 
              RowBox[{"pi", "++"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"phasestoadd", "=", 
                RowBox[{"spawnNewPhasesBFTnodes", "[", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"newphasesbftnodes", "[", 
                   RowBox[{"[", "pi", "]"}], "]"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"allphasesbftnodes", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"allphasesbftnodes", ",", "phasestoadd"}], "]"}]}], 
               ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"afterlength", "=", 
             RowBox[{"Length", "[", "allphasesbftnodes", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"newphasesbftnodes", "=", 
             RowBox[{"allphasesbftnodes", "[", 
              RowBox[{"[", 
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"beforelength", "+", "1"}], ",", "afterlength"}], 
                "]"}], "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"allphasesbftnodes", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Join", "[", 
            RowBox[{"allphasesbftnodes", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"collapseBivalentNodes", "@@", 
                  RowBox[{"squareMove", "[", 
                   RowBox[{
                   "newa", ",", "newb", ",", "newc", ",", "newd", ",", "#", 
                    ",", "True", ",", "True"}], "]"}]}], ")"}], "&"}], ",", 
               "squaremovenodes"}], "]"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "mix", " ", "it", " ", "up", " ", "and", " ", "only", " ", "keep", 
            " ", "the", " ", "first", " ", "elements"}], ",", " ", 
           RowBox[{"dictated", " ", "by", " ", "maxtolerablelength"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "allphasesbftnodes", "]"}], ">", "0"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"allphasesbftnodes", "=", 
             RowBox[{"PadRight", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"allphasesbftnodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ";;", 
                    RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], ",", 
                 RowBox[{"allphasesbftnodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"2", ";;", 
                    RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}]}], "]"}], 
               ",", "maxtolerablelength", ",", 
               RowBox[{"Unevaluated", "[", 
                RowBox[{"Sequence", "[", "]"}], "]"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Now", " ", "do", " ", "the", " ", "square", " ", "moves", " ", "for", 
        " ", "scattering", " ", "amplitudes"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"squaremovenodesscattering", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", "#", "]"}], "&"}], ",", 
         RowBox[{
          RowBox[{"FindCycle", "[", 
           RowBox[{
            RowBox[{"AdjacencyGraph", "[", 
             RowBox[{"turnIntoAdjacencyMatrix", "[", 
              RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
             "]"}], ",", 
            RowBox[{"{", "4", "}"}], ",", "All"}], "]"}], "/.", 
          RowBox[{"UndirectedEdge", "\[Rule]", "Sequence"}]}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"spawnNewPhasesScattering", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], "}"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "tempsquaremovenodesscattering", ",", "squaremovedphases", ",", 
             "positionnewphases", ",", "newphases"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"tempsquaremovenodesscattering", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", "#", "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"FindCycle", "[", 
                 RowBox[{
                  RowBox[{"AdjacencyGraph", "[", 
                   RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"thea", ",", "theb", ",", "thec", ",", "thed"}], 
                    "]"}], "]"}], ",", 
                  RowBox[{"{", "4", "}"}], ",", "All"}], "]"}], "/.", 
                RowBox[{"UndirectedEdge", "\[Rule]", "Sequence"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"squaremovedphases", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"collapseBivalentNodes", "@@", 
                 RowBox[{"squareMove", "[", 
                  RowBox[{
                  "thea", ",", "theb", ",", "thec", ",", "thed", ",", "#", 
                   ",", "False"}], "]"}]}], "&"}], ",", 
               "tempsquaremovenodesscattering"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"positionnewphases", "=", 
             RowBox[{"Flatten", "[", 
              RowBox[{"Position", "[", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Or", "@@", "#"}], "&"}], ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"areThesePhasesEqual", "[", 
                    RowBox[{
                    RowBox[{"squaremovedphases", "[", 
                    RowBox[{"[", "iii", "]"}], "]"}], ",", 
                    RowBox[{"allphasesscattering", "[", 
                    RowBox[{"[", "jjj", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"iii", ",", 
                    RowBox[{"Length", "[", "squaremovedphases", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"jjj", ",", 
                    RowBox[{"Length", "[", "allphasesscattering", "]"}]}], 
                    "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"newphases", "=", 
             RowBox[{"PadRight", "[", 
              RowBox[{
               RowBox[{"squaremovedphases", "[", 
                RowBox[{"[", "positionnewphases", "]"}], "]"}], ",", 
               "maxtolerablelength", ",", 
               RowBox[{"Unevaluated", "[", 
                RowBox[{"Sequence", "[", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "newphases"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"allphasesscattering", "=", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "}"}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newphasesscattering", "=", "allphasesscattering"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"afterlength", "=", "2"}], ";", "\[IndentingNewLine]", 
      RowBox[{"beforelength", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"newphasesscattering", "=!=", 
          RowBox[{"{", "}"}]}], "&&", 
         RowBox[{"afterlength", "\[LessEqual]", "maxtolerablelength"}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"beforelength", "=", 
          RowBox[{"Length", "[", "allphasesscattering", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"pi", "=", "1"}], ",", 
           RowBox[{"pi", "\[LessEqual]", 
            RowBox[{"Length", "[", "newphasesscattering", "]"}]}], ",", 
           RowBox[{"pi", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"phasestoadd", "=", 
             RowBox[{"spawnNewPhasesScattering", "[", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"newphasesscattering", "[", 
                RowBox[{"[", "pi", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"allphasesscattering", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"allphasesscattering", ",", "phasestoadd"}], "]"}]}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"afterlength", "=", 
          RowBox[{"Length", "[", "allphasesscattering", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"newphasesscattering", "=", 
          RowBox[{"allphasesscattering", "[", 
           RowBox[{"[", 
            RowBox[{"Range", "[", 
             RowBox[{
              RowBox[{"beforelength", "+", "1"}], ",", "afterlength"}], "]"}],
             "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allphasesscattering", "=", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"allphasesscattering", ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"collapseBivalentNodes", "@@", 
               RowBox[{"squareMove", "[", 
                RowBox[{
                "newa", ",", "newb", ",", "newc", ",", "newd", ",", "#", ",", 
                 "False"}], "]"}]}], ")"}], "&"}], ",", 
            "squaremovenodesscattering"}], "]"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "mix", " ", "it", " ", "up", " ", "and", " ", "only", " ", "keep", 
         " ", "the", " ", "first", " ", "elements"}], ",", " ", 
        RowBox[{"dictated", " ", "by", " ", "maxtolerablelength"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "allphasesscattering", "]"}], ">", "0"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"allphasesscattering", "=", 
          RowBox[{"PadRight", "[", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"allphasesscattering", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], ",", 
              RowBox[{"allphasesscattering", "[", 
               RowBox[{"[", 
                RowBox[{"2", ";;", 
                 RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}]}], "]"}], ",", 
            "maxtolerablelength", ",", 
            RowBox[{"Unevaluated", "[", 
             RowBox[{"Sequence", "[", "]"}], "]"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Now", " ", "we", " ", "can", " ", "finally", " ", "do", " ", "our", 
         " ", "tests", " ", "on", " ", "the", " ", "move"}], "-", 
        RowBox[{"equivalent", " ", 
         RowBox[{"phases", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"getDuplicateEdges", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
          "\[Equal]", 
          RowBox[{"{", "}"}]}], "&&", 
         RowBox[{"getEdgesBFTformQ", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "&&", 
         RowBox[{
          RowBox[{"getKasteleynConsistencyViolation", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"getKasteleynCheckQ", "[", 
                  RowBox[{
                   RowBox[{"Sequence", "@@", "#"}], ",", "True"}], "]"}], 
                 "&"}], ",", "allphasesbft"}], "]"}]}], ")"}], "=!=", 
            "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Somehow doing square moves (using faces) hasn't \
preserved the index structure of BFTs for some \\\"move-equivalent\\\" \
phases!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"getKasteleynCheckQ", "[", 
                  RowBox[{
                   RowBox[{"Sequence", "@@", "#"}], ",", "True"}], "]"}], 
                 "&"}], ",", "allphasesbftnodes"}], "]"}]}], ")"}], "=!=", 
            "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              
              "\"\< : Somehow doing square moves (using nodes) hasn't \
preserved the index structure of BFTs for some \\\"move-equivalent\\\" \
phases!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"bftlabeling", "&&", 
         RowBox[{
          RowBox[{"getDuplicateEdges", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], 
          "\[Equal]", 
          RowBox[{"{", "}"}]}], "&&", 
         RowBox[{"getEdgesBFTformQ", "[", 
          RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "&&", 
         RowBox[{
          RowBox[{"getKasteleynConsistencyViolation", "[", 
           RowBox[{"newa", ",", "newb", ",", "newc", ",", "newd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Equal", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"getNumberInternalFaces", "@@", "#"}], ")"}], "&"}],
                 ",", "allphasesbft"}], "]"}]}], ")"}], "=!=", "True"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Different phases of the square moves (using faces) have \
different numbers of faces!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Equal", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"getNumberInternalFaces", "@@", "#"}], ")"}], "&"}],
                 ",", "allphasesbftnodes"}], "]"}]}], ")"}], "=!=", "True"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Different phases of the square moves (using nodes) have \
different numbers of faces!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Equal", "@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"Normal", "[", 
                   RowBox[{"EdgeCycleMatrix", "[", 
                    RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "]"}], 
                   "]"}], "]"}], "&"}], ",", "allphasesbft"}], "]"}]}], ")"}],
             "=!=", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Different phases of the square moves for BFTs (using \
faces) have different numbers of loops!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Equal", "@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"Normal", "[", 
                   RowBox[{"EdgeCycleMatrix", "[", 
                    RowBox[{"AdjacencyGraph", "[", 
                    RowBox[{"turnIntoAdjacencyMatrix", "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "]"}], 
                   "]"}], "]"}], "&"}], ",", "allphasesbftnodes"}], "]"}]}], 
             ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Different phases of the square moves for BFTs (using \
faces) have different numbers of loops!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Equal", "@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Normal", "[", 
                RowBox[{"EdgeCycleMatrix", "[", 
                 RowBox[{"AdjacencyGraph", "[", 
                  RowBox[{"turnIntoAdjacencyMatrix", "[", 
                   RowBox[{"Sequence", "@@", "#"}], "]"}], "]"}], "]"}], 
                "]"}], "]"}], "&"}], ",", "allphasesscattering"}], "]"}]}], 
          ")"}], "=!=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : Different phases of the square moves for scattering have \
different numbers of loops!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"turnIntoStratNums", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"givenphase", ",", "areyoubft"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "dimP", ",", "kk", ",", "nn", ",", "maxCdim", ",", 
             "numremovableedges", ",", "outputnums"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"outputnums", "=", 
             RowBox[{"Sequence", "[", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"dimP", "=", 
             RowBox[{"dimensionPolytope", "[", 
              RowBox[{"matchingPolytope", "@@", "givenphase"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"dimP", "\[LessEqual]", "10"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"kk", "=", 
                RowBox[{"getK", "@@", "givenphase"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"nn", "=", 
                RowBox[{"getN", "@@", "givenphase"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"maxCdim", "=", 
                RowBox[{"kk", 
                 RowBox[{"(", 
                  RowBox[{"nn", "-", "kk"}], ")"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"dimP", "-", "maxCdim"}], "\[LessEqual]", "3"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"numremovableedges", "=", 
                   RowBox[{"Length", "[", 
                    RowBox[{"removableEdges", "@@", "givenphase"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"numremovableedges", "\[LessEqual]", "12"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"we", " ", "have", " ", "passed", " ", "the", " ", 
                    RowBox[{"test", ":", " ", 
                    RowBox[{
                    "this", " ", "example", " ", "is", " ", "not", " ", 
                    "exaggeratedly", " ", "complex", " ", "and", " ", "is", 
                    " ", "worth", " ", "testing"}]}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"areyoubft", "===", "True"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"outputnums", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"stratificationNumbers", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "givenphase"}], ",", "False", 
                    ",", "False", ",", "2"}], "]"}], ",", 
                    RowBox[{"stratificationNumbers", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "givenphase"}], ",", "False", 
                    ",", "True", ",", "1"}], "]"}], ",", 
                    RowBox[{"stratificationNumbers", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "givenphase"}], ",", "False", 
                    ",", "True", ",", "2"}], "]"}]}], "}"}]}], ";"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{
                    RowBox[{"outputnums", "=", 
                    RowBox[{"{", 
                    RowBox[{"stratificationNumbers", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "givenphase"}], ",", "False", 
                    ",", "False", ",", "2"}], "]"}], "}"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}]}], 
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", "outputnums"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"bftlabeling", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bftfacesstratifications", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"turnIntoStratNums", "[", 
              RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", "allphasesbft"}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bftnodesstratifications", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"turnIntoStratNums", "[", 
              RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
            "allphasesbftnodes"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Equal", "@@", "bftfacesstratifications"}], "=!=", 
            "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Move-equivalent configurations for BFTs (using faces) \
have different stratification numbers!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Equal", "@@", "bftnodesstratifications"}], "=!=", 
            "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : Move-equivalent configurations for BFTs (using nodes) \
have different stratification numbers!\>\""}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"scatteringstratifications", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"turnIntoStratNums", "[", 
           RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
         "allphasesscattering"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Equal", "@@", "scatteringstratifications"}], "=!=", 
         "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<kast=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
           "\"\< : Move-equivalent configurations for scattering have \
different stratification numbers!\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "allTestSquareMove", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSquareMove", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Print", "[", "\"\<Finished strange examples\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"todobft1kasts", "=", 
     RowBox[{"allbft1kasteleyns", "[", 
      RowBox[{"[", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Round", "[", 
           RowBox[{"0.33", 
            RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}], "+", 
          "1"}], ",", 
         RowBox[{"Round", "[", 
          RowBox[{"0.66", 
           RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], 
        "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"allTestSquareMove", "[", 
        RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"todobft1kasts", ",", 
        RowBox[{"Length", "[", "todobft1kasts", "]"}]}], "]"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "\"\<Finished BFT1\>\"", "]"}], ";"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"todobft2kasts", "=", 
   RowBox[{"allbft2kasteleyns", "[", 
    RowBox[{"[", 
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{"0.33", 
          RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}], "+", 
        "1"}], ",", 
       RowBox[{"Round", "[", 
        RowBox[{"0.66", 
         RowBox[{"Length", "[", "allbft2kasteleyns", "]"}]}], "]"}]}], "]"}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSquareMove", "[", 
      RowBox[{"#", ",", "Null"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"todobft2kasts", ",", 
      RowBox[{"Length", "[", "todobft2kasts", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Finished BFT2\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"todoscatteringkasts", "=", 
   RowBox[{"allscatteringkasteleyns", "[", 
    RowBox[{"[", 
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{"0.33", 
          RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}], 
        "+", "1"}], ",", 
       RowBox[{"Round", "[", 
        RowBox[{"0.66", 
         RowBox[{"Length", "[", "allscatteringkasteleyns", "]"}]}], "]"}]}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"allTestSquareMove", "[", 
      RowBox[{"#", ",", "False"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"todoscatteringkasts", ",", 
      RowBox[{"Length", "[", "todoscatteringkasts", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Finished scattering\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.685358320666417*^9, 
   3.6853583290699387`*^9}, {3.685358446457633*^9, 3.6853584533224416`*^9}, {
   3.6853585226858892`*^9, 3.685358576734087*^9}, {3.6853586343768067`*^9, 
   3.685358749743182*^9}, {3.685358871313137*^9, 3.6853588814372797`*^9}, {
   3.6853589676465344`*^9, 3.685359004407975*^9}, {3.6854313761375637`*^9, 
   3.6854313910755205`*^9}, 3.6854455086613493`*^9, 3.685684536825992*^9, {
   3.685685495409101*^9, 3.685685495536757*^9}, 3.693665676239455*^9, 
   3.6937438269055557`*^9, 3.693747196486348*^9, {3.693753022554099*^9, 
   3.693753068722158*^9}, {3.693810132687114*^9, 3.693810144059559*^9}, {
   3.693810280948594*^9, 3.6938103065736103`*^9}, {3.694171538470216*^9, 
   3.694171566960268*^9}, {3.694236385179731*^9, 3.694236443098798*^9}, {
   3.694236661234189*^9, 3.69423681394928*^9}, 3.694526269012569*^9, {
   3.694527177712412*^9, 3.694527199453515*^9}, {3.6945275914469643`*^9, 
   3.6945276007204037`*^9}, 3.6945277076017303`*^9, {3.694690632405108*^9, 
   3.6946906579224653`*^9}, {3.694690694871977*^9, 3.694690720686542*^9}, 
   3.694953567097538*^9, {3.695022295557583*^9, 3.695022307625469*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.695022328761785*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6950225141686296`*^9, 3.695022514806677*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Here", " ", "we", " ", "check", " ", "higgsEdgesBFT"}], 
  "*)"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.6653194611906705`*^9, 3.665319470875516*^9}, 
   3.665319696162837*^9, 3.665319923129767*^9, {3.66532084581382*^9, 
   3.6653208558484077`*^9}, 3.66532141327155*^9, 3.6653872607352314`*^9, {
   3.6653878723812013`*^9, 3.665387872807293*^9}, {3.6653882181571608`*^9, 
   3.665388220760619*^9}, {3.6653886771674967`*^9, 3.665388699256188*^9}, {
   3.665394491044639*^9, 3.6653944995239697`*^9}, {3.6653959126545773`*^9, 
   3.6653959187590914`*^9}, 3.6715453677008524`*^9, {3.672749981361431*^9, 
   3.6727499814444113`*^9}, 3.684575102612509*^9, 3.6845802079994617`*^9, 
   3.6846471491723537`*^9, 3.684648173199854*^9, 3.684648253924594*^9, 
   3.6853595718441153`*^9, {3.685364674273582*^9, 3.685364713728588*^9}, {
   3.685684209856473*^9, 3.685684210478775*^9}, {3.693667513190053*^9, 
   3.6936675146580343`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bft1filename", "=", "\"\<distinctbft1kasteleyns\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
  RowBox[{"(", 
   RowBox[{"<<", "bipartiteSUSY.m"}], ")"}], ";", 
  RowBox[{"CloseKernels", "[", "]"}], ";", 
  RowBox[{"LaunchKernels", "[", "8", "]"}], ";", 
  RowBox[{"ParallelNeeds", "[", "\"\<bipartiteSUSY`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionMemory", "=", "False"}], ";", 
  RowBox[{"DistributeDefinitions", "[", "functionMemory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allbft1kasteleyns", "=", 
   RowBox[{"<<", 
    RowBox[{"(", "bft1filename", ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annoyingsmallexamples", "=", 
    RowBox[{"(", 
     RowBox[{"<<", "\"\<annoyingsmallexamples\>\""}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bft1TestHiggsEdgesBFT", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], ",", 
     "bftlabeling_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "alledges", ",", "turnoffcombinations", ",", "higgsedkasteleyns"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"alledges", "=", 
       RowBox[{"Variables", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Let", "'"}], "s", " ", "mix", " ", "them", " ", "up", " ", 
        "a", " ", "bit", " ", "to", " ", "give", " ", "a", " ", "wider", " ", 
        "variety", " ", "of", " ", "scenarios"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"alledges", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"alledges", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"alledges", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", 
               RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], ",", 
            RowBox[{"Reverse", "[", 
             RowBox[{"alledges", "[", 
              RowBox[{"[", 
               RowBox[{"2", ";;", 
                RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"turnoffcombinations", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Subsets", "[", 
             RowBox[{"alledges", ",", 
              RowBox[{"{", "0", "}"}]}], "]"}], ",", 
            RowBox[{"Subsets", "[", 
             RowBox[{"alledges", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], ",", 
            RowBox[{"Subsets", "[", 
             RowBox[{"alledges", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", 
            RowBox[{"Join", "@@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Subsets", "[", 
                RowBox[{"alledges", ",", 
                 RowBox[{"{", "iii", "}"}], ",", 
                 RowBox[{"Min", "[", 
                  RowBox[{
                   RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", "alledges", "]"}], ",", "iii"}], 
                    "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{"2000", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "alledges", "]"}], "-", "5"}], 
                    ")"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"0", "\[Rule]", "1"}], "}"}]}], ")"}]}], "]"}]}], 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"iii", ",", "3", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "alledges", "]"}], "-", "3"}]}], 
                "}"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "alledges", "]"}], "-", "2"}], ">", "0"}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"turnoffcombinations", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"turnoffcombinations", ",", 
               RowBox[{"Subsets", "[", 
                RowBox[{"alledges", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Length", "[", "alledges", "]"}], "-", "2"}], 
                  "}"}]}], "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "alledges", "]"}], "-", "1"}], ">", "0"}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"turnoffcombinations", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"turnoffcombinations", ",", 
               RowBox[{"Subsets", "[", 
                RowBox[{"alledges", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Length", "[", "alledges", "]"}], "-", "1"}], 
                  "}"}]}], "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "alledges", "]"}], ">", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"turnoffcombinations", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"turnoffcombinations", ",", 
               RowBox[{"Subsets", "[", 
                RowBox[{"alledges", ",", 
                 RowBox[{"{", 
                  RowBox[{"Length", "[", "alledges", "]"}], "}"}]}], "]"}]}], 
              "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "turnoffcombinations", "]"}], ">", "100"}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"turnoffcombinations", "=", 
             RowBox[{"RandomSample", "[", 
              RowBox[{"turnoffcombinations", ",", "100"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"higgsedkasteleyns", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"higgsEdgesBFT", "[", 
              RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#"}], "]"}], 
             "&"}], ",", "turnoffcombinations"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"getDuplicateEdges", "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "\[Equal]", 
                    RowBox[{"{", "}"}]}], "&&", 
                   RowBox[{"getEdgesBFTformQ", "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "&&", 
                   RowBox[{
                    RowBox[{"getKasteleynConsistencyViolation", "[", 
                    RowBox[{"Sequence", "@@", "#"}], "]"}], "===", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "}"}]}]}], ")"}], "&"}], ",", 
                "higgsedkasteleyns"}], "]"}]}], ")"}], "=!=", "True"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : The index structure of BFTs wasn't preserved after the \
higgsing!\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", "alledges", "]"}], "-", 
                   RowBox[{"Length", "[", 
                    RowBox[{"Variables", "[", "#1", "]"}], "]"}]}], 
                  "\[Equal]", 
                  RowBox[{"Length", "[", 
                   RowBox[{"consistentEdgeRemoval", "[", 
                    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "#2"}], 
                    "]"}], "]"}]}], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"higgsedkasteleyns", ",", "turnoffcombinations"}], 
                 "}"}]}], "]"}]}], ")"}], "=!=", "True"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<kast=\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
              "\"\< : The higgsing hasn't removed the correct number of \
edges!\>\""}], "]"}], ";", "\[IndentingNewLine]", "\.13"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "bft1TestHiggsEdgesBFT", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bft1TestHiggsEdgesBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"annoyingsmallexamples", ",", 
      RowBox[{"zz_", "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"perfectMatchings", "@@", "zz"}], ")"}], "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParallelMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bft1TestHiggsEdgesBFT", "[", 
      RowBox[{"#", ",", "True"}], "]"}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"allbft1kasteleyns", ",", 
      RowBox[{"Length", "[", "allbft1kasteleyns", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Quit", "[", "]"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.665318171181672*^9, 3.665318202704878*^9}, {
   3.6653183216068077`*^9, 3.6653183520994596`*^9}, {3.66531839215139*^9, 
   3.6653184111501756`*^9}, 3.6653192263125267`*^9, 3.6653192607611127`*^9, {
   3.665319433827194*^9, 3.665319470875516*^9}, {3.6653197007946744`*^9, 
   3.6653197104984245`*^9}, {3.6653202255463314`*^9, 3.665320244858407*^9}, {
   3.6653207815004144`*^9, 3.6653208951053333`*^9}, {3.6653209452862015`*^9, 
   3.66532097842157*^9}, {3.6653210227354336`*^9, 3.6653211041830716`*^9}, {
   3.665321718658688*^9, 3.6653217820570545`*^9}, {3.6653218590977*^9, 
   3.665321920578185*^9}, {3.665322195244587*^9, 3.6653222033328075`*^9}, {
   3.6653223748763256`*^9, 3.6653224330165462`*^9}, {3.66532322955106*^9, 
   3.6653232390476637`*^9}, {3.6653238225077314`*^9, 3.665323879242934*^9}, {
   3.6653239159845405`*^9, 3.665324034040783*^9}, {3.6653257558168*^9, 
   3.6653257558748393`*^9}, 3.6653807684593163`*^9, 3.665382653447832*^9, {
   3.665382822865073*^9, 3.6653828563613834`*^9}, {3.665387578430645*^9, 
   3.6653876417433176`*^9}, {3.665387772827407*^9, 3.6653879319324636`*^9}, {
   3.665387975013636*^9, 3.6653880124958487`*^9}, {3.6653881161778917`*^9, 
   3.665388203398225*^9}, {3.665388418670115*^9, 3.6653884602207074`*^9}, {
   3.6653885272304087`*^9, 3.665388540956611*^9}, {3.6653885991701355`*^9, 
   3.6653886322947865`*^9}, {3.6653887029314117`*^9, 3.665388703056418*^9}, {
   3.665389018738357*^9, 3.665389158046074*^9}, {3.665389284500309*^9, 
   3.665389339919886*^9}, {3.6653897666302986`*^9, 3.6653898363558693`*^9}, {
   3.665389910163226*^9, 3.665389961631102*^9}, {3.6653901380930347`*^9, 
   3.665390149511369*^9}, {3.665390300980686*^9, 3.6653903028178134`*^9}, {
   3.6653903445906506`*^9, 3.6653904473908606`*^9}, {3.6653945222132363`*^9, 
   3.6653945445009356`*^9}, 3.665394584118007*^9, {3.665394640528449*^9, 
   3.6653946583592005`*^9}, {3.665394756936673*^9, 3.665394939098732*^9}, {
   3.6653949871547394`*^9, 3.665394996124837*^9}, {3.6653950323304377`*^9, 
   3.6653951271812873`*^9}, {3.6653951719081173`*^9, 
   3.6653952161041775`*^9}, {3.6653952920676613`*^9, 
   3.6653953916260896`*^9}, {3.665395727510127*^9, 3.665395790959216*^9}, {
   3.665395874423108*^9, 3.6653958840790167`*^9}, {3.667043472896695*^9, 
   3.6670434732248583`*^9}, {3.667561011069772*^9, 3.6675610331953616`*^9}, {
   3.6675683705643673`*^9, 3.667568372444744*^9}, 3.6676533331215067`*^9, {
   3.6715436771272993`*^9, 3.671543681137492*^9}, 3.6715443363915234`*^9, {
   3.671545425662253*^9, 3.671545432037966*^9}, {3.6715455210817585`*^9, 
   3.6715455226717453`*^9}, 3.6715457983370934`*^9, 3.671545831968717*^9, {
   3.671687653202075*^9, 3.671687653879326*^9}, {3.6727399887330008`*^9, 
   3.672739990697439*^9}, {3.6727421263550673`*^9, 3.672742168143506*^9}, {
   3.6727422146222696`*^9, 3.6727423194137597`*^9}, 3.672742420889721*^9, {
   3.672742542057129*^9, 3.6727426039915247`*^9}, {3.6845626409503555`*^9, 
   3.6845626502690935`*^9}, {3.684562805443205*^9, 3.6845630598708067`*^9}, {
   3.6845657736702204`*^9, 3.6845658028526173`*^9}, {3.6845659484464293`*^9, 
   3.684565950534692*^9}, 3.684566031738899*^9, {3.684566104056777*^9, 
   3.684566104197403*^9}, {3.6845697720568457`*^9, 3.684569772432065*^9}, {
   3.6845698378986716`*^9, 3.6845698652439203`*^9}, 3.68457016258515*^9, {
   3.6845703082790585`*^9, 3.684570464063136*^9}, {3.684570497938422*^9, 
   3.6845706184043627`*^9}, {3.6845716053621597`*^9, 3.684571734735937*^9}, {
   3.6845718189559803`*^9, 3.684571836183045*^9}, {3.6845719767397957`*^9, 
   3.6845719777019696`*^9}, {3.684572567131533*^9, 3.6845726202715187`*^9}, {
   3.6845727031368017`*^9, 3.6845727037462063`*^9}, {3.684572834769595*^9, 
   3.6845729103081703`*^9}, {3.6845729436497173`*^9, 
   3.6845731129096518`*^9}, {3.684573191816368*^9, 3.684573191863244*^9}, 
   3.6845735963099227`*^9, {3.6845741429123693`*^9, 3.6845742049491363`*^9}, {
   3.6845742431095514`*^9, 3.6845742782655716`*^9}, 3.6845744692237563`*^9, {
   3.6845751348892555`*^9, 3.6845752095924788`*^9}, {3.6845752899464808`*^9, 
   3.684575319418948*^9}, {3.6845760394775333`*^9, 3.68457605220586*^9}, {
   3.6845763747862554`*^9, 3.6845765564591846`*^9}, {3.684577541616927*^9, 
   3.684577560248851*^9}, {3.684580256299975*^9, 3.684580282809972*^9}, 
   3.6845803764763565`*^9, {3.684580507835149*^9, 3.684580885665312*^9}, {
   3.6845809186862803`*^9, 3.6845809219235106`*^9}, {3.6845810516980286`*^9, 
   3.684581080172103*^9}, {3.684581383285103*^9, 3.6845814928285522`*^9}, {
   3.68458152555422*^9, 3.6845815491653495`*^9}, {3.684581580046487*^9, 
   3.6845816003550897`*^9}, {3.6846471625889072`*^9, 3.684647185156494*^9}, {
   3.6846472459357777`*^9, 3.6846472663574123`*^9}, {3.684647323817868*^9, 
   3.684647384378982*^9}, {3.6846475128657913`*^9, 3.6846475148894916`*^9}, {
   3.6846478780124445`*^9, 3.684647881333372*^9}, {3.684648202917942*^9, 
   3.6846482359449673`*^9}, 3.6846483401109657`*^9, {3.6853596022161193`*^9, 
   3.6853596106910753`*^9}, {3.685359672092949*^9, 3.6853597490949097`*^9}, {
   3.68535994899571*^9, 3.6853599620982065`*^9}, {3.685360016096348*^9, 
   3.6853600228203278`*^9}, {3.685361449572304*^9, 3.6853614542558937`*^9}, {
   3.685361532944867*^9, 3.68536153690064*^9}, {3.6853615843165865`*^9, 
   3.6853616659085407`*^9}, {3.6853617378823156`*^9, 
   3.6853617460601563`*^9}, {3.685362102230776*^9, 3.6853621234892235`*^9}, {
   3.6853635388979053`*^9, 3.6853635529759455`*^9}, {3.685462038694764*^9, 
   3.6854620668332167`*^9}, 3.685684543009832*^9, {3.6856855294324417`*^9, 
   3.685685547081506*^9}, {3.6936678138222313`*^9, 3.693667826719159*^9}, 
   3.693743564577423*^9, {3.693920081777637*^9, 3.693920083894093*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToExpression", "::", "notstrbox"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"FEPrivate`FrontEndResourceString\\\", \
\\\"[\\\", \\\"\\\\\\\"GetFEKernelInit\\\\\\\"\\\", \\\"]\\\"}]\\)\[NoBreak] \
is not a string or a box. ToExpression can only interpret strings or boxes as \
Wolfram Language input. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ToExpression/notstrbox\\\", ButtonNote -> \
\\\"ToExpression::notstrbox\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.693920120391655*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.684648848496868*^9, 3.684648848543746*^9}}]
},
WindowSize->{1438, 848},
WindowMargins->{{-9, Automatic}, {Automatic, -8}},
FrontEndVersion->"10.3 for Linux x86 (64-bit) (October 9, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 361, 10, 55, "Input"],
Cell[922, 32, 794, 14, 99, "Input"],
Cell[1719, 48, 122, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[1866, 54, 407, 8, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[2276, 64, 7271, 166, 627, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[9562, 233, 665, 13, 23, "Message"],
Cell[10230, 248, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[10349, 253, 318, 8, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[10670, 263, 10260, 250, 957, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[20945, 516, 664, 13, 23, "Message"],
Cell[21612, 531, 149, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[21786, 537, 260, 6, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[22049, 545, 17994, 432, 1421, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[40058, 980, 664, 13, 23, "Message"],
Cell[40725, 995, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[40844, 1000, 836, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[41683, 1016, 16429, 348, 1134, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[58127, 1367, 665, 13, 23, "Message"],
Cell[58795, 1382, 96, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[58916, 1387, 750, 12, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[59669, 1401, 10793, 230, 671, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[70477, 1634, 665, 13, 23, "Message"],
Cell[71145, 1649, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[71262, 1654, 881, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[72146, 1670, 22561, 486, 2079, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[94722, 2159, 665, 13, 23, "Message"],
Cell[95390, 2174, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[95509, 2179, 864, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[96376, 2195, 20570, 433, 2013, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[116961, 2631, 689, 13, 23, "Message"],
Cell[117653, 2646, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[117770, 2651, 798, 13, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[118571, 2666, 12904, 279, 671, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[131490, 2948, 689, 13, 23, "Message"],
Cell[132182, 2963, 248, 3, 32, "Input"],
Cell[CellGroupData[{
Cell[132455, 2970, 816, 13, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[133274, 2985, 18471, 381, 1617, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[151760, 3369, 667, 13, 23, "Message"],
Cell[152430, 3384, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[152549, 3389, 1192, 21, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[153744, 3412, 21844, 470, 1244, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[175603, 3885, 664, 13, 23, "Message"],
Cell[176270, 3900, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[176389, 3905, 1282, 23, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[177674, 3930, 54298, 1233, 3522, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[231987, 5166, 667, 13, 23, "Message"],
Cell[232657, 5181, 96, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[232778, 5186, 867, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[233648, 5202, 15167, 306, 1045, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[248830, 5511, 667, 13, 23, "Message"],
Cell[249500, 5526, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[249617, 5531, 914, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[250534, 5547, 21486, 445, 1617, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[272035, 5995, 665, 13, 23, "Message"],
Cell[272703, 6010, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[272822, 6015, 1333, 20, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[274158, 6037, 44302, 1037, 3115, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[318475, 7077, 665, 13, 23, "Message"],
Cell[319143, 7092, 96, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[319264, 7097, 995, 17, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[320262, 7116, 16656, 364, 1023, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[336933, 7483, 665, 13, 23, "Message"],
Cell[337601, 7498, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[337720, 7503, 951, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[338674, 7521, 14913, 323, 891, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[353602, 7847, 665, 13, 23, "Message"],
Cell[354270, 7862, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[354387, 7867, 1079, 18, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[355469, 7887, 33653, 741, 2519, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[389137, 8631, 712, 14, 23, "Message"],
Cell[389852, 8647, 130, 2, 23, "Print"],
Cell[389985, 8651, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[390102, 8656, 862, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[390967, 8672, 13728, 288, 825, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[404710, 8963, 665, 13, 23, "Message"],
Cell[405378, 8978, 130, 2, 23, "Print"],
Cell[405511, 8982, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[405628, 8987, 973, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[406604, 9005, 74554, 1623, 5204, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[481173, 10631, 665, 13, 23, "Message"],
Cell[481841, 10646, 130, 2, 23, "Print"],
Cell[481974, 10650, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[482093, 10655, 1008, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[483104, 10673, 62390, 1282, 4918, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[545509, 11958, 665, 13, 23, "Message"],
Cell[546177, 11973, 130, 2, 23, "Print"],
Cell[546310, 11977, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[546427, 11982, 909, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[547339, 11999, 27649, 544, 2388, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[575003, 12546, 665, 13, 23, "Message"],
Cell[575671, 12561, 130, 2, 23, "Print"],
Cell[575804, 12565, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[575921, 12570, 865, 14, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[576789, 12586, 16467, 341, 1067, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[593271, 12930, 665, 13, 23, "Message"],
Cell[593939, 12945, 130, 2, 23, "Print"],
Cell[594072, 12949, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[594189, 12954, 941, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[595133, 12971, 20944, 428, 1529, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[616092, 13402, 665, 13, 23, "Message"],
Cell[616760, 13417, 130, 2, 23, "Print"],
Cell[616893, 13421, 93, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[617011, 13426, 923, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[617937, 13443, 12060, 244, 605, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[630012, 13690, 665, 13, 23, "Message"],
Cell[630680, 13705, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[630797, 13710, 966, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[631766, 13727, 12712, 262, 650, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[644493, 13992, 665, 13, 23, "Message"],
Cell[645161, 14007, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[645278, 14012, 648, 11, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[645929, 14025, 58261, 1433, 3426, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[704205, 15461, 665, 13, 23, "Message"],
Cell[704873, 15476, 96, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[704994, 15481, 983, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[705980, 15499, 13472, 286, 847, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[719467, 15788, 664, 13, 23, "Message"],
Cell[720134, 15803, 121, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[720280, 15809, 1173, 18, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[721456, 15829, 36989, 745, 2256, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[758460, 16577, 665, 13, 23, "Message"],
Cell[759128, 16592, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[759245, 16597, 1027, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[760275, 16615, 24109, 502, 1486, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[784399, 17120, 667, 13, 23, "Message"],
Cell[785069, 17135, 130, 2, 23, "Print"],
Cell[785202, 17139, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[785319, 17144, 889, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[786211, 17161, 21432, 454, 1287, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[807658, 17618, 650, 11, 23, "Message"],
Cell[808311, 17631, 132, 2, 23, "Print"],
Cell[808446, 17635, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[808563, 17640, 912, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[809478, 17657, 22981, 478, 1529, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[832474, 18138, 664, 13, 23, "Message"],
Cell[833141, 18153, 132, 2, 23, "Print"],
Cell[833276, 18157, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[833393, 18162, 1272, 21, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[834668, 18185, 153715, 3137, 10372, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[988398, 21325, 665, 13, 23, "Message"],
Cell[989066, 21340, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[989183, 21345, 957, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[990143, 21362, 24898, 510, 1760, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[1015056, 21875, 667, 13, 23, "Message"],
Cell[1015726, 21890, 715, 13, 23, "Message"],
Cell[1016444, 21905, 580, 12, 23, "Message"],
Cell[1017027, 21919, 538, 11, 23, "Message"],
Cell[1017568, 21932, 797, 15, 23, "Message"],
Cell[1018368, 21949, 717, 13, 23, "Message"],
Cell[1019088, 21964, 582, 12, 23, "Message"],
Cell[1019673, 21978, 537, 11, 23, "Message"],
Cell[1020213, 21991, 796, 15, 23, "Message"],
Cell[1021012, 22008, 718, 13, 23, "Message"],
Cell[1021733, 22023, 568, 12, 23, "Message"],
Cell[1022304, 22037, 580, 12, 23, "Message"],
Cell[1022887, 22051, 565, 12, 23, "Message"],
Cell[1023455, 22065, 538, 11, 23, "Message"],
Cell[1023996, 22078, 581, 12, 23, "Message"],
Cell[1024580, 22092, 796, 15, 23, "Message"],
Cell[1025379, 22109, 568, 12, 23, "Message"],
Cell[1025950, 22123, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[1026067, 22128, 1123, 19, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1027193, 22149, 110509, 2846, 7189, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[1137717, 24998, 665, 13, 23, "Message"],
Cell[CellGroupData[{
Cell[1138407, 25015, 1289, 22, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1139699, 25039, 17561, 354, 979, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[1157275, 25396, 665, 13, 23, "Message"],
Cell[1157943, 25411, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[1158060, 25416, 899, 15, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1158962, 25433, 33144, 683, 2630, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[1192121, 26119, 667, 13, 23, "Message"],
Cell[1192791, 26134, 92, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[1192908, 26139, 1019, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1193930, 26157, 171167, 3692, 11244, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[1365112, 29852, 665, 13, 23, "Message"],
Cell[1365780, 29867, 94, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[1365899, 29872, 1010, 16, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1366912, 29890, 16664, 347, 1001, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[1383591, 30240, 665, 13, 23, "Message"],
Cell[1384259, 30255, 92, 1, 32, "Input"]
}
]
*)

(* End of internal cache information *)
